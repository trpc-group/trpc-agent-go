{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"tRPC-Agent-Go: Empowering Go Developers to Build Intelligent AI Applications","text":""},{"location":"#1-project-introduction","title":"1. Project Introduction","text":"<p>The tRPC team previously open-sourced the A2A development framework tRPC-A2A-Go and MCP development framework tRPC-MCP-Go. Especially tRPC-A2A-Go has gained many users and contributors both domestically and internationally. Now we are launching the tRPC-Agent-Go development framework to complete the Go language AI ecosystem development framework.</p> <p>Most mainstream Agent frameworks (AutoGen, CrewAI, Agno, ADK, etc.) are Python-based, while Go has natural advantages in microservices, concurrency, and deployment. Go also has large-scale applications within Tencent, and there are relatively few Agent frameworks based on Go in the industry. Most are orchestrated workflow frameworks, lacking true \"decentralized, collaborative, emergent\" autonomous multi-Agent capabilities. tRPC-Agent-Go directly leverages Go's high concurrency and tRPC ecosystem to bring LLM reasoning, negotiation, and adaptability to Go scenarios, meeting complex business requirements for both \"intelligence + performance\".</p>"},{"location":"#2-architecture-design","title":"2. Architecture Design","text":"<p>tRPC-Agent-Go adopts a modular architecture design, consisting of multiple core components that are all pluggable. Component communication is decoupled through an event-driven mechanism, supporting callback insertion for custom logic:</p> <ul> <li>Agent: Core execution unit, responsible for processing user input and generating responses</li> <li>Runner: Agent executor, responsible for managing execution flow and connecting Session/Memory Service capabilities</li> <li>Model: Supports multiple LLM models (OpenAI, DeepSeek, etc.)</li> <li>Tool: Provides various tool capabilities (Function, MCP, DuckDuckGo, etc.)</li> <li>Session: Manages user session state and events</li> <li>Memory: Records user long-term memory and personalized information</li> <li>Knowledge: Implements RAG knowledge retrieval capabilities</li> <li>Planner: Provides Agent planning and reasoning capabilities</li> </ul> <p>Below is the architecture diagram of each component:</p> <p></p> <p>Below shows a complete timing diagram of a user and Agent conversation:</p> <p></p>"},{"location":"#3-core-features","title":"3. Core Features","text":"<p>Diverse Agent System</p> <ul> <li>LLMAgent: Based on large language models, supports tool calling and reasoning</li> <li>ChainAgent: Chain execution, supports multi-step task decomposition</li> <li>ParallelAgent: Parallel processing, supports multi-expert collaboration</li> <li>CycleAgent: Iterative loops, supports self-optimization</li> <li>GraphAgent: Graph workflow, compatible with existing orchestration habits</li> </ul> <p>Rich Tool Ecosystem</p> <ul> <li>Built-in common tools</li> <li>Supports multiple extension methods like Function, MCP protocol</li> <li>Flexible tool combination and calling strategies</li> </ul> <p>Intelligent Session Management</p> <ul> <li>Supports Redis and in-memory storage for session persistence</li> <li>Long-term memory and personalized information retention</li> <li>RAG retrieval-augmented generation capabilities</li> <li>Real-time event-driven architecture</li> </ul> <p>End-to-End Observability</p> <ul> <li>OpenTelemetry full-link tracing and performance monitoring</li> <li>Visual debugging interface and real-time monitoring</li> <li>Structured logging and error tracking</li> </ul>"},{"location":"#4-quick-start","title":"4. Quick Start","text":""},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\nfunc main() {\n    // Create model.\n    modelInstance := openai.New(\"deepseek-chat\")\n\n    // Create tool.\n    calculatorTool := function.NewFunctionTool(\n        calculator,\n        function.WithName(\"calculator\"),\n        function.WithDescription(\"Execute addition, subtraction, multiplication, and division. \"+\n            \"Parameters: a, b are numeric values, op takes values add/sub/mul/div; \"+\n            \"returns result as the calculation result.\"),\n    )\n\n    // Enable streaming output.\n    genConfig := model.GenerationConfig{\n        Stream: true,\n    }\n\n    // Create Agent.\n    agent := llmagent.New(\"assistant\",\n        llmagent.WithModel(modelInstance),\n        llmagent.WithTools([]tool.Tool{calculatorTool}),\n        llmagent.WithGenerationConfig(genConfig),\n    )\n\n    // Create Runner.\n    runner := runner.NewRunner(\"calculator-app\", agent)\n\n    // Execute conversation.\n    ctx := context.Background()\n    events, err := runner.Run(ctx,\n        \"user-001\",\n        \"session-001\",\n        model.NewUserMessage(\"Calculate what 2+3 equals\"),\n    )\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Process event stream.\n    for event := range events {\n        if event.Object == \"chat.completion.chunk\" {\n            fmt.Print(event.Choices[0].Delta.Content)\n        }\n    }\n    fmt.Println()\n}\n\nfunc calculator(ctx context.Context, req calculatorReq) (calculatorRsp, error) {\n    var result float64\n    switch req.Op {\n    case \"add\", \"+\":\n        result = req.A + req.B\n    case \"sub\", \"-\":\n        result = req.A - req.B\n    case \"mul\", \"*\":\n        result = req.A * req.B\n    case \"div\", \"/\":\n        result = req.A / req.B\n    }\n    return calculatorRsp{Result: result}, nil\n}\n\ntype calculatorReq struct {\n    A  float64 `json:\"a\"`\n    B  float64 `json:\"b\"`\n    Op string  `json:\"op\"`\n}\n\ntype calculatorRsp struct {\n    Result float64 `json:\"result\"`\n}\n</code></pre>"},{"location":"#multi-agent-collaboration-example","title":"Multi-Agent Collaboration Example","text":"<pre><code>// Create chain Agent.\nchainAgent := chainagent.New(\"problem-solver\",\n    chainagent.WithSubAgents([]agent.Agent{\n        analysisAgent,   // Analysis Agent.\n        executionAgent,  // Execution Agent.\n    }))\n\n// Use Runner to execute.\nrunner := runner.NewRunner(\"multi-agent-app\", chainAgent)\nevents, _ := runner.Run(ctx, userID, sessionID, message)\n</code></pre>"},{"location":"#5-acknowledgments","title":"5. Acknowledgments","text":"<p>Thanks to Tencent internal businesses such as Tencent Yuanbao, Tencent Video, Tencent News, IMA, QQ Music, and other businesses for their support. Business scenario refinement is the best validation for the framework.</p> <p>Thanks to excellent open-source frameworks like ADK, Agno, CrewAI, AutoGen, etc., for their inspiration, providing ideas for tRPC-Agent-Go development.</p>"},{"location":"#6-project-address","title":"6. Project Address","text":"<p>GitHub: tRPC-Agent-Go</p>"},{"location":"agent/","title":"Agent","text":""},{"location":"agent/#agent-user-guide","title":"Agent User Guide","text":"<p><code>Agent</code> is the core execution unit of the tRPC-Agent-Go framework. It handles user input and produces responses. Every <code>Agent</code> implements a unified interface and supports streaming output and callback mechanisms.</p> <p>The framework provides multiple <code>Agent</code> types, including <code>LLMAgent</code>, <code>ChainAgent</code>, <code>ParallelAgent</code>, <code>CycleAgent</code>, and <code>GraphAgent</code>. This document focuses on <code>LLMAgent</code>. For other <code>Agent</code> types and multi-agent systems, see multiagent.</p>"},{"location":"agent/#quick-start","title":"Quick Start","text":"<p>This example uses OpenAI's <code>GPT-4o-mini</code> model. Before you begin, make sure you have an <code>OPENAI_API_KEY</code> and export it via an environment variable:</p> <pre><code>export OPENAI_API_KEY=\"your_api_key\"\n</code></pre> <p>In addition, the framework supports OpenAI-compatible APIs, configurable via environment variables:</p> <pre><code>export OPENAI_BASE_URL=\"your_api_base_url\"\nexport OPENAI_API_KEY=\"your_api_key\"\n</code></pre>"},{"location":"agent/#create-a-model-instance","title":"Create a Model Instance","text":"<p>First, create a model instance using OpenAI's <code>GPT-4o-mini</code>:</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n\nmodelName := flag.String(\"model\", \"gpt-4o-mini\", \"Name of the model to use\")\nflag.Parse()\n// Create an OpenAI model instance.\nmodelInstance := openai.New(*modelName, openai.Options{})\n</code></pre>"},{"location":"agent/#configure-generation-parameters","title":"Configure Generation Parameters","text":"<p>Set generation parameters including max tokens, temperature, and whether to use streaming output:</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/model\"\n\nmaxTokens := 1000\ntemperature := 0.7\ngenConfig := model.GenerationConfig{\n    MaxTokens:   &amp;maxTokens,   // Maximum number of tokens to generate.\n    Temperature: &amp;temperature, // Temperature controls randomness.\n    Stream:      true,         // Enable streaming output.\n}\n</code></pre>"},{"location":"agent/#create-an-llmagent","title":"Create an LLMAgent","text":"<p>Create an <code>LLMAgent</code> with the model instance and configuration. Also set the <code>Agent</code>'s Description and Instruction.</p> <p><code>Description</code> describes the <code>Agent</code>'s basic functionality and characteristics, while <code>Instruction</code> defines the specific guidelines and behavioral rules the <code>Agent</code> should follow during execution.</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n\nllmAgent := llmagent.New(\n    \"demo-agent\",                      // Agent name.\n    llmagent.WithModel(modelInstance), // Set model.\n    llmagent.WithDescription(\"A helpful AI assistant for demonstrations\"),              // Set description.\n    llmagent.WithInstruction(\"Be helpful, concise, and informative in your responses\"), // Set instruction.\n    llmagent.WithGenerationConfig(genConfig),                                           // Set generation params.\n)\n</code></pre>"},{"location":"agent/#create-an-invocation-context","title":"Create an Invocation Context","text":"<p>Create an <code>Invocation</code> object that contains everything required for the execution:</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/agent\"\n\ninvocation := &amp;agent.Invocation{\n    AgentName:     \"demo-agent\",                                                   // Agent name.\n    InvocationID:  \"demo-invocation-001\",                                          // Invocation ID.\n    EndInvocation: false,                                                          // Whether to end invocation.\n    Model:         modelInstance,                                                  // Model used.\n    Message:       model.NewUserMessage(\"Hello! Can you tell me about yourself?\"), // User message.\n    Session:       &amp;session.Session{ID: \"session-001\"},\n}\n</code></pre>"},{"location":"agent/#run-the-agent","title":"Run the Agent","text":"<p>Call the <code>Agent.Run</code> method to start execution:</p> <pre><code>import \"context\"\n\nctx := context.Background()\neventChan, err := llmAgent.Run(ctx, invocation)\nif err != nil {\n    log.Fatalf(\"failed to run Agent: %v\", err)\n}\n</code></pre>"},{"location":"agent/#consume-the-event-stream","title":"Consume the Event Stream","text":"<p>Receive execution results via the event channel:</p> <pre><code>// Handle events.\nfor event := range eventChan {\n    // Check for errors.\n    if event.Error != nil {\n        log.Printf(\"err: %s\", event.Error.Message)\n        continue\n    }\n    // Handle content.\n    if len(event.Choices) &gt; 0 {\n        choice := event.Choices[0]\n        if choice.Delta.Content != \"\" {\n            // Streaming output.\n            fmt.Print(choice.Delta.Content)\n        }\n    }\n    // Check completion.\n    if event.Done {\n        break\n    }\n}\n</code></pre> <p>You can find the complete example at examples/llmagent.</p>"},{"location":"agent/#core-concepts","title":"Core Concepts","text":""},{"location":"agent/#invocation","title":"Invocation","text":"<p><code>Invocation</code> is the context object for the <code>Agent</code> execution flow. It includes all information required for a single run:</p> <pre><code>// Invocation is the context object for the Agent execution flow. It contains all information required for a single run.\ntype Invocation struct {\n    // Agent specifies the Agent instance to invoke.\n    Agent Agent\n    // AgentName identifies the Agent instance to invoke.\n    AgentName string\n    // InvocationID provides a unique identifier for each invocation.\n    InvocationID string\n    // Branch is a branch identifier used for hierarchical event filtering.\n    Branch string\n    // EndInvocation indicates whether to end the invocation.\n    EndInvocation bool\n    // Session maintains the conversational context state.\n    Session *session.Session\n    // Model specifies the model instance to use.\n    Model model.Model\n    // Message is the user content sent to the Agent.\n    Message model.Message\n    // EventCompletionCh signals when events are written to the session.\n    EventCompletionCh &lt;-chan string\n    // RunOptions contains options for the Run method.\n    RunOptions RunOptions\n    // TransferInfo supports control transfer between Agents.\n    TransferInfo *TransferInfo\n    // AgentCallbacks allows injecting custom logic at different stages of Agent execution.\n    AgentCallbacks *AgentCallbacks\n    // ModelCallbacks allows injecting custom logic at different stages of model invocation.\n    ModelCallbacks *model.ModelCallbacks\n    // ToolCallbacks allows injecting custom logic at different stages of tool execution.\n    ToolCallbacks *tool.ToolCallbacks\n}\n</code></pre>"},{"location":"agent/#event","title":"Event","text":"<p><code>Event</code> represents real-time feedback generated during <code>Agent</code> execution. It reports progress through an event stream.</p> <p>Main event types include:</p> <ul> <li>Model conversation events</li> <li>Tool call and response events</li> <li>Agent transfer events</li> <li>Error events</li> </ul> <pre><code>// Event represents real-time feedback generated during Agent execution and reports progress through an event stream.\ntype Event struct {\n    // Response contains model response content, tool call results, and statistics.\n    *model.Response\n    // InvocationID associates the event to a specific invocation.\n    InvocationID string `json:\"invocationId\"`\n    // Author identifies the source of the event, such as Agent or tool.\n    Author string `json:\"author\"`\n    // ID is the unique identifier of the event.\n    ID string `json:\"id\"`\n    // Timestamp records when the event occurred.\n    Timestamp time.Time `json:\"timestamp\"`\n    // Branch is a branch identifier used for hierarchical event filtering.\n    Branch string `json:\"branch,omitempty\"`\n    // RequiresCompletion indicates whether this event requires a completion signal.\n    RequiresCompletion bool `json:\"requiresCompletion,omitempty\"`\n    // CompletionID is used to complete this event.\n    CompletionID string `json:\"completionId,omitempty\"`\n    // LongRunningToolIDs contains IDs of long-running function calls so clients can track them.\n    // Only valid for function-call events.\n    LongRunningToolIDs map[string]struct{} `json:\"longRunningToolIDs,omitempty\"`\n}\n</code></pre> <p>The streaming nature of <code>Event</code> lets you observe the <code>Agent</code>'s work in real time, making the interaction feel natural\u2014like a conversation. Simply iterate over the event stream, check the content and status of each event, and you can fully process the <code>Agent</code>'s execution results.</p>"},{"location":"agent/#agent-interface","title":"Agent Interface","text":"<p>The <code>Agent</code> interface defines the core behaviors that all <code>Agents</code> must implement. It provides a unified way to use different <code>Agent</code> types and supports tool calls and sub-Agent management.</p> <pre><code>type Agent interface {\n    // Run accepts the execution context and invocation information and returns an event channel.\n    // You can receive the Agent's progress and results in real time via this channel.\n    Run(ctx context.Context, invocation *Invocation) (&lt;-chan *event.Event, error)\n    // Tools returns the list of tools accessible to the Agent.\n    Tools() []tool.Tool\n    // Info returns the Agent's basic information, including name and description.\n    Info() Info\n    // SubAgents returns the list of available sub-Agents.\n    // SubAgents and FindSubAgent support cooperation between Agents,\n    // enabling an Agent to delegate tasks to others and build complex multi-agent systems.\n    SubAgents() []Agent\n    // FindSubAgent looks up a sub-Agent by name.\n    FindSubAgent(name string) Agent\n}\n</code></pre>"},{"location":"agent/#callbacks","title":"Callbacks","text":"<p>Callbacks provide hooks at key stages of <code>Agent</code> execution so you can inject custom logic.</p>"},{"location":"agent/#callback-types","title":"Callback Types","text":"<p>The framework provides three kinds of callbacks:</p> <p>Agent Callbacks: Triggered before and after Agent execution</p> <pre><code>type AgentCallbacks struct {\n    BeforeAgent []BeforeAgentCallback  // Callback before Agent runs.\n    AfterAgent  []AfterAgentCallback   // Callback after Agent finishes.\n}\n</code></pre> <p>Model Callbacks: Triggered before and after model invocation</p> <pre><code>type ModelCallbacks struct {\n    BeforeModel []BeforeModelCallback  // Callback before model call.\n    AfterModel  []AfterModelCallback   // Callback after model call.\n}\n</code></pre> <p>Tool Callbacks: Triggered before and after tool invocation</p> <pre><code>type ToolCallbacks struct {\n    BeforeTool []BeforeToolCallback  // Callback before tool call.\n    AfterTool  []AfterToolCallback   // Callback after tool call.\n}\n</code></pre>"},{"location":"agent/#usage-example","title":"Usage Example","text":"<pre><code>// Create Agent callbacks.\ncallbacks := &amp;agent.AgentCallbacks{\n    BeforeAgent: []agent.BeforeAgentCallback{\n        func(ctx context.Context, invocation *agent.Invocation) (*model.Response, error) {\n            log.Printf(\"Agent %s is about to run\", invocation.AgentName)\n            return nil, nil\n        },\n    },\n    AfterAgent: []agent.AfterAgentCallback{\n        func(ctx context.Context, invocation *agent.Invocation, runErr error) (*model.Response, error) {\n            if runErr != nil {\n                log.Printf(\"Agent %s failed: %v\", invocation.AgentName, runErr)\n            } else {\n                log.Printf(\"Agent %s finished successfully\", invocation.AgentName)\n            }\n            return nil, nil\n        },\n    },\n}\n\n// Use callbacks in Invocation.\ninvocation := &amp;agent.Invocation{\n    AgentName:      \"demo-agent\",\n    InvocationID:   \"demo-001\",\n    AgentCallbacks: callbacks,\n    Model:          modelInstance,\n    Message:        model.NewUserMessage(\"User input\"),\n    Session: &amp;session.Session{\n        ID: \"session-001\",\n    },\n}\n</code></pre> <p>Callbacks let you precisely control the <code>Agent</code>'s lifecycle and implement more sophisticated business logic.</p>"},{"location":"agent/#advanced-usage","title":"Advanced Usage","text":"<p>The framework also provides advanced capabilities such as <code>Runner</code>, <code>Session</code>, and <code>Memory</code> for constructing more complex <code>Agent</code> systems.</p> <ul> <li><code>Runner</code> is the <code>Agent</code> executor that orchestrates the <code>Agent</code> execution flow and connects to <code>Session</code> or <code>Memory</code> services.</li> <li><code>Session</code> Service manages conversational state, including history and context.</li> <li><code>Memory</code> Service stores user preference information to enable personalization.</li> </ul> <p>For details, see runner, session, and memory.</p>"},{"location":"event/","title":"Event Usage Documentation","text":"<p><code>Event</code> is the core communication mechanism between <code>Agent</code> and users in tRPC-Agent-Go. It acts like a message envelope, carrying <code>Agent</code> response content, tool call results, error information, and more. Through <code>Event</code>, you can understand <code>Agent</code>'s working status in real-time, handle streaming responses, implement multi-agent collaboration, and track tool execution.</p>"},{"location":"event/#event-overview","title":"Event Overview","text":"<p><code>Event</code> is the carrier for communication between <code>Agent</code> and users.</p> <p>Users obtain event streams through the <code>runner.Run()</code> method, then listen to event channels to process <code>Agent</code> responses.</p>"},{"location":"event/#event-structure","title":"Event Structure","text":"<p><code>Event</code> represents an event between <code>Agent</code> and users, with the following structure definition:</p> <pre><code>type Event struct {\n    // Response is the base response structure of Event, carrying LLM responses.\n    *model.Response\n\n    // InvocationID is the unique identifier for this call.\n    InvocationID string `json:\"invocationId\"`\n\n    // Author is the event initiator.\n    Author string `json:\"author\"`\n\n    // ID is the unique identifier for the event.\n    ID string `json:\"id\"`\n\n    // Timestamp is the event timestamp.\n    Timestamp time.Time `json:\"timestamp\"`\n\n    // Branch is the branch identifier for multi-agent collaboration.\n    Branch string `json:\"branch,omitempty\"`\n\n    // RequiresCompletion indicates whether this event requires a completion signal.\n    RequiresCompletion bool `json:\"requiresCompletion,omitempty\"`\n\n    // CompletionID is used for the completion signal of this event.\n    CompletionID string `json:\"completionId,omitempty\"`\n\n    // LongRunningToolIDs is a collection of IDs for long-running function calls.\n    // Agent clients will understand which function calls are long-running from this field.\n    // Only valid for function call events.\n    LongRunningToolIDs map[string]struct{} `json:\"longRunningToolIDs,omitempty\"`\n}\n</code></pre> <p><code>model.Response</code> is the base response structure of <code>Event</code>, carrying LLM responses, tool calls, errors, and other information. It is defined as follows:</p> <pre><code>type Response struct {\n    // Response unique identifier.\n    ID string `json:\"id\"`\n\n    // Object type (such as \"chat.completion\", \"error\", etc.), helping clients identify processing methods.\n    Object string `json:\"object\"`\n\n    // Creation timestamp.\n    Created int64 `json:\"created\"`\n\n    // Model name used.\n    Model string `json:\"model\"`\n\n    // Response choices, LLM may generate multiple candidate responses for user selection, default is only 1.\n    Choices []Choice `json:\"choices\"`\n\n    // Usage statistics, recording token usage.\n    Usage *Usage `json:\"usage,omitempty\"`\n\n    // System fingerprint.\n    SystemFingerprint *string `json:\"system_fingerprint,omitempty\"`\n\n    // Error information.\n    Error *ResponseError `json:\"error,omitempty\"`\n\n    // Timestamp.\n    Timestamp time.Time `json:\"timestamp\"`\n\n    // Indicates whether the entire conversation is complete.\n    Done bool `json:\"done\"`\n\n    // Whether it's a partial response.\n    IsPartial bool `json:\"is_partial\"`\n}\n\ntype Choice struct {\n    // Choice index.\n    Index int `json:\"index\"`\n\n    // Complete message, containing the entire response.\n    Message Message `json:\"message,omitempty\"`\n\n    // Incremental message, used for streaming responses, only containing new content of the current chunk.\n    // For example: complete response \"Hello, how can I help you?\" in streaming response:\n    // First event: Delta.Content = \"Hello\"\n    // Second event: Delta.Content = \", how\"  \n    // Third event: Delta.Content = \" can I help you?\"\n    Delta Message `json:\"delta,omitempty\"`\n\n    // Completion reason.\n    FinishReason *string `json:\"finish_reason,omitempty\"`\n}\n\ntype Message struct {\n    // Role of the message initiator, such as \"system\", \"user\", \"assistant\", \"tool\".\n    Role string `json:\"role\"`\n\n    // Message content.\n    Content string `json:\"content\"`\n\n    // Content parts for multimodal messages.\n    ContentParts []ContentPart `json:\"content_parts,omitempty\"`\n\n    // ID of the tool used by the tool response.\n    ToolID string `json:\"tool_id,omitempty\"`\n\n    // Name of the tool used by the tool response.\n    ToolName string `json:\"tool_name,omitempty\"`\n\n    // Optional tool calls.\n    ToolCalls []ToolCall `json:\"tool_calls,omitempty\"`\n}\n\ntype Usage struct {\n    // Number of tokens used in prompts.\n    PromptTokens int `json:\"prompt_tokens\"`\n\n    // Number of tokens used in completion.\n    CompletionTokens int `json:\"completion_tokens\"`\n\n    // Total number of tokens used in the response.\n    TotalTokens int `json:\"total_tokens\"`\n}\n</code></pre>"},{"location":"event/#event-types","title":"Event Types","text":"<p><code>Event</code> is created and sent in the following scenarios:</p> <ol> <li>User message events: Automatically created when users send messages</li> <li><code>Agent</code> response events: Created when <code>Agent</code> generates responses</li> <li>Streaming response events: Created for each response chunk in streaming mode</li> <li>Tool call events: Created when <code>Agent</code> calls tools</li> <li>Error events: Created when errors occur</li> <li><code>Agent</code> transfer events: Created when <code>Agent</code> transfers to other agents</li> <li>Completion events: Created when Agent execution completes</li> </ol> <p>Based on the <code>model.Response.Object</code> field, <code>Event</code> can be divided into the following types:</p> <pre><code>const (\n    // Error events.\n    ObjectTypeError = \"error\"\n\n    // Tool response events.\n    ObjectTypeToolResponse = \"tool.response\"\n\n    // Preprocessing events.\n    ObjectTypePreprocessingBasic = \"preprocessing.basic\"\n    ObjectTypePreprocessingContent = \"preprocessing.content\"\n    ObjectTypePreprocessingIdentity = \"preprocessing.identity\"\n    ObjectTypePreprocessingInstruction = \"preprocessing.instruction\"\n    ObjectTypePreprocessingPlanning = \"preprocessing.planning\"\n\n    // Postprocessing events.\n    ObjectTypePostprocessingPlanning = \"postprocessing.planning\"\n    ObjectTypePostprocessingCodeExecution = \"postprocessing.code_execution\"\n\n    // Agent transfer events.\n    ObjectTypeTransfer = \"agent.transfer\"\n\n    // Runner completion events.\n    ObjectTypeRunnerCompletion = \"runner.completion\"\n)\n</code></pre>"},{"location":"event/#event-creation","title":"Event Creation","text":"<p>When developing custom <code>Agent</code> types or <code>Processor</code>, you need to create <code>Event</code>.</p> <p><code>Event</code> provides three creation methods, suitable for different scenarios.</p> <pre><code>// Create new event.\nfunc New(invocationID, author string, opts ...Option) *Event\n\n// Create error event.\nfunc NewErrorEvent(invocationID, author, errorType, errorMessage string) *Event\n\n// Create event from response.\nfunc NewResponseEvent(invocationID, author string, response *model.Response) *Event\n</code></pre> <p>Parameter description:</p> <ul> <li><code>invocationID string</code>: Call unique identifier</li> <li><code>author string</code>: Event initiator</li> <li><code>opts ...Option</code>: Optional configuration options (only for <code>New</code> method)</li> <li><code>errorType string</code>: Error type (only for <code>NewErrorEvent</code> method)</li> <li><code>errorMessage string</code>: Error message (only for <code>NewErrorEvent</code> method)</li> <li><code>response *model.Response</code>: Response object (only for <code>NewResponseEvent</code> method)</li> </ul> <p>The framework supports the following <code>Option</code> for configuring <code>Event</code>:</p> <ul> <li><code>WithBranch(branch string)</code>: Set the branch identifier for the event</li> <li><code>WithResponse(response *model.Response)</code>: Set the response content for the event</li> <li><code>WithObject(o string)</code>: Set the type for the event</li> </ul> <p>Examples: <pre><code>// Create basic event.\nevt := event.New(\"invoke-123\", \"agent\")\n\n// Create event with branch.\nevt := event.New(\"invoke-123\", \"agent\", event.WithBranch(\"main\"))\n\n// Create error event.\nevt := event.NewErrorEvent(\"invoke-123\", \"agent\", \"api_error\", \"Request timeout\")\n\n// Create event from response.\nresponse := &amp;model.Response{\n    Object: \"chat.completion\",\n    Done:   true,\n    Choices: []model.Choice{{Message: model.Message{Role: \"assistant\", Content: \"Hello!\"}}},\n}\nevt := event.NewResponseEvent(\"invoke-123\", \"agent\", response)\n</code></pre></p>"},{"location":"event/#event-methods","title":"Event Methods","text":"<p><code>Event</code> provides the <code>Clone</code> method for creating deep copies of <code>Event</code>.</p> <pre><code>func (e *Event) Clone() *Event\n</code></pre>"},{"location":"event/#event-usage-examples","title":"Event Usage Examples","text":"<p>This example demonstrates how to use <code>Event</code> in practical applications to handle <code>Agent</code> streaming responses, tool calls, and error handling.</p>"},{"location":"event/#core-process","title":"Core Process","text":"<ol> <li>Send user message: Start <code>Agent</code> processing through <code>runner.Run()</code></li> <li>Receive event stream: Process events returned by <code>Agent</code> in real-time</li> <li>Handle different event types: Distinguish streaming content, tool calls, errors, etc.</li> <li>Visualize output: Provide user-friendly interactive experience</li> </ol>"},{"location":"event/#code-examples","title":"Code Examples","text":"<pre><code>// processMessage handles single message interaction.\nfunc (c *multiTurnChat) processMessage(ctx context.Context, userMessage string) error {\n    message := model.NewUserMessage(userMessage)\n\n    // Run agent through runner.\neventChan, err := c.runner.Run(ctx, c.userID, c.sessionID, message)\nif err != nil {\n    return fmt.Errorf(\"failed to run agent: %w\", err)\n}\n\n// Process response.\nreturn c.processResponse(eventChan)\n}\n\n// processResponse handles response, including streaming response and tool call visualization.\nfunc (c *multiTurnChat) processResponse(eventChan &lt;-chan *event.Event) error {\n    fmt.Print(\"\ud83e\udd16 Assistant: \")\n\n    var (\n        fullContent       string        // Accumulated complete content.\n        toolCallsDetected bool          // Whether tool calls are detected.\n        assistantStarted  bool          // Whether Assistant has started replying.\n    )\n\n    for event := range eventChan {\n        // Handle single event.\nif err := c.handleEvent(event, &amp;toolCallsDetected, &amp;assistantStarted, &amp;fullContent); err != nil {\n    return err\n}\n\n// Check if it's the final event.\nif event.Done &amp;&amp; !c.isToolEvent(event) {\n    fmt.Printf(\"\\n\")\n    break\n}\n    }\n\n    return nil\n}\n\n// handleEvent handles single event.\nfunc (c *multiTurnChat) handleEvent(\n    event *event.Event,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n    fullContent *string,\n) error {\n    // 1. Handle error events.\nif event.Error != nil {\n    fmt.Printf(\"\\n\u274c Error: %s\\n\", event.Error.Message)\n    return nil\n}\n\n// 2. Handle tool calls.\nif c.handleToolCalls(event, toolCallsDetected, assistantStarted) {\n    return nil\n}\n\n// 3. Handle tool responses.\nif c.handleToolResponses(event) {\n    return nil\n}\n\n// 4. Handle content.\nc.handleContent(event, toolCallsDetected, assistantStarted, fullContent)\n\n    return nil\n}\n\n// handleToolCalls detects and displays tool calls.\nfunc (c *multiTurnChat) handleToolCalls(\n    event *event.Event,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n) bool {\n    if len(event.Choices) &gt; 0 &amp;&amp; len(event.Choices[0].Message.ToolCalls) &gt; 0 {\n        *toolCallsDetected = true\n        if *assistantStarted {\n            fmt.Printf(\"\\n\")\n        }\n        fmt.Printf(\"\ud83d\udd27 Tool calls initiated:\\n\")\n        for _, toolCall := range event.Choices[0].Message.ToolCalls {\n            fmt.Printf(\"   \u2022 %s (ID: %s)\\n\", toolCall.Function.Name, toolCall.ID)\n            if len(toolCall.Function.Arguments) &gt; 0 {\n                fmt.Printf(\"     Args: %s\\n\", string(toolCall.Function.Arguments))\n            }\n        }\n        fmt.Printf(\"\\n\ud83d\udd04 Executing tools...\\n\")\n        return true\n    }\n    return false\n}\n\n// handleToolResponses detects and displays tool responses.\nfunc (c *multiTurnChat) handleToolResponses(event *event.Event) bool {\n    if event.Response != nil &amp;&amp; len(event.Response.Choices) &gt; 0 {\n        for _, choice := range event.Response.Choices {\n            if choice.Message.Role == model.RoleTool &amp;&amp; choice.Message.ToolID != \"\" {\n                fmt.Printf(\"\u2705 Tool response (ID: %s): %s\\n\",\n                    choice.Message.ToolID,\n                    strings.TrimSpace(choice.Message.Content))\n                return true\n            }\n        }\n    }\n    return false\n}\n\n// handleContent processes and displays content.\nfunc (c *multiTurnChat) handleContent(\n    event *event.Event,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n    fullContent *string,\n) {\n    if len(event.Choices) &gt; 0 {\n        choice := event.Choices[0]\n        content := c.extractContent(choice)\n\n        if content != \"\" {\n            c.displayContent(content, toolCallsDetected, assistantStarted, fullContent)\n        }\n    }\n}\n\n// extractContent extracts content based on streaming mode.\nfunc (c *multiTurnChat) extractContent(choice model.Choice) string {\n    if c.streaming {\n        // Streaming mode: use incremental content.\nreturn choice.Delta.Content\n}\n// Non-streaming mode: use complete message content.\nreturn choice.Message.Content\n}\n\n// displayContent prints content to console.\nfunc (c *multiTurnChat) displayContent(\n    content string,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n    fullContent *string,\n) {\n    if !*assistantStarted {\n        if *toolCallsDetected {\n            fmt.Printf(\"\\n\ud83e\udd16 Assistant: \")\n        }\n        *assistantStarted = true\n    }\n    fmt.Print(content)\n    *fullContent += content\n}\n\n// isToolEvent checks if the event is a tool response.\nfunc (c *multiTurnChat) isToolEvent(event *event.Event) bool {\n    if event.Response == nil {\n        return false\n    }\n\n    // Check if there are tool calls.\nif len(event.Choices) &gt; 0 &amp;&amp; len(event.Choices[0].Message.ToolCalls) &gt; 0 {\n    return true\n}\n\n// Check if there's a tool ID.\nif len(event.Choices) &gt; 0 &amp;&amp; event.Choices[0].Message.ToolID != \"\" {\n    return true\n}\n\n// Check if it's a tool role.\nfor _, choice := range event.Response.Choices {\n    if choice.Message.Role == model.RoleTool {\n        return true\n    }\n}\n\n    return false\n}\n</code></pre>"},{"location":"planner/","title":"Planner","text":""},{"location":"planner/#planner-user-guide","title":"Planner User Guide","text":"<p><code>Planner</code> is the component that enables planning capabilities for an <code>Agent</code>. It allows an <code>Agent</code> to formulate a plan before executing tasks, improving both efficiency and accuracy.</p> <p>The framework provides two <code>Planner</code> implementations for different model types:</p> <ul> <li><code>BuiltinPlanner</code>: for models that natively support internal reasoning/thinking</li> <li><code>ReActPlanner</code>: for models without native thinking, guiding them to output in a tagged, structured format</li> </ul>"},{"location":"planner/#planner-interface","title":"Planner Interface","text":"<p>The <code>Planner</code> interface defines the methods that all planners must implement:</p> <pre><code>type Planner interface {\n    // BuildPlanningInstruction applies necessary configuration to the LLM request\n    // and returns the system instruction to attach for planning.\n    // Return an empty string if no instruction is needed.\n    BuildPlanningInstruction(\n        ctx context.Context,\n        invocation *agent.Invocation,\n        llmRequest *model.Request,\n    ) string\n\n    // ProcessPlanningResponse processes the LLM planning response and returns the processed response.\n    // Return nil if no processing is needed.\n    ProcessPlanningResponse(\n        ctx context.Context,\n        invocation *agent.Invocation,\n        response *model.Response,\n    ) *model.Response\n}\n</code></pre> <p>Planner workflow:</p> <ol> <li>Request phase: before sending the LLM request, <code>BuildPlanningInstruction</code> adds planning instructions or applies configuration</li> <li>Response phase: <code>ProcessPlanningResponse</code> organizes the LLM response content and structure</li> </ol>"},{"location":"planner/#builtinplanner","title":"BuiltinPlanner","text":"<p><code>BuiltinPlanner</code> targets models that support native thinking. It does not generate explicit planning instructions. Instead, it configures the model to leverage its internal reasoning mechanism to achieve planning.</p> <p>Model configuration:</p> <pre><code>type Options struct {\n    // ReasoningEffort constrains the reasoning intensity of reasoning-enabled models.\n    // Supported values: \"low\", \"medium\", \"high\".\n    // Only effective for OpenAI o-series models.\n    ReasoningEffort *string\n    // ThinkingEnabled enables thinking mode for models that support it.\n    // Only effective for Claude and Gemini models via OpenAI-compatible API.\n    ThinkingEnabled *bool\n    // ThinkingTokens controls the length of the thinking process.\n    // Only effective for Claude and Gemini models via OpenAI-compatible API.\n    ThinkingTokens *int\n}\n</code></pre> <p>Implementation details:</p> <ul> <li><code>BuildPlanningInstruction</code>: applies thinking parameters to the LLM request. Since the model supports native reasoning, no planning tags are needed, so return an empty string</li> <li><code>ProcessPlanningResponse</code>: returns nil because the model's response already includes its planning process</li> </ul> <p>Example:</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/planner/builtin\"\n)\n\n// Create model instance.\nmodelInstance := openai.New(\"gpt-4o-mini\")\n\n// Create BuiltinPlanner.\nreasoningEffort := \"high\"\nplanner := builtin.New(builtin.Options{\n    ReasoningEffort: &amp;reasoningEffort,\n})\n\n// Create LLMAgent and configure the Planner.\nllmAgent := llmagent.New(\n    \"demo-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"A helpful AI assistant with built-in planning\"),\n    llmagent.WithInstruction(\"Be helpful and think through problems carefully\"),\n    llmagent.WithPlanner(planner), // Configure Planner.\n)\n</code></pre>"},{"location":"planner/#reactplanner","title":"ReActPlanner","text":"<p><code>ReActPlanner</code> targets models that do not support native thinking. It guides the LLM to follow a specific, tagged format to structure planning, reasoning, actions, and the final answer, thereby achieving a structured thinking process.</p> <p>ReActPlanner uses the following tags to organize response content:</p> <ol> <li>Planning phase (<code>/*PLANNING*/</code>): create a clear plan to answer the user's question</li> <li>Reasoning phase (<code>/*REASONING*/</code>): provide reasoning between tool executions</li> <li>Action phase (<code>/*ACTION*/</code>): execute tools based on the plan</li> <li>Re-planning (<code>/*REPLANNING*/</code>): revise the plan based on results when needed</li> <li>Final answer (<code>/*FINAL_ANSWER*/</code>): provide the synthesized answer</li> </ol> <p>Implementation details:</p> <ul> <li><code>BuildPlanningInstruction</code>: returns comprehensive instructions containing high-level guidance, planning requirements, and reasoning requirements, prompting the model to output in the tagged format</li> <li><code>ProcessPlanningResponse</code>: filters out tool calls with empty names; if the content contains the <code>/*FINAL_ANSWER*/</code> tag, keep only the final answer section; otherwise, return the original content, separating planning content from the final answer</li> </ul> <p>Usage example:</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/planner/react\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\n// Create model instance.\nmodelInstance := openai.New(\"gpt-4o-mini\")\n\n// Create tool.\nsearchTool := function.NewFunctionTool(\n    searchFunction,\n    function.WithName(\"search\"),\n    function.WithDescription(\"Search for information on a given topic\"),\n)\n\n// Create ReActPlanner.\nplanner := react.New()\n\n// Create LLMAgent and configure the Planner.\nllmAgent := llmagent.New(\n    \"react-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"An AI assistant that uses structured planning\"),\n    llmagent.WithInstruction(\"Follow a structured approach to solve problems\"),\n    llmagent.WithPlanner(planner), // Configure Planner.\n    llmagent.WithTools([]tool.Tool{searchTool}), // Configure tools.\n)\n</code></pre> <p>See the full example at examples/react.</p>"},{"location":"planner/#custom-planner","title":"Custom Planner","text":"<p>Besides the two built-in <code>Planner</code> implementations, you can implement the <code>Planner</code> interface to create a custom <code>Planner</code> for specific needs:</p> <pre><code>type customPlanner struct {\n    // Custom configuration.\n}\n\nfunc (p *customPlanner) BuildPlanningInstruction(\n    ctx context.Context,\n    invocation *agent.Invocation,\n    llmRequest *model.Request,\n) string {\n    // Return your custom planning instruction.\n    return \"your custom planning instruction\"\n}\n\nfunc (p *customPlanner) ProcessPlanningResponse(\n    ctx context.Context,\n    invocation *agent.Invocation,\n    response *model.Response,\n) *model.Response {\n    // Process the response.\n    return response\n}\n\n// Create LLMAgent and configure the custom Planner.\nllmAgent := llmagent.New(\n    \"react-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"An AI assistant that uses structured planning\"),\n    llmagent.WithInstruction(\"Follow a structured approach to solve problems\"),\n    llmagent.WithPlanner(&amp;customPlanner{}),      // Configure Planner.\n    llmagent.WithTools([]tool.Tool{searchTool}), // Configure tools.\n)\n</code></pre>"},{"location":"zh/","title":"tRPC-Agent-Go\uff1a\u8ba9 Go \u5f00\u53d1\u8005\u8f7b\u677e\u6784\u5efa\u667a\u80fd AI \u5e94\u7528","text":""},{"location":"zh/#1","title":"1\u3001\u9879\u76ee\u7b80\u4ecb","text":"<p>tRPC \u56e2\u961f\u4e4b\u524d\u5f00\u6e90\u4e86 A2A \u5f00\u53d1\u6846\u67b6 tRPC-A2A-Go \u548c MCP \u5f00\u53d1\u6846\u67b6 tRPC-MCP-Go\uff0c\u5c24\u5176\u662f tRPC-A2A-Go\uff0c\u5728\u56fd\u5185\u5916\u90fd\u6709\u4e0d\u5c11\u7528\u6237\u8fdb\u884c\u5e94\u7528\u548c\u8d21\u732e\u3002 \u73b0\u5728\u6211\u4eec\u63a8\u51fa tRPC-Agent-Go \u5f00\u53d1\u6846\u67b6\uff0c\u5b9e\u73b0 Go \u8bed\u8a00 AI \u751f\u6001\u5f00\u53d1\u6846\u67b6\u7684\u95ed\u73af\u3002</p> <p>\u5f53\u524d\u4e3b\u6d41 Agent \u6846\u67b6\uff08AutoGen\u3001CrewAI \u3001Agno\u3001ADK \u7b49\uff09\u5927\u90e8\u5206\u90fd\u662f\u57fa\u4e8e Python\uff0c\u800c  Go \u5728\u5fae\u670d\u52a1\u3001\u5e76\u53d1\u4e0e\u90e8\u7f72\u65b9\u9762\u6709\u5929\u7136\u4f18\u52bf\uff0cGo \u5728\u817e\u8baf\u5185\u90e8\u4e5f\u6709\u5927\u89c4\u6a21\u5e94\u7528\uff0c\u4e1a\u754c\u57fa\u4e8e Go \u8bed\u8a00\u7684 Agent \u6846\u67b6\u8f83\u5c11\uff0c\u5927\u90e8\u5206\u90fd\u662f\u7f16\u6392\u5f0f\u7684 workflow \u6846\u67b6\uff0c\u7f3a\u5c11\u771f\u6b63\u7684\u201c\u53bb\u4e2d\u5fc3\u5316\u3001\u53ef\u534f\u4f5c\u3001\u80fd\u6d8c\u73b0\u201d\u7684\u81ea\u4e3b\u591a Agent \u80fd\u529b\u3002tRPC-Agent-Go \u76f4\u63a5\u5229\u7528 Go \u7684\u9ad8\u5e76\u53d1\u4e0e tRPC \u751f\u6001\uff0c\u628a LLM \u7684\u63a8\u7406\u3001\u534f\u5546\u548c\u81ea\u9002\u5e94\u6027\u5e26\u5230 Go \u573a\u666f\uff0c\u6ee1\u8db3\u590d\u6742\u4e1a\u52a1\u5bf9\u201c\u667a\u80fd+\u6027\u80fd\u201d\u7684\u53cc\u91cd\u9700\u6c42\u3002</p>"},{"location":"zh/#2","title":"2\u3001\u67b6\u6784\u8bbe\u8ba1","text":"<p>tRPC-Agent-Go \u91c7\u7528\u6a21\u5757\u5316\u67b6\u6784\u8bbe\u8ba1\uff0c\u7531\u591a\u4e2a\u6838\u5fc3\u7ec4\u4ef6\u7ec4\u6210\uff0c\u7ec4\u4ef6\u90fd\u53ef\u63d2\u62d4\uff0c\u901a\u8fc7\u4e8b\u4ef6\u9a71\u52a8\u673a\u5236\u5b9e\u73b0\u7ec4\u4ef6\u95f4\u7684\u89e3\u8026\u901a\u4fe1\uff0c\u652f\u6301callback\u63d2\u5165\u81ea\u5b9a\u4e49\u903b\u8f91\uff1a</p> <ul> <li>Agent: \u6838\u5fc3\u6267\u884c\u5355\u5143\uff0c\u8d1f\u8d23\u5904\u7406\u7528\u6237\u8f93\u5165\u5e76\u751f\u6210\u54cd\u5e94</li> <li>Runner: Agent \u7684\u6267\u884c\u5668\uff0c\u8d1f\u8d23\u7ba1\u7406\u6267\u884c\u6d41\u7a0b\uff0c\u4e32\u8054 Session/Memory Service \u7b49\u80fd\u529b</li> <li>Model: \u652f\u6301\u591a\u79cd LLM \u6a21\u578b\uff08OpenAI\u3001DeepSeek \u7b49\uff09</li> <li>Tool: \u63d0\u4f9b\u5404\u79cd\u5de5\u5177\u80fd\u529b\uff08Function\u3001MCP\u3001DuckDuckGo \u7b49\uff09</li> <li>Session: \u7ba1\u7406\u7528\u6237\u4f1a\u8bdd\u72b6\u6001\u548c\u4e8b\u4ef6</li> <li>Memory: \u8bb0\u5f55\u7528\u6237\u7684\u957f\u671f\u8bb0\u5fc6\u548c\u4e2a\u6027\u5316\u4fe1\u606f</li> <li>Knowledge: \u5b9e\u73b0 RAG \u77e5\u8bc6\u68c0\u7d22\u80fd\u529b</li> <li>Planner: \u63d0\u4f9b Agent \u7684\u8ba1\u5212\u548c\u63a8\u7406\u80fd\u529b</li> </ul> <p>\u4ee5\u4e0b\u662f\u5404\u4e2a\u7ec4\u4ef6\u7684\u67b6\u6784\u56fe</p> <p></p> <p>\u4e0b\u9762\u5c55\u793a\u4e00\u4e2a\u5b8c\u6574\u7684\u7528\u6237\u548c Agent \u5bf9\u8bdd\u7684\u5b8c\u6574\u65f6\u5e8f\u56fe</p> <p></p>"},{"location":"zh/#3","title":"3\u3001\u6838\u5fc3\u7279\u70b9","text":"<p>\u591a\u6837\u5316 Agent \u7cfb\u7edf</p> <ul> <li>LLMAgent: \u57fa\u4e8e\u5927\u8bed\u8a00\u6a21\u578b\uff0c\u652f\u6301\u5de5\u5177\u8c03\u7528\u548c\u63a8\u7406</li> <li>ChainAgent: \u94fe\u5f0f\u6267\u884c\uff0c\u652f\u6301\u591a\u6b65\u9aa4\u4efb\u52a1\u5206\u89e3</li> <li>ParallelAgent: \u5e76\u884c\u5904\u7406\uff0c\u652f\u6301\u591a\u4e13\u5bb6\u534f\u4f5c</li> <li>CycleAgent: \u5faa\u73af\u8fed\u4ee3\uff0c\u652f\u6301\u81ea\u6211\u4f18\u5316</li> <li>GraphAgent: \u56fe\u5de5\u4f5c\u6d41\uff0c\u517c\u5bb9\u73b0\u6709\u7f16\u6392\u4e60\u60ef</li> </ul> <p>\u4e30\u5bcc\u5de5\u5177\u751f\u6001</p> <ul> <li>\u5185\u7f6e\u5e38\u7528\u5de5\u5177</li> <li>\u652f\u6301 Function\u3001MCP \u534f\u8bae\u7b49\u591a\u79cd\u6269\u5c55\u65b9\u5f0f</li> <li>\u7075\u6d3b\u7684\u5de5\u5177\u7ec4\u5408\u548c\u8c03\u7528\u7b56\u7565</li> </ul> <p>\u667a\u80fd\u4f1a\u8bdd\u7ba1\u7406</p> <ul> <li>\u652f\u6301 Redis \u548c\u5185\u5b58\u5b58\u50a8\u7684\u4f1a\u8bdd\u6301\u4e45\u5316</li> <li>\u957f\u671f\u8bb0\u5fc6\u548c\u4e2a\u6027\u5316\u4fe1\u606f\u4fdd\u6301</li> <li>RAG \u68c0\u7d22\u589e\u5f3a\u751f\u6210\u80fd\u529b</li> <li>\u5b9e\u65f6\u4e8b\u4ef6\u9a71\u52a8\u67b6\u6784</li> </ul> <p>\u5168\u94fe\u8def\u53ef\u89c2\u6d4b\u6027</p> <ul> <li>OpenTelemetry \u5168\u94fe\u8def\u8ffd\u8e2a\u548c\u6027\u80fd\u76d1\u63a7</li> <li>\u53ef\u89c6\u5316\u8c03\u8bd5\u754c\u9762\u548c\u5b9e\u65f6\u76d1\u63a7</li> <li>\u7ed3\u6784\u5316\u65e5\u5fd7\u548c\u9519\u8bef\u8ffd\u8e2a</li> </ul>"},{"location":"zh/#4","title":"4\u3001\u5feb\u901f\u5f00\u59cb","text":""},{"location":"zh/#_1","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\nfunc main() {\n    // \u521b\u5efa\u6a21\u578b\n    modelInstance := openai.New(\"deepseek-chat\")\n\n    // \u521b\u5efa\u5de5\u5177\n    calculatorTool := function.NewFunctionTool(\n        calculator,\n        function.WithName(\"calculator\"),\n        function.WithDescription(\"\u6267\u884c\u52a0\u51cf\u4e58\u9664\u3002\u53c2\u6570\uff1aa\u3001b \u4e3a\u6570\u503c\uff0cop \u53d6\u503c add/sub/mul/div\uff1b\u8fd4\u56de result \u4e3a\u8ba1\u7b97\u7ed3\u679c\u3002\"),\n    )\n\n    // \u542f\u7528\u6d41\u5f0f\u8f93\u51fa\n    genConfig := model.GenerationConfig{\n        Stream: true,\n    }\n\n    // \u521b\u5efa Agent\n    agent := llmagent.New(\"assistant\",\n        llmagent.WithModel(modelInstance),\n        llmagent.WithTools([]tool.Tool{calculatorTool}),\n        llmagent.WithGenerationConfig(genConfig),\n    )\n\n    // \u521b\u5efa Runner\n    runner := runner.NewRunner(\"calculator-app\", agent)\n\n    // \u6267\u884c\u5bf9\u8bdd\n    ctx := context.Background()\n    events, err := runner.Run(ctx,\n        \"user-001\",\n        \"session-001\",\n        model.NewUserMessage(\"\u8ba1\u7b97 2+3 \u7b49\u4e8e\u591a\u5c11\"),\n    )\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // \u5904\u7406\u4e8b\u4ef6\u6d41\n    for event := range events {\n        if event.Object == \"chat.completion.chunk\" {\n            fmt.Print(event.Choices[0].Delta.Content)\n        }\n    }\n    fmt.Println()\n}\n\nfunc calculator(ctx context.Context, req calculatorReq) (calculatorRsp, error) {\n    var result float64\n    switch req.Op {\n    case \"add\", \"+\":\n        result = req.A + req.B\n    case \"sub\", \"-\":\n        result = req.A - req.B\n    case \"mul\", \"*\":\n        result = req.A * req.B\n    case \"div\", \"/\":\n        result = req.A / req.B\n    }\n    return calculatorRsp{Result: result}, nil\n}\n\ntype calculatorReq struct {\n    A  float64 `json:\"a\"`\n    B  float64 `json:\"b\"`\n    Op string  `json:\"op\"`\n}\n\ntype calculatorRsp struct {\n    Result float64 `json:\"result\"`\n}\n</code></pre>"},{"location":"zh/#agent","title":"\u591a Agent \u534f\u52a9\u4f8b\u5b50","text":"<pre><code>// \u521b\u5efa\u94fe\u5f0f Agent\nchainAgent := chainagent.New(\"problem-solver\",\n    chainagent.WithSubAgents([]agent.Agent{\n        analysisAgent,   // \u5206\u6790 Agent\n        executionAgent,  // \u6267\u884c Agent\n    }))\n\n// \u4f7f\u7528 Runner \u6267\u884c\nrunner := runner.NewRunner(\"multi-agent-app\", chainAgent)\nevents, _ := runner.Run(ctx, userID, sessionID, message)\n</code></pre>"},{"location":"zh/#5","title":"5\u3001\u81f4\u8c22","text":"<p>\u611f\u8c22\u817e\u8baf\u5185\u90e8\u4e1a\u52a1\u5982\u817e\u8baf\u5143\u5b9d\uff0c\u817e\u8baf\u89c6\u9891\uff0c\u817e\u8baf\u65b0\u95fb\uff0cIMA\u3001QQ \u97f3\u4e50\u7b49\u7b49\u4e1a\u52a1\u7684\u652f\u6301\uff0c\u4e1a\u52a1\u7684\u573a\u666f\u6253\u78e8\u662f\u5bf9\u6846\u67b6\u6700\u597d\u7684\u9a8c\u8bc1\u3002</p> <p>\u611f\u8c22 ADK\uff0cAgno\uff0cCrewAI\uff0cAutoGen \u7b49\u4f18\u79c0\u5f00\u6e90\u6846\u67b6\u7684\u542f\u53d1\uff0c\u4e3a tRPC-Agent-Go \u5f00\u53d1\u63d0\u4f9b\u7075\u611f\u3002</p>"},{"location":"zh/#6","title":"6\u3001\u9879\u76ee\u5730\u5740","text":"<p>github\uff1atRPC-Agent-Go</p>"},{"location":"zh/agent/","title":"Agent \u4f7f\u7528\u6587\u6863","text":"<p><code>Agent</code> \u662f tRPC-Agent-Go \u6846\u67b6\u7684\u6838\u5fc3\u6267\u884c\u5355\u5143\uff0c\u8d1f\u8d23\u5904\u7406\u7528\u6237\u8f93\u5165\u5e76\u751f\u6210\u76f8\u5e94\u7684\u54cd\u5e94\u3002\u6bcf\u4e2a <code>Agent</code> \u90fd\u5b9e\u73b0\u4e86\u7edf\u4e00\u7684\u63a5\u53e3\uff0c\u652f\u6301\u6d41\u5f0f\u8f93\u51fa\u548c\u56de\u8c03\u673a\u5236\u3002</p> <p>\u6846\u67b6\u63d0\u4f9b\u4e86\u591a\u79cd\u7c7b\u578b\u7684 <code>Agent</code>\uff0c\u5305\u62ec <code>LLMAgent</code>\u3001<code>ChainAgent</code>\u3001<code>ParallelAgent</code>\u3001<code>CycleAgent</code> \u548c <code>GraphAgent</code>\u3002\u672c\u6587\u91cd\u70b9\u4ecb\u7ecd <code>LLMAgent</code>\uff0c\u5176\u4ed6 <code>Agent</code> \u7c7b\u578b\u4ee5\u53ca\u591a <code>Agent</code> \u7cfb\u7edf\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u8003 multiagent\u3002</p>"},{"location":"zh/agent/#_1","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>\u672c\u793a\u4f8b\u4f7f\u7528 OpenAI \u7684 GPT-4o-mini \u6a21\u578b\u3002\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u51c6\u5907\u597d\u76f8\u5e94\u7684 <code>OPENAI_API_KEY</code> \u5e76\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u5bfc\u51fa\uff1a</p> <pre><code>export OPENAI_API_KEY=\"your_api_key\"\n</code></pre> <p>\u6b64\u5916\uff0c\u6846\u67b6\u8fd8\u652f\u6301\u517c\u5bb9 OpenAI API \u7684\u6a21\u578b\uff0c\u53ef\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8fdb\u884c\u914d\u7f6e\uff1a</p> <pre><code>export OPENAI_BASE_URL=\"your_api_base_url\"\nexport OPENAI_API_KEY=\"your_api_key\"\n</code></pre>"},{"location":"zh/agent/#_2","title":"\u521b\u5efa\u6a21\u578b\u5b9e\u4f8b","text":"<p>\u9996\u5148\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u6a21\u578b\u5b9e\u4f8b\uff0c\u8fd9\u91cc\u4f7f\u7528 OpenAI \u7684 GPT-4o-mini \u6a21\u578b\uff1a</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n\nmodelName := flag.String(\"model\", \"gpt-4o-mini\", \"Name of the model to use\")\nflag.Parse()\n// \u521b\u5efa OpenAI \u6a21\u578b\u5b9e\u4f8b\nmodelInstance := openai.New(*modelName, openai.Options{})\n</code></pre>"},{"location":"zh/agent/#_3","title":"\u914d\u7f6e\u751f\u6210\u53c2\u6570","text":"<p>\u8bbe\u7f6e\u6a21\u578b\u7684\u751f\u6210\u53c2\u6570\uff0c\u5305\u62ec\u6700\u5927 token \u6570\u3001\u6e29\u5ea6\u4ee5\u53ca\u662f\u5426\u4f7f\u7528\u6d41\u5f0f\u8f93\u51fa\u7b49\uff1a</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/model\"\n\nmaxTokens := 1000\ntemperature := 0.7\ngenConfig := model.GenerationConfig{\n    MaxTokens:   &amp;maxTokens,   // \u6700\u5927\u751f\u6210 token \u6570\n    Temperature: &amp;temperature, // \u6e29\u5ea6\u53c2\u6570\uff0c\u63a7\u5236\u8f93\u51fa\u7684\u968f\u673a\u6027\n    Stream:      true,         // \u542f\u7528\u6d41\u5f0f\u8f93\u51fa\n}\n</code></pre>"},{"location":"zh/agent/#llmagent","title":"\u521b\u5efa LLMAgent","text":"<p>\u4f7f\u7528\u6a21\u578b\u5b9e\u4f8b\u548c\u914d\u7f6e\u521b\u5efa <code>LLMAgent</code>\uff0c\u540c\u65f6\u8bbe\u7f6e <code>Agent</code> \u7684 <code>Description</code> \u4e0e <code>Instruction</code>\u3002</p> <p><code>Description</code> \u7528\u4e8e\u63cf\u8ff0 <code>Agent</code> \u7684\u57fa\u672c\u529f\u80fd\u548c\u7279\u6027\uff0cInstruction \u5219\u5b9a\u4e49\u4e86 <code>Agent</code> \u5728\u6267\u884c\u4efb\u52a1\u65f6\u5e94\u9075\u5faa\u7684\u5177\u4f53\u6307\u4ee4\u548c\u884c\u4e3a\u51c6\u5219\u3002</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n\nllmAgent := llmagent.New(\n    \"demo-agent\",                      // Agent \u540d\u79f0\n    llmagent.WithModel(modelInstance), // \u8bbe\u7f6e\u6a21\u578b\n    llmagent.WithDescription(\"A helpful AI assistant for demonstrations\"),              // \u8bbe\u7f6e\u63cf\u8ff0\n    llmagent.WithInstruction(\"Be helpful, concise, and informative in your responses\"), // \u8bbe\u7f6e\u6307\u4ee4\n    llmagent.WithGenerationConfig(genConfig),                                           // \u8bbe\u7f6e\u751f\u6210\u53c2\u6570\n)\n</code></pre>"},{"location":"zh/agent/#_4","title":"\u521b\u5efa\u8c03\u7528\u4e0a\u4e0b\u6587","text":"<p>\u521b\u5efa <code>Invocation</code> \u5bf9\u8c61\uff0c\u5305\u542b\u6267\u884c\u6240\u9700\u7684\u6240\u6709\u4fe1\u606f\uff1a</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/agent\"\n\ninvocation := &amp;agent.Invocation{\n    AgentName:     \"demo-agent\",                                                   // Agent \u540d\u79f0\n    InvocationID:  \"demo-invocation-001\",                                          // \u8c03\u7528 ID\n    EndInvocation: false,                                                          // \u662f\u5426\u7ed3\u675f\u8c03\u7528\n    Model:         modelInstance,                                                  // \u4f7f\u7528\u7684\u6a21\u578b\n    Message:       model.NewUserMessage(\"Hello! Can you tell me about yourself?\"), // \u7528\u6237\u6d88\u606f\n    Session:       &amp;session.Session{ID: \"session-001\"},\n}\n</code></pre>"},{"location":"zh/agent/#agent_1","title":"\u6267\u884c Agent","text":"<p>\u8c03\u7528 <code>Agent.Run</code> \u65b9\u6cd5\u5f00\u59cb\u6267\u884c\uff1a</p> <pre><code>import \"context\"\n\nctx := context.Background()\neventChan, err := llmAgent.Run(ctx, invocation)\nif err != nil {\n    log.Fatalf(\"\u6267\u884c Agent \u5931\u8d25: %v\", err)\n}\n</code></pre>"},{"location":"zh/agent/#_5","title":"\u5904\u7406\u4e8b\u4ef6\u6d41","text":"<p>\u901a\u8fc7\u4e8b\u4ef6\u901a\u9053\u63a5\u6536\u6267\u884c\u7ed3\u679c\uff1a</p> <pre><code>// \u5904\u7406 Event\nfor event := range eventChan {\n    // \u68c0\u67e5\u9519\u8bef\n    if event.Error != nil {\n        log.Printf(\"err: %s\", event.Error.Message)\n        continue\n    }\n    // \u5904\u7406\u5185\u5bb9\n    if len(event.Choices) &gt; 0 {\n        choice := event.Choices[0]\n        if choice.Delta.Content != \"\" {\n            // \u6d41\u5f0f\u8f93\u51fa\n            fmt.Print(choice.Delta.Content)\n        }\n    }\n    // \u68c0\u67e5\u662f\u5426\u5b8c\u6210\n    if event.Done {\n        break\n    }\n}\n</code></pre> <p>\u8be5\u793a\u4f8b\u7684\u5b8c\u6574\u4ee3\u7801\u53ef\u89c1 examples/llmagent</p>"},{"location":"zh/agent/#_6","title":"\u6838\u5fc3\u6982\u5ff5","text":""},{"location":"zh/agent/#invocation","title":"Invocation","text":"<p><code>Invocation</code> \u662f <code>Agent</code> \u6267\u884c\u6d41\u7a0b\u7684\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u5305\u542b\u4e86\u5355\u6b21\u8c03\u7528\u6240\u9700\u7684\u6240\u6709\u4fe1\u606f\uff1a</p> <pre><code>// Invocation \u662f Agent \u6267\u884c\u6d41\u7a0b\u7684\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u5305\u542b\u4e86\u5355\u6b21\u8c03\u7528\u6240\u9700\u7684\u6240\u6709\u4fe1\u606f\ntype Invocation struct {\n    // Agent \u6307\u5b9a\u8981\u8c03\u7528\u7684 Agent \u5b9e\u4f8b\n    Agent Agent\n    // AgentName \u6807\u8bc6\u8981\u8c03\u7528\u7684 Agent \u5b9e\u4f8b\u540d\u79f0\n    AgentName string\n    // InvocationID \u4e3a\u6bcf\u6b21\u8c03\u7528\u63d0\u4f9b\u552f\u4e00\u6807\u8bc6\n    InvocationID string\n    // Branch \u7528\u4e8e\u5206\u5c42\u4e8b\u4ef6\u8fc7\u6ee4\u7684\u5206\u652f\u6807\u8bc6\u7b26\n    Branch string\n    // EndInvocation \u6807\u8bc6\u662f\u5426\u7ed3\u675f\u8c03\u7528\u7684\u6807\u5fd7\n    EndInvocation bool\n    // Session \u7ef4\u62a4\u5bf9\u8bdd\u7684\u4e0a\u4e0b\u6587\u72b6\u6001\n    Session *session.Session\n    // Model \u6307\u5b9a\u8981\u4f7f\u7528\u7684\u6a21\u578b\u5b9e\u4f8b\n    Model model.Model\n    // Message \u662f\u7528\u6237\u53d1\u9001\u7ed9 Agent \u7684\u5177\u4f53\u5185\u5bb9\n    Message model.Message\n    // EventCompletionCh \u7528\u4e8e\u5728\u4e8b\u4ef6\u5199\u5165\u4f1a\u8bdd\u65f6\u53d1\u51fa\u4fe1\u53f7\n    EventCompletionCh &lt;-chan string\n    // RunOptions \u662f Run \u65b9\u6cd5\u7684\u9009\u9879\u914d\u7f6e\n    RunOptions RunOptions\n    // TransferInfo \u652f\u6301 Agent \u4e4b\u95f4\u7684\u63a7\u5236\u6743\u8f6c\u79fb\n    TransferInfo *TransferInfo\n    // AgentCallbacks \u5141\u8bb8\u5728 Agent \u6267\u884c\u7684\u4e0d\u540c\u9636\u6bb5\u63d2\u5165\u81ea\u5b9a\u4e49\u903b\u8f91\n    AgentCallbacks *AgentCallbacks\n    // ModelCallbacks \u5141\u8bb8\u5728\u6a21\u578b\u8c03\u7528\u7684\u4e0d\u540c\u9636\u6bb5\u63d2\u5165\u81ea\u5b9a\u4e49\u903b\u8f91\n    ModelCallbacks *model.ModelCallbacks\n    // ToolCallbacks \u5141\u8bb8\u5728\u5de5\u5177\u8c03\u7528\u7684\u4e0d\u540c\u9636\u6bb5\u63d2\u5165\u81ea\u5b9a\u4e49\u903b\u8f91\n    ToolCallbacks *tool.ToolCallbacks\n}\n</code></pre>"},{"location":"zh/agent/#event","title":"Event","text":"<p><code>Event</code> \u662f <code>Agent</code> \u6267\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u5b9e\u65f6\u53cd\u9988\uff0c\u901a\u8fc7 <code>Event</code> \u6d41\u5b9e\u65f6\u62a5\u544a\u6267\u884c\u8fdb\u5c55\u3002</p> <p>Event \u4e3b\u8981\u6709\u4ee5\u4e0b\u7c7b\u578b\uff1a</p> <ul> <li>\u6a21\u578b\u5bf9\u8bdd\u4e8b\u4ef6</li> <li>\u5de5\u5177\u8c03\u7528\u4e0e\u54cd\u5e94\u4e8b\u4ef6</li> <li>Agent \u8f6c\u79fb\u4e8b\u4ef6</li> <li>\u9519\u8bef\u4e8b\u4ef6</li> </ul> <pre><code>// Event \u662f Agent \u6267\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u5b9e\u65f6\u53cd\u9988\uff0c\u901a\u8fc7 Event \u6d41\u5b9e\u65f6\u62a5\u544a\u6267\u884c\u8fdb\u5c55\ntype Event struct {\n    // Response \u5305\u542b\u6a21\u578b\u7684\u54cd\u5e94\u5185\u5bb9\u3001\u5de5\u5177\u8c03\u7528\u7ed3\u679c\u548c\u7edf\u8ba1\u4fe1\u606f\n    *model.Response\n    // InvocationID \u5173\u8054\u5230\u5177\u4f53\u7684\u8c03\u7528\n    InvocationID string `json:\"invocationId\"`\n    // Author \u662f\u4e8b\u4ef6\u7684\u6765\u6e90\uff0c\u4f8b\u5982 Agent \u6216\u5de5\u5177\n    Author string `json:\"author\"`\n    // ID \u662f\u4e8b\u4ef6\u7684\u552f\u4e00\u6807\u8bc6\n    ID string `json:\"id\"`\n    // Timestamp \u8bb0\u5f55\u4e8b\u4ef6\u53d1\u751f\u7684\u65f6\u95f4\n    Timestamp time.Time `json:\"timestamp\"`\n    // Branch \u7528\u4e8e\u5206\u5c42\u4e8b\u4ef6\u8fc7\u6ee4\u7684\u5206\u652f\u6807\u8bc6\u7b26\n    Branch string `json:\"branch,omitempty\"`\n    // RequiresCompletion \u6807\u8bc6\u6b64\u4e8b\u4ef6\u662f\u5426\u9700\u8981\u5b8c\u6210\u4fe1\u53f7\n    RequiresCompletion bool `json:\"requiresCompletion,omitempty\"`\n    // CompletionID \u7528\u4e8e\u6b64\u4e8b\u4ef6\u7684\u5b8c\u6210\u4fe1\u53f7\n    CompletionID string `json:\"completionId,omitempty\"`\n    // LongRunningToolIDs \u662f\u957f\u65f6\u95f4\u8fd0\u884c\u51fd\u6570\u8c03\u7528\u7684 ID \u96c6\u5408\uff0cAgent \u5ba2\u6237\u7aef\u53ef\u4ee5\u901a\u8fc7\u6b64\u5b57\u6bb5\u4e86\u89e3\u54ea\u4e2a\u51fd\u6570\u8c03\u7528\u662f\u957f\u65f6\u95f4\u8fd0\u884c\u7684\uff0c\u4ec5\u5bf9\u51fd\u6570\u8c03\u7528\u4e8b\u4ef6\u6709\u6548\n    LongRunningToolIDs map[string]struct{} `json:\"longRunningToolIDs,omitempty\"`\n}\n</code></pre> <p><code>Event</code> \u7684\u6d41\u5f0f\u7279\u6027\u8ba9\u4f60\u80fd\u591f\u5b9e\u65f6\u770b\u5230 <code>Agent</code> \u7684\u5de5\u4f5c\u8fc7\u7a0b\uff0c\u5c31\u50cf\u548c\u4e00\u4e2a\u771f\u4eba\u5bf9\u8bdd\u4e00\u6837\u81ea\u7136\u3002\u4f60\u53ea\u9700\u8981\u904d\u5386 <code>Event</code> \u6d41\uff0c\u68c0\u67e5\u6bcf\u4e2a <code>Event</code> \u7684\u5185\u5bb9\u548c\u72b6\u6001\uff0c\u5c31\u80fd\u5b8c\u6574\u5730\u5904\u7406 <code>Agent</code> \u7684\u6267\u884c\u7ed3\u679c\u3002</p>"},{"location":"zh/agent/#agent_2","title":"Agent \u63a5\u53e3","text":"<p><code>Agent</code> \u63a5\u53e3\u5b9a\u4e49\u4e86\u6240\u6709 <code>Agent</code> \u5fc5\u987b\u5b9e\u73b0\u7684\u6838\u5fc3\u884c\u4e3a\u3002\u8fd9\u4e2a\u63a5\u53e3\u8ba9\u4f60\u80fd\u591f\u7edf\u4e00\u4f7f\u7528\u4e0d\u540c\u7c7b\u578b\u7684 <code>Agent</code>\uff0c\u540c\u65f6\u652f\u6301\u5de5\u5177\u8c03\u7528\u548c\u5b50 <code>Agent</code> \u7ba1\u7406\u3002</p> <pre><code>type Agent interface {\n    // Run \u63a5\u6536\u6267\u884c\u4e0a\u4e0b\u6587\u548c\u8c03\u7528\u4fe1\u606f\uff0c\u8fd4\u56de\u4e00\u4e2a\u4e8b\u4ef6\u901a\u9053\u3002\u901a\u8fc7\u8fd9\u4e2a\u901a\u9053\uff0c\u4f60\u53ef\u4ee5\u5b9e\u65f6\u63a5\u6536 Agent \u7684\u6267\u884c\u8fdb\u5c55\u548c\u7ed3\u679c\n    Run(ctx context.Context, invocation *Invocation) (&lt;-chan *event.Event, error)\n    // Tools \u8fd4\u56de\u6b64 Agent \u53ef\u4ee5\u8bbf\u95ee\u548c\u6267\u884c\u7684\u5de5\u5177\u5217\u8868\n    Tools() []tool.Tool\n    // Info \u65b9\u6cd5\u63d0\u4f9b Agent \u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5305\u62ec\u540d\u79f0\u548c\u63cf\u8ff0\uff0c\u4fbf\u4e8e\u8bc6\u522b\u548c\u7ba1\u7406\n    Info() Info\n    // SubAgents \u8fd4\u56de\u6b64 Agent \u53ef\u7528\u7684\u5b50 Agent \u5217\u8868\n    // SubAgents \u548c FindSubAgent \u65b9\u6cd5\u652f\u6301 Agent \u4e4b\u95f4\u7684\u534f\u4f5c\u3002\u4e00\u4e2a Agent \u53ef\u4ee5\u5c06\u4efb\u52a1\u59d4\u6258\u7ed9\u5176\u4ed6 Agent\uff0c\u6784\u5efa\u590d\u6742\u7684\u591a Agent \u7cfb\u7edf\n    SubAgents() []Agent\n    // FindSubAgent \u901a\u8fc7\u540d\u79f0\u67e5\u627e\u5b50 Agent\n    FindSubAgent(name string) Agent\n}\n</code></pre> <p>\u6846\u67b6\u63d0\u4f9b\u4e86\u591a\u79cd\u7c7b\u578b\u7684 Agent \u5b9e\u73b0\uff0c\u5305\u62ec <code>LLMAgent</code>\u3001<code>ChainAgent</code>\u3001<code>ParallelAgent</code>\u3001<code>CycleAgent</code> \u548c <code>GraphAgent</code>\uff0c\u4e0d\u540c\u7c7b\u578b <code>Agent</code> \u4ee5\u53ca\u591a <code>Agent</code> \u7cfb\u7edf\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u8003 multiagent\u3002</p>"},{"location":"zh/agent/#callbacks","title":"Callbacks","text":"<p>Callbacks \u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u56de\u8c03\u673a\u5236\uff0c\u8ba9\u4f60\u80fd\u591f\u5728 <code>Agent</code> \u6267\u884c\u7684\u5173\u952e\u8282\u70b9\u6ce8\u5165\u81ea\u5b9a\u4e49\u903b\u8f91\u3002</p>"},{"location":"zh/agent/#_7","title":"\u56de\u8c03\u7c7b\u578b","text":"<p>\u6846\u67b6\u63d0\u4f9b\u4e86\u4e09\u79cd\u7c7b\u578b\u7684\u56de\u8c03\uff1a</p> <p>Agent Callbacks\uff1a\u5728 <code>Agent</code> \u6267\u884c\u524d\u540e\u89e6\u53d1 <pre><code>type AgentCallbacks struct {\n    BeforeAgent []BeforeAgentCallback  // Agent \u8fd0\u884c\u524d\u7684\u56de\u8c03\n    AfterAgent  []AfterAgentCallback   // Agent \u8fd0\u884c\u540e\u7684\u56de\u8c03\n}\n</code></pre></p> <p>Model Callbacks\uff1a\u5728\u6a21\u578b\u8c03\u7528\u524d\u540e\u89e6\u53d1 <pre><code>type ModelCallbacks struct {\n    BeforeModel []BeforeModelCallback  // \u6a21\u578b\u8c03\u7528\u524d\u7684\u56de\u8c03\n    AfterModel  []AfterModelCallback   // \u6a21\u578b\u8c03\u7528\u540e\u7684\u56de\u8c03\n}\n</code></pre></p> <p>Tool Callbacks\uff1a\u5728\u5de5\u5177\u8c03\u7528\u524d\u540e\u89e6\u53d1</p> <pre><code>type ToolCallbacks struct {\n    BeforeTool []BeforeToolCallback  // \u5de5\u5177\u8c03\u7528\u524d\u7684\u56de\u8c03\n    AfterTool []AfterToolCallback    // \u5de5\u5177\u8c03\u7528\u540e\u7684\u56de\u8c03\n}\n</code></pre>"},{"location":"zh/agent/#_8","title":"\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>// \u521b\u5efa Agent \u56de\u8c03\ncallbacks := &amp;agent.AgentCallbacks{\n    BeforeAgent: []agent.BeforeAgentCallback{\n        func(ctx context.Context, invocation *agent.Invocation) (*model.Response, error) {\n            log.Printf(\"Agent %s \u5f00\u59cb\u6267\u884c\", invocation.AgentName)\n            return nil, nil\n        },\n    },\n    AfterAgent: []agent.AfterAgentCallback{\n        func(ctx context.Context, invocation *agent.Invocation, runErr error) (*model.Response, error) {\n            if runErr != nil {\n                log.Printf(\"Agent %s \u6267\u884c\u51fa\u9519: %v\", invocation.AgentName, runErr)\n            } else {\n                log.Printf(\"Agent %s \u6267\u884c\u5b8c\u6210\", invocation.AgentName)\n            }\n            return nil, nil\n        },\n    },\n}\n\n// \u5728 Invocation \u4e2d\u4f7f\u7528\u56de\u8c03\ninvocation := &amp;agent.Invocation{\n    AgentName:     \"demo-agent\",\n    InvocationID:  \"demo-001\",\n    AgentCallbacks: callbacks,\n    Model:         modelInstance,\n    Message:       model.NewUserMessage(\"\u7528\u6237\u8f93\u5165\"),\n    Session: &amp;session.Session{\n        ID: \"session-001\",\n    },\n}\n</code></pre> <p>\u56de\u8c03\u673a\u5236\u8ba9\u4f60\u80fd\u591f\u7cbe\u786e\u63a7\u5236 <code>Agent</code> \u7684\u6267\u884c\u8fc7\u7a0b\uff0c\u5b9e\u73b0\u66f4\u590d\u6742\u7684\u4e1a\u52a1\u903b\u8f91\u3002</p>"},{"location":"zh/agent/#_9","title":"\u8fdb\u9636\u4f7f\u7528","text":"<p>\u6846\u67b6\u8fd8\u63d0\u4f9b\u4e86 <code>Runner</code>\u3001<code>Session</code> \u548c <code>Memory</code> \u7b49\u9ad8\u7ea7\u529f\u80fd\uff0c\u7528\u4e8e\u6784\u5efa\u66f4\u590d\u6742\u7684 `Agent \u7cfb\u7edf\u3002</p> <p><code>Runner</code> \u662f <code>Agent</code> \u7684\u6267\u884c\u5668\uff0c\u8d1f\u8d23\u7ba1\u7406 <code>Agent</code> \u7684\u6267\u884c\u6d41\u7a0b\uff0c\u4e32\u8054\u4e86 <code>Session/Memory Service</code> \u7b49\u80fd\u529b\u3002</p> <p><code>Session Service</code> \u7528\u4e8e\u7ba1\u7406\u4f1a\u8bdd\u72b6\u6001\uff0c\u652f\u6301\u5bf9\u8bdd\u5386\u53f2\u8bb0\u5f55\u548c\u4e0a\u4e0b\u6587\u7ef4\u62a4\u3002</p> <p><code>Memory Service</code> \u7528\u4e8e\u8bb0\u5f55\u7528\u6237\u7684\u504f\u597d\u4fe1\u606f\uff0c\u652f\u6301\u4e2a\u6027\u5316\u4f53\u9a8c\u3002</p> <p>\u8be6\u7ec6\u4f7f\u7528\u65b9\u6cd5\u8bf7\u53c2\u8003 runner\u3001session \u548c memory \u6587\u6863\u3002</p>"},{"location":"zh/event/","title":"Event \u4f7f\u7528\u6587\u6863","text":"<p><code>Event</code> \u662f tRPC-Agent-Go \u4e2d <code>Agent</code> \u4e0e\u7528\u6237\u4e4b\u95f4\u901a\u4fe1\u7684\u6838\u5fc3\u673a\u5236\u3002\u5b83\u5c31\u50cf\u4e00\u4e2a\u6d88\u606f\u4fe1\u5c01\uff0c\u627f\u8f7d\u7740 <code>Agent</code> \u7684\u54cd\u5e94\u5185\u5bb9\u3001\u5de5\u5177\u8c03\u7528\u7ed3\u679c\u3001\u9519\u8bef\u4fe1\u606f\u7b49\u3002\u901a\u8fc7 <code>Event</code>\uff0c\u4f60\u53ef\u4ee5\u5b9e\u65f6\u4e86\u89e3 <code>Agent</code> \u7684\u5de5\u4f5c\u72b6\u6001\uff0c\u5904\u7406\u6d41\u5f0f\u54cd\u5e94\uff0c\u5b9e\u73b0\u591a <code>Agent</code> \u534f\u4f5c\uff0c\u4ee5\u53ca\u8ffd\u8e2a\u5de5\u5177\u6267\u884c\u3002</p>"},{"location":"zh/event/#event_1","title":"Event \u6982\u8ff0","text":"<p><code>Event</code> \u662f <code>Agent</code> \u4e0e\u7528\u6237\u4e4b\u95f4\u901a\u4fe1\u7684\u8f7d\u4f53\u3002</p> <p>\u7528\u6237\u901a\u8fc7 <code>runner.Run()</code> \u65b9\u6cd5\u83b7\u53d6\u4e8b\u4ef6\u6d41\uff0c\u7136\u540e\u76d1\u542c\u4e8b\u4ef6\u901a\u9053\u6765\u5904\u7406 <code>Agent</code> \u7684\u54cd\u5e94\u3002</p>"},{"location":"zh/event/#event_2","title":"Event \u7ed3\u6784","text":"<p><code>Event</code> \u8868\u793a <code>Agent</code> \u4e0e\u7528\u6237\u4e4b\u95f4\u7684\u4e00\u6b21\u4e8b\u4ef6\uff0c\u7ed3\u6784\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>type Event struct {\n    // Response \u662f Event \u7684\u57fa\u7840\u54cd\u5e94\u7ed3\u6784\uff0c\u627f\u8f7d LLM \u7684\u54cd\u5e94\n    *model.Response\n\n    // InvocationID \u662f\u672c\u6b21\u8c03\u7528\u7684\u552f\u4e00\u6807\u8bc6\n    InvocationID string `json:\"invocationId\"`\n\n    // Author \u662f\u4e8b\u4ef6\u7684\u53d1\u8d77\u8005\n    Author string `json:\"author\"`\n\n    // ID \u662f\u4e8b\u4ef6\u7684\u552f\u4e00\u6807\u8bc6\u7b26\n    ID string `json:\"id\"`\n\n    // Timestamp \u662f\u4e8b\u4ef6\u7684\u65f6\u95f4\u6233\n    Timestamp time.Time `json:\"timestamp\"`\n\n    // Branch \u662f\u5206\u652f\u6807\u8bc6\u7b26\uff0c\u7528\u4e8e\u591a Agent \u534f\u4f5c\n    Branch string `json:\"branch,omitempty\"`\n\n    // RequiresCompletion \u8868\u793a\u6b64\u4e8b\u4ef6\u662f\u5426\u9700\u8981\u5b8c\u6210\u4fe1\u53f7\n    RequiresCompletion bool `json:\"requiresCompletion,omitempty\"`\n\n    // CompletionID \u7528\u4e8e\u6b64\u4e8b\u4ef6\u7684\u5b8c\u6210\u4fe1\u53f7\n    CompletionID string `json:\"completionId,omitempty\"`\n\n    // LongRunningToolIDs \u662f\u957f\u8fd0\u884c\u51fd\u6570\u8c03\u7528\u7684 ID \u96c6\u5408\n    // Agent \u5ba2\u6237\u7aef\u5c06\u4ece\u6b64\u5b57\u6bb5\u4e86\u89e3\u54ea\u4e9b\u51fd\u6570\u8c03\u7528\u662f\u957f\u65f6\u95f4\u8fd0\u884c\u7684\n    // \u4ec5\u5bf9\u51fd\u6570\u8c03\u7528\u4e8b\u4ef6\u6709\u6548\n    LongRunningToolIDs map[string]struct{} `json:\"longRunningToolIDs,omitempty\"`\n}\n</code></pre> <p><code>model.Response</code> \u662f <code>Event</code> \u7684\u57fa\u7840\u54cd\u5e94\u7ed3\u6784\uff0c\u627f\u8f7d\u4e86 LLM \u7684\u54cd\u5e94\u3001\u5de5\u5177\u8c03\u7528\u4ee5\u53ca\u9519\u8bef\u7b49\u4fe1\u606f\uff0c\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>type Response struct {\n    // \u54cd\u5e94\u552f\u4e00\u6807\u8bc6\n    ID string `json:\"id\"`\n\n    // \u5bf9\u8c61\u7c7b\u578b\uff08\u5982 \"chat.completion\", \"error\" \u7b49\uff09\uff0c\u5e2e\u52a9\u5ba2\u6237\u7aef\u8bc6\u522b\u5904\u7406\u65b9\u5f0f\n    Object string `json:\"object\"`\n\n    // \u521b\u5efa\u65f6\u95f4\u6233\n    Created int64 `json:\"created\"`\n\n    // \u4f7f\u7528\u7684\u6a21\u578b\u540d\u79f0\n    Model string `json:\"model\"`\n\n    // \u54cd\u5e94\u53ef\u9009\u9879\uff0cLLM \u53ef\u80fd\u751f\u6210\u591a\u4e2a\u5019\u9009\u54cd\u5e94\u4f9b\u7528\u6237\u9009\u62e9\uff0c\u9ed8\u8ba4\u53ea\u6709 1 \u4e2a\n    Choices []Choice `json:\"choices\"`\n\n    // \u4f7f\u7528\u7edf\u8ba1\u4fe1\u606f\uff0c\u8bb0\u5f55 token \u4f7f\u7528\u60c5\u51b5\n    Usage *Usage `json:\"usage,omitempty\"`\n\n    // \u7cfb\u7edf\u6307\u7eb9\n    SystemFingerprint *string `json:\"system_fingerprint,omitempty\"`\n\n    // \u9519\u8bef\u4fe1\u606f\n    Error *ResponseError `json:\"error,omitempty\"`\n\n    // \u65f6\u95f4\u6233\n    Timestamp time.Time `json:\"timestamp\"`\n\n    // \u8868\u793a\u6574\u4e2a\u5bf9\u8bdd\u662f\u5426\u5b8c\u6210\n    Done bool `json:\"done\"`\n\n    // \u662f\u5426\u4e3a\u90e8\u5206\u54cd\u5e94\n    IsPartial bool `json:\"is_partial\"`\n}\n\ntype Choice struct {\n    // \u9009\u62e9\u7d22\u5f15\n    Index int `json:\"index\"`\n\n    // \u5b8c\u6574\u6d88\u606f\uff0c\u5305\u542b\u6574\u4e2a\u54cd\u5e94\n    Message Message `json:\"message,omitempty\"`\n\n    // \u589e\u91cf\u6d88\u606f\uff0c\u7528\u4e8e\u6d41\u5f0f\u54cd\u5e94\uff0c\u53ea\u5305\u542b\u5f53\u524d\u5757\u7684\u65b0\u5185\u5bb9\n    // \u4f8b\u5982\uff1a\u5b8c\u6574\u54cd\u5e94 \"Hello, how can I help you?\" \u5728\u6d41\u5f0f\u54cd\u5e94\u4e2d\uff1a\n    // \u7b2c\u4e00\u4e2a\u4e8b\u4ef6\uff1aDelta.Content = \"Hello\"\n    // \u7b2c\u4e8c\u4e2a\u4e8b\u4ef6\uff1aDelta.Content = \", how\"  \n    // \u7b2c\u4e09\u4e2a\u4e8b\u4ef6\uff1aDelta.Content = \" can I help you?\"\n    Delta Message `json:\"delta,omitempty\"`\n\n    // \u5b8c\u6210\u539f\u56e0\n    FinishReason *string `json:\"finish_reason,omitempty\"`\n}\n\ntype Message struct {\n    // \u6d88\u606f\u53d1\u8d77\u4eba\u7684\u89d2\u8272\uff0c\u4f8b\u5982 \"system\", \"user\", \"assistant\", \"tool\"\n    Role string `json:\"role\"`\n\n    // \u6d88\u606f\u5185\u5bb9\n    Content string `json:\"content\"`\n\n    // \u591a\u6a21\u5f0f\u6d88\u606f\u7684\u5185\u5bb9\u7247\u6bb5\n    ContentParts []ContentPart `json:\"content_parts,omitempty\"`\n\n    // \u5de5\u5177\u54cd\u5e94\u6240\u4f7f\u7528\u7684\u5de5\u5177\u7684 ID\n    ToolID string `json:\"tool_id,omitempty\"`\n\n    // \u5de5\u5177\u54cd\u5e94\u6240\u4f7f\u7528\u7684\u5de5\u5177\u7684\u540d\u79f0\n    ToolName string `json:\"tool_name,omitempty\"`\n\n    // \u53ef\u9009\u7684\u5de5\u5177\u8c03\u7528\n    ToolCalls []ToolCall `json:\"tool_calls,omitempty\"`\n}\n\ntype Usage struct {\n    // \u63d0\u793a\u8bcd\u4f7f\u7528\u7684 Token \u6570\u91cf.\n    PromptTokens int `json:\"prompt_tokens\"`\n\n    // \u8865\u5168\u4f7f\u7528\u7684 Token \u6570\u91cf.\n    CompletionTokens int `json:\"completion_tokens\"`\n\n    // \u54cd\u5e94\u4e2d\u4f7f\u7528\u7684\u603b Token \u6570\u91cf.\n    TotalTokens int `json:\"total_tokens\"`\n}\n</code></pre>"},{"location":"zh/event/#event_3","title":"Event \u7c7b\u578b","text":"<p><code>Event</code> \u5728\u4ee5\u4e0b\u573a\u666f\u4e2d\u4f1a\u88ab\u521b\u5efa\u548c\u53d1\u9001\uff1a</p> <ol> <li>\u7528\u6237\u6d88\u606f\u4e8b\u4ef6\uff1a\u7528\u6237\u53d1\u9001\u6d88\u606f\u65f6\u81ea\u52a8\u521b\u5efa</li> <li><code>Agent</code> \u54cd\u5e94\u4e8b\u4ef6\uff1a<code>Agent</code> \u751f\u6210\u54cd\u5e94\u65f6\u521b\u5efa</li> <li>\u6d41\u5f0f\u54cd\u5e94\u4e8b\u4ef6\uff1a\u6d41\u5f0f\u6a21\u5f0f\u4e0b\u6bcf\u4e2a\u54cd\u5e94\u5757\u90fd\u4f1a\u521b\u5efa</li> <li>\u5de5\u5177\u8c03\u7528\u4e8b\u4ef6\uff1a<code>Agent</code> \u8c03\u7528\u5de5\u5177\u65f6\u521b\u5efa</li> <li>\u9519\u8bef\u4e8b\u4ef6\uff1a\u53d1\u751f\u9519\u8bef\u65f6\u521b\u5efa</li> <li><code>Agent</code> \u8f6c\u79fb\u4e8b\u4ef6\uff1a<code>Agent</code> \u8f6c\u79fb\u7ed9\u5176\u4ed6 <code>Agent</code> \u65f6\u521b\u5efa</li> <li>\u5b8c\u6210\u4e8b\u4ef6\uff1aAgent \u6267\u884c\u5b8c\u6210\u65f6\u521b\u5efa</li> </ol> <p>\u6839\u636e <code>model.Response.Object</code> \u5b57\u6bb5\uff0c<code>Event</code> \u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u7c7b\u578b\uff1a</p> <pre><code>const (\n    // \u9519\u8bef\u4e8b\u4ef6\n    ObjectTypeError = \"error\"\n\n    // \u5de5\u5177\u54cd\u5e94\u4e8b\u4ef6\n    ObjectTypeToolResponse = \"tool.response\"\n\n    // \u9884\u5904\u7406\u4e8b\u4ef6\n    ObjectTypePreprocessingBasic = \"preprocessing.basic\"\n    ObjectTypePreprocessingContent = \"preprocessing.content\"\n    ObjectTypePreprocessingIdentity = \"preprocessing.identity\"\n    ObjectTypePreprocessingInstruction = \"preprocessing.instruction\"\n    ObjectTypePreprocessingPlanning = \"preprocessing.planning\"\n\n    // \u540e\u5904\u7406\u4e8b\u4ef6\n    ObjectTypePostprocessingPlanning = \"postprocessing.planning\"\n    ObjectTypePostprocessingCodeExecution = \"postprocessing.code_execution\"\n\n    // Agent \u8f6c\u79fb\u4e8b\u4ef6\n    ObjectTypeTransfer = \"agent.transfer\"\n\n    // Runner \u5b8c\u6210\u4e8b\u4ef6\n    ObjectTypeRunnerCompletion = \"runner.completion\"\n)\n</code></pre>"},{"location":"zh/event/#event_4","title":"Event \u521b\u5efa","text":"<p>\u5728\u5f00\u53d1\u81ea\u5b9a\u4e49 <code>Agent</code> \u7c7b\u578b\u6216 <code>Processor</code> \u65f6\uff0c\u9700\u8981\u521b\u5efa <code>Event</code>\u3002</p> <p><code>Event</code> \u63d0\u4f9b\u4e86\u4e09\u79cd\u521b\u5efa\u65b9\u6cd5\uff0c\u9002\u7528\u4e8e\u4e0d\u540c\u573a\u666f\u3002</p> <pre><code>// \u521b\u5efa\u65b0\u4e8b\u4ef6\nfunc New(invocationID, author string, opts ...Option) *Event\n\n// \u521b\u5efa\u9519\u8bef\u4e8b\u4ef6\nfunc NewErrorEvent(invocationID, author, errorType, errorMessage string) *Event\n\n// \u4ece\u54cd\u5e94\u521b\u5efa\u4e8b\u4ef6\nfunc NewResponseEvent(invocationID, author string, response *model.Response) *Event\n</code></pre> <p>\u53c2\u6570\u8bf4\u660e\uff1a</p> <ul> <li><code>invocationID string</code>\uff1a\u8c03\u7528\u552f\u4e00\u6807\u8bc6</li> <li><code>author string</code>\uff1a\u4e8b\u4ef6\u53d1\u8d77\u8005</li> <li><code>opts ...Option</code>\uff1a\u53ef\u9009\u7684\u914d\u7f6e\u9009\u9879\uff08\u4ec5 <code>New</code> \u65b9\u6cd5\uff09</li> <li><code>errorType string</code>\uff1a\u9519\u8bef\u7c7b\u578b\uff08\u4ec5 <code>NewErrorEvent</code> \u65b9\u6cd5\uff09</li> <li><code>errorMessage string</code>\uff1a\u9519\u8bef\u6d88\u606f\uff08\u4ec5 <code>NewErrorEvent</code> \u65b9\u6cd5\uff09</li> <li><code>response *model.Response</code>\uff1a\u54cd\u5e94\u5bf9\u8c61\uff08\u4ec5 <code>NewResponseEvent</code> \u65b9\u6cd5\uff09</li> </ul> <p>\u6846\u67b6\u652f\u6301\u4ee5\u4e0b <code>Option</code> \u7528\u4ee5\u914d\u7f6e <code>Event</code>\uff1a</p> <ul> <li><code>WithBranch(branch string)</code>\uff1a\u8bbe\u7f6e\u4e8b\u4ef6\u7684\u5206\u652f\u6807\u8bc6</li> <li><code>WithResponse(response *model.Response)</code>\uff1a\u8bbe\u7f6e\u4e8b\u4ef6\u7684\u54cd\u5e94\u5185\u5bb9</li> <li><code>WithObject(o string)</code>\uff1a\u8bbe\u7f6e\u4e8b\u4ef6\u7684\u7c7b\u578b</li> </ul> <p>\u793a\u4f8b\uff1a <pre><code>// \u521b\u5efa\u57fa\u672c\u4e8b\u4ef6\nevt := event.New(\"invoke-123\", \"agent\")\n\n// \u521b\u5efa\u5e26\u5206\u652f\u7684\u4e8b\u4ef6\nevt := event.New(\"invoke-123\", \"agent\", event.WithBranch(\"main\"))\n\n// \u521b\u5efa\u9519\u8bef\u4e8b\u4ef6\nevt := event.NewErrorEvent(\"invoke-123\", \"agent\", \"api_error\", \"\u8bf7\u6c42\u8d85\u65f6\")\n\n// \u4ece\u54cd\u5e94\u521b\u5efa\u4e8b\u4ef6\nresponse := &amp;model.Response{\n    Object: \"chat.completion\",\n    Done:   true,\n    Choices: []model.Choice{{Message: model.Message{Role: \"assistant\", Content: \"Hello!\"}}},\n}\nevt := event.NewResponseEvent(\"invoke-123\", \"agent\", response)\n</code></pre></p>"},{"location":"zh/event/#event_5","title":"Event \u65b9\u6cd5","text":"<p><code>Event</code> \u63d0\u4f9b\u4e86 <code>Clone</code> \u65b9\u6cd5\uff0c\u7528\u4e8e\u521b\u5efa <code>Event</code> \u7684\u6df1\u62f7\u8d1d\u3002</p> <pre><code>func (e *Event) Clone() *Event\n</code></pre>"},{"location":"zh/event/#event_6","title":"Event \u4f7f\u7528\u793a\u4f8b","text":"<p>\u8fd9\u4e2a\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u4f7f\u7528 <code>Event</code> \u5904\u7406 <code>Agent</code> \u7684\u6d41\u5f0f\u54cd\u5e94\u3001\u5de5\u5177\u8c03\u7528\u548c\u9519\u8bef\u5904\u7406\u3002</p>"},{"location":"zh/event/#_1","title":"\u6838\u5fc3\u6d41\u7a0b","text":"<ol> <li>\u53d1\u9001\u7528\u6237\u6d88\u606f\uff1a\u901a\u8fc7 <code>runner.Run()</code> \u542f\u52a8 <code>Agent</code> \u5904\u7406</li> <li>\u63a5\u6536\u4e8b\u4ef6\u6d41\uff1a\u5b9e\u65f6\u5904\u7406 <code>Agent</code> \u8fd4\u56de\u7684\u4e8b\u4ef6</li> <li>\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u4e8b\u4ef6\uff1a\u533a\u5206\u6d41\u5f0f\u5185\u5bb9\u3001\u5de5\u5177\u8c03\u7528\u3001\u9519\u8bef\u7b49</li> <li>\u53ef\u89c6\u5316\u8f93\u51fa\uff1a\u4e3a\u7528\u6237\u63d0\u4f9b\u53cb\u597d\u7684\u4ea4\u4e92\u4f53\u9a8c</li> </ol>"},{"location":"zh/event/#_2","title":"\u4ee3\u7801\u793a\u4f8b","text":"<pre><code>// processMessage \u5904\u7406\u5355\u6b21\u6d88\u606f\u4ea4\u4e92\nfunc (c *multiTurnChat) processMessage(ctx context.Context, userMessage string) error {\n    message := model.NewUserMessage(userMessage)\n\n    // \u901a\u8fc7 runner \u8fd0\u884c agent\n    eventChan, err := c.runner.Run(ctx, c.userID, c.sessionID, message)\n    if err != nil {\n        return fmt.Errorf(\"failed to run agent: %w\", err)\n    }\n\n    // \u5904\u7406\u54cd\u5e94\n    return c.processResponse(eventChan)\n}\n\n// processResponse \u5904\u7406\u54cd\u5e94\uff0c\u5305\u62ec\u6d41\u5f0f\u54cd\u5e94\u548c\u5de5\u5177\u8c03\u7528\u53ef\u89c6\u5316\nfunc (c *multiTurnChat) processResponse(eventChan &lt;-chan *event.Event) error {\n    fmt.Print(\"\ud83e\udd16 Assistant: \")\n\n    var (\n        fullContent       string        // \u7d2f\u79ef\u7684\u5b8c\u6574\u5185\u5bb9\n        toolCallsDetected bool          // \u662f\u5426\u68c0\u6d4b\u5230\u5de5\u5177\u8c03\u7528\n        assistantStarted  bool          // Assistant \u662f\u5426\u5df2\u5f00\u59cb\u56de\u590d\n    )\n\n    for event := range eventChan {\n        // \u5904\u7406\u5355\u4e2a\u4e8b\u4ef6\n        if err := c.handleEvent(event, &amp;toolCallsDetected, &amp;assistantStarted, &amp;fullContent); err != nil {\n            return err\n        }\n\n        // \u68c0\u67e5\u662f\u5426\u4e3a\u6700\u7ec8\u4e8b\u4ef6\n        if event.Done &amp;&amp; !c.isToolEvent(event) {\n            fmt.Printf(\"\\n\")\n            break\n        }\n    }\n\n    return nil\n}\n\n// handleEvent \u5904\u7406\u5355\u4e2a\u4e8b\u4ef6\nfunc (c *multiTurnChat) handleEvent(\n    event *event.Event,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n    fullContent *string,\n) error {\n    // 1. \u5904\u7406\u9519\u8bef\u4e8b\u4ef6\n    if event.Error != nil {\n        fmt.Printf(\"\\n\u274c Error: %s\\n\", event.Error.Message)\n        return nil\n    }\n\n    // 2. \u5904\u7406\u5de5\u5177\u8c03\u7528\n    if c.handleToolCalls(event, toolCallsDetected, assistantStarted) {\n        return nil\n    }\n\n    // 3. \u5904\u7406\u5de5\u5177\u54cd\u5e94\n    if c.handleToolResponses(event) {\n        return nil\n    }\n\n    // 4. \u5904\u7406\u5185\u5bb9\n    c.handleContent(event, toolCallsDetected, assistantStarted, fullContent)\n\n    return nil\n}\n\n// handleToolCalls \u68c0\u6d4b\u5e76\u663e\u793a\u5de5\u5177\u8c03\u7528\nfunc (c *multiTurnChat) handleToolCalls(\n    event *event.Event,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n) bool {\n    if len(event.Choices) &gt; 0 &amp;&amp; len(event.Choices[0].Message.ToolCalls) &gt; 0 {\n        *toolCallsDetected = true\n        if *assistantStarted {\n            fmt.Printf(\"\\n\")\n        }\n        fmt.Printf(\"\ud83d\udd27 Tool calls initiated:\\n\")\n        for _, toolCall := range event.Choices[0].Message.ToolCalls {\n            fmt.Printf(\"   \u2022 %s (ID: %s)\\n\", toolCall.Function.Name, toolCall.ID)\n            if len(toolCall.Function.Arguments) &gt; 0 {\n                fmt.Printf(\"     Args: %s\\n\", string(toolCall.Function.Arguments))\n            }\n        }\n        fmt.Printf(\"\\n\ud83d\udd04 Executing tools...\\n\")\n        return true\n    }\n    return false\n}\n\n// handleToolResponses \u68c0\u6d4b\u5e76\u663e\u793a\u5de5\u5177\u54cd\u5e94\nfunc (c *multiTurnChat) handleToolResponses(event *event.Event) bool {\n    if event.Response != nil &amp;&amp; len(event.Response.Choices) &gt; 0 {\n        for _, choice := range event.Response.Choices {\n            if choice.Message.Role == model.RoleTool &amp;&amp; choice.Message.ToolID != \"\" {\n                fmt.Printf(\"\u2705 Tool response (ID: %s): %s\\n\",\n                    choice.Message.ToolID,\n                    strings.TrimSpace(choice.Message.Content))\n                return true\n            }\n        }\n    }\n    return false\n}\n\n// handleContent \u5904\u7406\u5e76\u663e\u793a\u5185\u5bb9\nfunc (c *multiTurnChat) handleContent(\n    event *event.Event,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n    fullContent *string,\n) {\n    if len(event.Choices) &gt; 0 {\n        choice := event.Choices[0]\n        content := c.extractContent(choice)\n\n        if content != \"\" {\n            c.displayContent(content, toolCallsDetected, assistantStarted, fullContent)\n        }\n    }\n}\n\n// extractContent \u6839\u636e\u6d41\u5f0f\u6a21\u5f0f\u63d0\u53d6\u5185\u5bb9\nfunc (c *multiTurnChat) extractContent(choice model.Choice) string {\n    if c.streaming {\n        // \u6d41\u5f0f\u6a21\u5f0f\uff1a\u4f7f\u7528\u589e\u91cf\u5185\u5bb9\n        return choice.Delta.Content\n    }\n    // \u975e\u6d41\u5f0f\u6a21\u5f0f\uff1a\u4f7f\u7528\u5b8c\u6574\u6d88\u606f\u5185\u5bb9\n    return choice.Message.Content\n}\n\n// displayContent \u5c06\u5185\u5bb9\u6253\u5370\u5230\u63a7\u5236\u53f0\nfunc (c *multiTurnChat) displayContent(\n    content string,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n    fullContent *string,\n) {\n    if !*assistantStarted {\n        if *toolCallsDetected {\n            fmt.Printf(\"\\n\ud83e\udd16 Assistant: \")\n        }\n        *assistantStarted = true\n    }\n    fmt.Print(content)\n    *fullContent += content\n}\n\n// isToolEvent \u68c0\u67e5\u4e8b\u4ef6\u662f\u5426\u4e3a\u5de5\u5177\u54cd\u5e94\nfunc (c *multiTurnChat) isToolEvent(event *event.Event) bool {\n    if event.Response == nil {\n        return false\n    }\n\n    // \u68c0\u67e5\u662f\u5426\u6709\u5de5\u5177\u8c03\u7528\n    if len(event.Choices) &gt; 0 &amp;&amp; len(event.Choices[0].Message.ToolCalls) &gt; 0 {\n        return true\n    }\n\n    // \u68c0\u67e5\u662f\u5426\u6709\u5de5\u5177 ID\n    if len(event.Choices) &gt; 0 &amp;&amp; event.Choices[0].Message.ToolID != \"\" {\n        return true\n    }\n\n    // \u68c0\u67e5\u662f\u5426\u4e3a\u5de5\u5177\u89d2\u8272\n    for _, choice := range event.Response.Choices {\n        if choice.Message.Role == model.RoleTool {\n            return true\n        }\n    }\n\n    return false\n}\n</code></pre>"},{"location":"zh/planner/","title":"Planner \u4f7f\u7528\u6587\u6863","text":"<p><code>Planner</code> \u662f\u7528\u4e8e\u5b9e\u73b0 <code>Agent</code> \u89c4\u5212\u80fd\u529b\u7684\u7ec4\u4ef6\u3002\u5b83\u5141\u8bb8 <code>Agent</code> \u5728\u6267\u884c\u4efb\u52a1\u524d\u5236\u5b9a\u8ba1\u5212\uff0c\u4ece\u800c\u63d0\u9ad8\u6267\u884c\u6548\u7387\u548c\u51c6\u786e\u6027\u3002</p> <p>\u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u79cd <code>Planner</code> \u5b9e\u73b0\uff0c\u5206\u522b\u9002\u7528\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u6a21\u578b\uff1a</p> <ul> <li><code>BuiltinPlanner</code>\uff1a\u9002\u7528\u4e8e\u652f\u6301\u539f\u751f\u601d\u8003\u529f\u80fd\u7684\u6a21\u578b</li> <li><code>ReActPlanner</code>\uff1a\u9002\u7528\u4e8e\u4e0d\u652f\u6301\u539f\u751f\u601d\u8003\u7684\u6a21\u578b\uff0c\u901a\u8fc7\u6807\u7b7e\u5316\u6307\u4ee4\u5f15\u5bfc\u6a21\u578b\u6309\u56fa\u5b9a\u683c\u5f0f\u8f93\u51fa\uff0c\u63d0\u4f9b\u7ed3\u6784\u5316\u7684\u601d\u8003\u8fc7\u7a0b</li> </ul>"},{"location":"zh/planner/#planner_1","title":"Planner \u63a5\u53e3","text":"<p><code>Planner</code> \u63a5\u53e3\u5b9a\u4e49\u4e86\u6240\u6709\u89c4\u5212\u5668\u5fc5\u987b\u5b9e\u73b0\u7684\u65b9\u6cd5\uff1a</p> <pre><code>type Planner interface {\n    // BuildPlanningInstruction \u5e94\u7528\u5fc5\u8981\u7684\u914d\u7f6e\u5230 LLM \u8bf7\u6c42\uff0c\u5e76\u6784\u5efa\u8981\u9644\u52a0\u7684\u7cfb\u7edf\u6307\u4ee4\u7528\u4e8e\u89c4\u5212\n    // \u5982\u679c\u4e0d\u9700\u8981\u6307\u4ee4\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n    BuildPlanningInstruction(\n        ctx context.Context,\n        invocation *agent.Invocation,\n        llmRequest *model.Request,\n    ) string\n\n    // ProcessPlanningResponse \u5904\u7406 LLM \u7684\u89c4\u5212\u54cd\u5e94\uff0c\u8fd4\u56de\u5904\u7406\u540e\u7684\u54cd\u5e94\n    // \u5982\u679c\u4e0d\u9700\u8981\u5904\u7406\u5219\u8fd4\u56de nil\n    ProcessPlanningResponse(\n        ctx context.Context,\n        invocation *agent.Invocation,\n        response *model.Response,\n    ) *model.Response\n}\n</code></pre> <p><code>Planner</code> \u7684\u5de5\u4f5c\u6d41\u7a0b\uff1a</p> <ol> <li>\u8bf7\u6c42\u5904\u7406\u9636\u6bb5\uff1a<code>Planner</code> \u5728 LLM \u8bf7\u6c42\u53d1\u9001\u524d\u901a\u8fc7 <code>BuildPlanningInstruction</code> \u6dfb\u52a0\u89c4\u5212\u6307\u4ee4\u6216\u914d\u7f6e</li> <li>\u54cd\u5e94\u5904\u7406\u9636\u6bb5\uff1a<code>Planner</code> \u5904\u7406 LLM \u54cd\u5e94\uff0c\u901a\u8fc7 <code>ProcessPlanningResponse</code> \u7ec4\u7ec7\u5185\u5bb9\u7ed3\u6784</li> </ol>"},{"location":"zh/planner/#builtinplanner","title":"BuiltinPlanner","text":"<p><code>BuiltinPlanner</code> \u9002\u7528\u4e8e\u652f\u6301\u539f\u751f\u601d\u8003\u529f\u80fd\u7684\u6a21\u578b\u3002\u5b83\u4e0d\u751f\u6210\u663e\u5f0f\u7684\u89c4\u5212\u6307\u4ee4\uff0c\u800c\u662f\u901a\u8fc7\u914d\u7f6e\u6a21\u578b\u4f7f\u7528\u5176\u5185\u90e8\u7684\u601d\u8003\u673a\u5236\u6765\u5b9e\u73b0\u89c4\u5212\u529f\u80fd\u3002</p> <p>\u6a21\u578b\u914d\u7f6e\u5982\u4e0b\uff1a</p> <pre><code>type Options struct {\n    // ReasoningEffort \u9650\u5236\u63a8\u7406\u6a21\u578b\u7684\u63a8\u7406\u7a0b\u5ea6\n    // \u652f\u6301\u7684\u503c\uff1a\"low\", \"medium\", \"high\"\n    // \u4ec5\u5bf9 OpenAI o-series \u6a21\u578b\u6709\u6548\n    ReasoningEffort *string\n    // ThinkingEnabled \u4e3a\u652f\u6301\u601d\u8003\u7684\u6a21\u578b\u542f\u7528\u601d\u8003\u6a21\u5f0f\n    // \u4ec5\u5bf9\u901a\u8fc7 OpenAI API \u7684 Claude \u548c Gemini \u6a21\u578b\u6709\u6548\n    ThinkingEnabled *bool\n    // ThinkingTokens \u63a7\u5236\u601d\u8003\u7684\u957f\u5ea6\n    // \u4ec5\u5bf9\u901a\u8fc7 OpenAI API \u7684 Claude \u548c Gemini \u6a21\u578b\u6709\u6548\n    ThinkingTokens *int\n}\n</code></pre> <p>\u5728\u5b9e\u73b0\u4e0a\uff0cBuiltinPlanner \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5de5\u4f5c\uff1a</p> <ul> <li><code>BuildPlanningInstruction</code>\uff1a\u5c06\u601d\u8003\u53c2\u6570\u914d\u7f6e\u5230 LLM \u8bf7\u6c42\u4e2d\uff1b\u7531\u4e8e\u6a21\u578b\u652f\u6301\u539f\u751f\u601d\u8003\uff0c\u4e0d\u9700\u8981\u89c4\u5212\u6807\u7b7e\uff0c\u56e0\u6b64\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32</li> <li><code>ProcessPlanningResponse</code>\uff1a\u7531\u4e8e\u6a21\u578b\u5728\u54cd\u5e94\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u89c4\u5212\u8fc7\u7a0b\uff0c\u56e0\u6b64\u76f4\u63a5\u8fd4\u56de nil</li> </ul> <p>\u793a\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/planner/builtin\"\n)\n\n// \u521b\u5efa\u6a21\u578b\u5b9e\u4f8b\nmodelInstance := openai.New(\"gpt-4o-mini\")\n\n// \u521b\u5efa BuiltinPlanner\nreasoningEffort := \"high\"\nplanner := builtin.New(builtin.Options{\n    ReasoningEffort: &amp;reasoningEffort,\n})\n\n// \u521b\u5efa LLMAgent \u5e76\u914d\u7f6e Planner\nllmAgent := llmagent.New(\n    \"demo-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"A helpful AI assistant with built-in planning\"),\n    llmagent.WithInstruction(\"Be helpful and think through problems carefully\"),\n    llmagent.WithPlanner(planner), // \u914d\u7f6e Planner\n)\n</code></pre>"},{"location":"zh/planner/#reactplanner","title":"ReActPlanner","text":"<p><code>ReActPlanner</code> \u9002\u7528\u4e8e\u4e0d\u652f\u6301\u539f\u751f\u601d\u8003\u7684\u6a21\u578b\u3002\u5b83\u901a\u8fc7\u5f15\u5bfc LLM \u9075\u5faa\u7279\u5b9a\u7684\u683c\u5f0f\uff0c\u4f7f\u7528\u7279\u5b9a\u6807\u7b7e\u6765\u7ec4\u7ec7\u89c4\u5212\u3001\u63a8\u7406\u3001\u884c\u52a8\u548c\u6700\u7ec8\u7b54\u6848\uff0c\u4ece\u800c\u5b9e\u73b0\u7ed3\u6784\u5316\u7684\u601d\u8003\u8fc7\u7a0b\u3002</p> <p>ReActPlanner \u4f7f\u7528\u4ee5\u4e0b\u7279\u5b9a\u6807\u7b7e\u6765\u7ec4\u7ec7\u54cd\u5e94\u5185\u5bb9\uff1a</p> <ol> <li>\u89c4\u5212\u9636\u6bb5\uff08<code>/*PLANNING*/</code>\uff09\uff1a\u521b\u5efa\u660e\u786e\u7684\u8ba1\u5212\u6765\u56de\u7b54\u7528\u6237\u95ee\u9898</li> <li>\u63a8\u7406\u9636\u6bb5\uff08<code>/*REASONING*/</code>\uff09\uff1a\u5728\u5de5\u5177\u6267\u884c\u4e4b\u95f4\u63d0\u4f9b\u63a8\u7406</li> <li>\u884c\u52a8\u9636\u6bb5\uff08<code>/*ACTION*/</code>\uff09\uff1a\u6839\u636e\u8ba1\u5212\u6267\u884c\u5de5\u5177</li> <li>\u91cd\u65b0\u89c4\u5212\uff08<code>/*REPLANNING*/</code>\uff09\uff1a\u6839\u636e\u7ed3\u679c\u9700\u8981\u65f6\u4fee\u8ba2\u8ba1\u5212</li> <li>\u6700\u7ec8\u7b54\u6848\uff08<code>/*FINAL_ANSWER*/</code>\uff09\uff1a\u63d0\u4f9b\u7efc\u5408\u7b54\u6848</li> </ol> <p>\u5728\u5b9e\u73b0\u4e0a\uff0c<code>ReActPlanner</code> \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5de5\u4f5c\uff1a</p> <ul> <li><code>BuildPlanningInstruction</code>\uff1a\u8fd4\u56de\u5305\u542b\u9ad8\u5c42\u6b21\u6307\u5bfc\u3001\u89c4\u5212\u8981\u6c42\u3001\u63a8\u7406\u8981\u6c42\u7b49\u7684\u7efc\u5408\u6307\u4ee4\uff0c\u5f15\u5bfc\u6a21\u578b\u6309\u6807\u7b7e\u683c\u5f0f\u8f93\u51fa</li> <li><code>ProcessPlanningResponse</code>\uff1a\u8fc7\u6ee4\u7a7a\u540d\u79f0\u7684\u5de5\u5177\u8c03\u7528\uff0c\u5982\u679c\u5185\u5bb9\u5305\u542b <code>/*FINAL_ANSWER*/</code> \u6807\u7b7e\u5219\u53ea\u4fdd\u7559\u6700\u7ec8\u7b54\u6848\u90e8\u5206\uff0c\u5426\u5219\u8fd4\u56de\u539f\u5185\u5bb9\uff0c\u5c06\u89c4\u5212\u5185\u5bb9\u4e0e\u6700\u7ec8\u7b54\u6848\u5206\u79bb</li> </ul> <p>\u4f7f\u7528\u793a\u4f8b\uff1a</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/planner/react\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\n// \u521b\u5efa\u6a21\u578b\u5b9e\u4f8b\nmodelInstance := openai.New(\"gpt-4o-mini\")\n\n// \u521b\u5efa\u5de5\u5177\nsearchTool := function.NewFunctionTool(\n    searchFunction,\n    function.WithName(\"search\"),\n    function.WithDescription(\"Search for information on a given topic\"),\n)\n\n// \u521b\u5efa ReActPlanner\nplanner := react.New()\n\n// \u521b\u5efa LLMAgent \u5e76\u914d\u7f6e Planner\nllmAgent := llmagent.New(\n    \"react-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"An AI assistant that uses structured planning\"),\n    llmagent.WithInstruction(\"Follow a structured approach to solve problems\"),\n    llmagent.WithPlanner(planner), // \u914d\u7f6e Planner\n    llmagent.WithTools([]tool.Tool{searchTool}), // \u914d\u7f6e\u5de5\u5177\n)\n</code></pre> <p>\u5b8c\u6574\u4ee3\u7801\u793a\u4f8b\u53ef\u53c2\u8003 examples/react</p>"},{"location":"zh/planner/#planner_2","title":"\u81ea\u5b9a\u4e49 Planner","text":"<p>\u9664\u4e86\u6846\u67b6\u63d0\u4f9b\u7684\u4e24\u79cd <code>Planner</code> \u5b9e\u73b0\uff0c\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0 <code>Planner</code> \u63a5\u53e3\u6765\u521b\u5efa\u81ea\u5b9a\u4e49\u7684 <code>Planner</code>\uff0c\u4ee5\u6ee1\u8db3\u7279\u5b9a\u9700\u6c42\uff1a</p> <pre><code>type customPlanner struct {\n    // \u81ea\u5b9a\u4e49\u914d\u7f6e\n}\n\nfunc (p *customPlanner) BuildPlanningInstruction(\n    ctx context.Context,\n    invocation *agent.Invocation,\n    llmRequest *model.Request,\n) string {\n    // \u8fd4\u56de\u81ea\u5b9a\u4e49\u7684\u89c4\u5212\u6307\u4ee4\n    return \"\u4f60\u7684\u81ea\u5b9a\u4e49\u89c4\u5212\u6307\u4ee4\"\n}\n\nfunc (p *customPlanner) ProcessPlanningResponse(\n    ctx context.Context,\n    invocation *agent.Invocation,\n    response *model.Response,\n) *model.Response {\n    // \u5904\u7406\u54cd\u5e94\n    return response\n}\n\n// \u521b\u5efa LLMAgent \u5e76\u914d\u7f6e\u81ea\u5b9a\u4e49 Planner\nllmAgent := llmagent.New(\n    \"react-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"An AI assistant that uses structured planning\"),\n    llmagent.WithInstruction(\"Follow a structured approach to solve problems\"),\n    llmagent.WithPlanner(&amp;customPlanner{}),      // \u914d\u7f6e Planner\n    llmagent.WithTools([]tool.Tool{searchTool}), // \u914d\u7f6e\u5de5\u5177\n)\n</code></pre>"}]}