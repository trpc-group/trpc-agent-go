{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"tRPC-Agent-Go: Empowering Go Developers to Build Intelligent AI Applications","text":""},{"location":"#1-project-introduction","title":"1. Project Introduction","text":"<p>The tRPC team previously open-sourced the A2A development framework tRPC-A2A-Go and MCP development framework tRPC-MCP-Go. Especially tRPC-A2A-Go has gained many users and contributors both domestically and internationally. Now we are launching the tRPC-Agent-Go development framework to complete the Go language AI ecosystem development framework.</p> <p>Most mainstream Agent frameworks (AutoGen, CrewAI, Agno, ADK, etc.) are Python-based, while Go has natural advantages in microservices, concurrency, and deployment. Go also has large-scale applications within Tencent, and there are relatively few Agent frameworks based on Go in the industry. Most are orchestrated workflow frameworks, lacking true \"decentralized, collaborative, emergent\" autonomous multi-Agent capabilities. tRPC-Agent-Go directly leverages Go's high concurrency and tRPC ecosystem to bring LLM reasoning, negotiation, and adaptability to Go scenarios, meeting complex business requirements for both \"intelligence + performance\".</p>"},{"location":"#2-architecture-design","title":"2. Architecture Design","text":"<p>tRPC-Agent-Go adopts a modular architecture design, consisting of multiple core components that are all pluggable. Component communication is decoupled through an event-driven mechanism, supporting callback insertion for custom logic:</p> <ul> <li>Agent: Core execution unit, responsible for processing user input and generating responses</li> <li>Runner: Agent executor, responsible for managing execution flow and connecting Session/Memory Service capabilities</li> <li>Model: Supports multiple LLM models (OpenAI, DeepSeek, etc.)</li> <li>Tool: Provides various tool capabilities (Function, MCP, DuckDuckGo, etc.)</li> <li>Session: Manages user session state and events</li> <li>Memory: Records user long-term memory and personalized information</li> <li>Knowledge: Implements RAG knowledge retrieval capabilities</li> <li>Planner: Provides Agent planning and reasoning capabilities</li> </ul> <p>Below is the architecture diagram of each component:</p> <p></p> <p>Below shows a complete timing diagram of a user and Agent conversation:</p> <p></p>"},{"location":"#3-core-features","title":"3. Core Features","text":"<p>Diverse Agent System</p> <ul> <li>LLMAgent: Based on large language models, supports tool calling and reasoning</li> <li>ChainAgent: Chain execution, supports multi-step task decomposition</li> <li>ParallelAgent: Parallel processing, supports multi-expert collaboration</li> <li>CycleAgent: Iterative loops, supports self-optimization</li> <li>GraphAgent: Graph workflow, compatible with existing orchestration habits</li> </ul> <p>Rich Tool Ecosystem</p> <ul> <li>Built-in common tools</li> <li>Supports multiple extension methods like Function, MCP protocol</li> <li>Flexible tool combination and calling strategies</li> </ul> <p>Intelligent Session Management</p> <ul> <li>Supports Redis and in-memory storage for session persistence</li> <li>Long-term memory and personalized information retention</li> <li>RAG retrieval-augmented generation capabilities</li> <li>Real-time event-driven architecture</li> </ul> <p>End-to-End Observability</p> <ul> <li>OpenTelemetry full-link tracing and performance monitoring</li> <li>Visual debugging interface and real-time monitoring</li> <li>Structured logging and error tracking</li> </ul>"},{"location":"#4-quick-start","title":"4. Quick Start","text":""},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\nfunc main() {\n    // Create model.\n    modelInstance := openai.New(\"deepseek-chat\")\n\n    // Create tool.\n    calculatorTool := function.NewFunctionTool(\n        calculator,\n        function.WithName(\"calculator\"),\n        function.WithDescription(\"Execute addition, subtraction, multiplication, and division. \"+\n            \"Parameters: a, b are numeric values, op takes values add/sub/mul/div; \"+\n            \"returns result as the calculation result.\"),\n    )\n\n    // Enable streaming output.\n    genConfig := model.GenerationConfig{\n        Stream: true,\n    }\n\n    // Create Agent.\n    agent := llmagent.New(\"assistant\",\n        llmagent.WithModel(modelInstance),\n        llmagent.WithTools([]tool.Tool{calculatorTool}),\n        llmagent.WithGenerationConfig(genConfig),\n    )\n\n    // Create Runner.\n    runner := runner.NewRunner(\"calculator-app\", agent)\n\n    // Execute conversation.\n    ctx := context.Background()\n    events, err := runner.Run(ctx,\n        \"user-001\",\n        \"session-001\",\n        model.NewUserMessage(\"Calculate what 2+3 equals\"),\n    )\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Process event stream.\n    for event := range events {\n        if event.Object == \"chat.completion.chunk\" {\n            fmt.Print(event.Choices[0].Delta.Content)\n        }\n    }\n    fmt.Println()\n}\n\nfunc calculator(ctx context.Context, req calculatorReq) (calculatorRsp, error) {\n    var result float64\n    switch req.Op {\n    case \"add\", \"+\":\n        result = req.A + req.B\n    case \"sub\", \"-\":\n        result = req.A - req.B\n    case \"mul\", \"*\":\n        result = req.A * req.B\n    case \"div\", \"/\":\n        result = req.A / req.B\n    }\n    return calculatorRsp{Result: result}, nil\n}\n\ntype calculatorReq struct {\n    A  float64 `json:\"a\"`\n    B  float64 `json:\"b\"`\n    Op string  `json:\"op\"`\n}\n\ntype calculatorRsp struct {\n    Result float64 `json:\"result\"`\n}\n</code></pre>"},{"location":"#multi-agent-collaboration-example","title":"Multi-Agent Collaboration Example","text":"<pre><code>// Create chain Agent.\nchainAgent := chainagent.New(\"problem-solver\",\n    chainagent.WithSubAgents([]agent.Agent{\n        analysisAgent,   // Analysis Agent.\n        executionAgent,  // Execution Agent.\n    }))\n\n// Use Runner to execute.\nrunner := runner.NewRunner(\"multi-agent-app\", chainAgent)\nevents, _ := runner.Run(ctx, userID, sessionID, message)\n</code></pre>"},{"location":"#5-acknowledgments","title":"5. Acknowledgments","text":"<p>Thanks to Tencent internal businesses such as Tencent Yuanbao, Tencent Video, Tencent News, IMA, QQ Music, and other businesses for their support. Business scenario refinement is the best validation for the framework.</p> <p>Thanks to excellent open-source frameworks like ADK, Agno, CrewAI, AutoGen, etc., for their inspiration, providing ideas for tRPC-Agent-Go development.</p>"},{"location":"#6-project-address","title":"6. Project Address","text":"<p>GitHub: tRPC-Agent-Go</p>"},{"location":"a2a/","title":"tRPC-Agent-Go A2A Integration Guide","text":""},{"location":"a2a/#overview","title":"Overview","text":"<p>tRPC-Agent-Go provides a complete A2A (Agent-to-Agent) solution with two core components:</p> <ul> <li>A2A Server: Exposes local Agents as A2A services for other Agents to call</li> <li>A2AAgent: A client proxy for calling remote A2A services, allowing you to use remote Agents as if they were local</li> </ul>"},{"location":"a2a/#core-capabilities","title":"Core Capabilities","text":"<ul> <li>Zero Protocol Awareness: Developers only need to focus on Agent business logic without understanding A2A protocol details</li> <li>Automatic Adaptation: The framework automatically converts Agent information to A2A AgentCard</li> <li>Message Conversion: Automatically handles conversion between A2A protocol messages and Agent message formats</li> </ul>"},{"location":"a2a/#a2a-server-exposing-agents-as-services","title":"A2A Server: Exposing Agents as Services","text":""},{"location":"a2a/#concept-introduction","title":"Concept Introduction","text":"<p>A2A Server is a server-side component provided by tRPC-Agent-Go for quickly converting any local Agent into a network service that complies with the A2A protocol.</p>"},{"location":"a2a/#core-features","title":"Core Features","text":"<ul> <li>One-Click Conversion: Expose Agents as A2A services through simple configuration</li> <li>Automatic Protocol Adaptation: Automatically handles conversion between A2A protocol and Agent interfaces</li> <li>AgentCard Generation: Automatically generates AgentCards required for service discovery</li> <li>Streaming Support: Supports both streaming and non-streaming response modes</li> </ul>"},{"location":"a2a/#automatic-conversion-from-agent-to-a2a","title":"Automatic Conversion from Agent to A2A","text":"<p>tRPC-Agent-Go implements seamless conversion from Agent to A2A service through the <code>server/a2a</code> package:</p> <pre><code>func New(opts ...Option) (*a2a.A2AServer, error) {}\n</code></pre>"},{"location":"a2a/#automatic-agentcard-generation","title":"Automatic AgentCard Generation","text":"<p>The framework automatically extracts Agent metadata (name, description, tools, etc.) to generate an AgentCard that complies with the A2A protocol, including: - Basic Agent information (name, description, URL) - Capability declarations (streaming support) - Skill lists (automatically generated based on Agent tools)</p>"},{"location":"a2a/#message-protocol-conversion","title":"Message Protocol Conversion","text":"<p>The framework includes a built-in <code>messageProcessor</code> that implements bidirectional conversion between A2A protocol messages and Agent message formats, so users don't need to worry about message format conversion details.</p>"},{"location":"a2a/#a2a-server-quick-start","title":"A2A Server Quick Start","text":""},{"location":"a2a/#exposing-agent-services-with-a2a-server","title":"Exposing Agent Services with A2A Server","text":"<p>With just a few lines of code, you can convert any Agent into an A2A service:</p>"},{"location":"a2a/#basic-example-creating-a2a-server","title":"Basic Example: Creating A2A Server","text":"<pre><code>package main\n\nimport (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    a2aserver \"trpc.group/trpc-go/trpc-agent-go/server/a2a\"\n)\n\nfunc main() {\n    // 1. Create a regular Agent\n    model := openai.New(\"gpt-4o-mini\")\n    agent := llmagent.New(\"MyAgent\",\n        llmagent.WithModel(model),\n        llmagent.WithDescription(\"An intelligent assistant\"),\n    )\n\n    // 2. Convert to A2A service with one click\n    server, _ := a2aserver.New(\n        a2aserver.WithHost(\"localhost:8080\"),\n        a2aserver.WithAgent(agent), // Pass in any Agent\n    )\n\n    // 3. Start the service to accept A2A requests\n    server.Start(\":8080\")\n}\n</code></pre>"},{"location":"a2a/#direct-a2a-protocol-client-call","title":"Direct A2A Protocol Client Call","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-a2a-go/client\"\n    \"trpc.group/trpc-go/trpc-a2a-go/protocol\"\n)\n\nfunc main() {\n    // Connect to A2A service\n    client, _ := client.NewA2AClient(\"http://localhost:8080/\")\n\n    // Send message to Agent\n    message := protocol.NewMessage(\n        protocol.MessageRoleUser,\n        []protocol.Part{protocol.NewTextPart(\"Hello, please help me analyze this code\")},\n    )\n\n    // Agent will automatically process and return results\n    response, _ := client.SendMessage(context.Background(),\n        protocol.SendMessageParams{Message: message})\n}\n</code></pre>"},{"location":"a2a/#a2aagent-calling-remote-a2a-services","title":"A2AAgent: Calling Remote A2A Services","text":"<p>Corresponding to A2A Server, tRPC-Agent-Go also provides <code>A2AAgent</code> for calling remote A2A services, enabling communication between Agents.</p>"},{"location":"a2a/#concept-introduction_1","title":"Concept Introduction","text":"<p><code>A2AAgent</code> is a special Agent implementation that doesn't directly handle user requests but forwards them to remote A2A services. From the user's perspective, <code>A2AAgent</code> looks like a regular Agent, but it's actually a local proxy for a remote Agent.</p> <p>Simple Understanding: - A2A Server: I have an Agent and want others to call it \u2192 Expose as A2A service - A2AAgent: I want to call someone else's Agent \u2192 Call through A2AAgent proxy</p>"},{"location":"a2a/#core-features_1","title":"Core Features","text":"<ul> <li>Transparent Proxy: Use remote Agents as if they were local Agents</li> <li>Automatic Discovery: Automatically discover remote Agent capabilities through AgentCard</li> <li>Protocol Conversion: Automatically handle conversion between local message formats and A2A protocol</li> <li>Streaming Support: Support both streaming and non-streaming communication modes</li> <li>State Transfer: Support transferring local state to remote Agents</li> <li>Error Handling: Comprehensive error handling and retry mechanisms</li> </ul>"},{"location":"a2a/#use-cases","title":"Use Cases","text":"<ol> <li>Distributed Agent Systems: Call Agents from other services in microservice architectures</li> <li>Agent Orchestration: Combine multiple specialized Agents into complex workflows</li> <li>Cross-Team Collaboration: Call Agent services provided by other teams</li> </ol>"},{"location":"a2a/#a2aagent-quick-start","title":"A2AAgent Quick Start","text":""},{"location":"a2a/#basic-usage","title":"Basic Usage","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/a2aagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n)\n\nfunc main() {\n    // 1. Create A2AAgent pointing to remote A2A service\n    a2aAgent, err := a2aagent.New(\n        a2aagent.WithAgentCardURL(\"http://localhost:8888\"),\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    // 2. Use it like a regular Agent\n    sessionService := inmemory.NewSessionService()\n    runner := runner.NewRunner(\"test\", a2aAgent, \n        runner.WithSessionService(sessionService))\n\n    // 3. Send message\n    events, err := runner.Run(\n        context.Background(),\n        \"user1\",\n        \"session1\", \n        model.NewUserMessage(\"Please tell me a joke\"),\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    // 4. Handle response\n    for event := range events {\n        if event.Response != nil &amp;&amp; len(event.Response.Choices) &gt; 0 {\n            fmt.Print(event.Response.Choices[0].Message.Content)\n        }\n    }\n}\n</code></pre>"},{"location":"a2a/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>// Create A2AAgent with advanced configuration\na2aAgent, err := a2aagent.New(\n    // Specify remote service address\n    a2aagent.WithAgentCardURL(\"http://remote-agent:8888\"),\n\n    // Set streaming buffer size\n    a2aagent.WithStreamingChannelBufSize(2048),\n\n    // Custom protocol conversion\n    a2aagent.WithCustomEventConverter(customEventConverter),\n\n    a2aagent.WithCustomA2AConverter(customA2AConverter),\n)\n</code></pre>"},{"location":"a2a/#complete-example-a2a-server-a2aagent-combined-usage","title":"Complete Example: A2A Server + A2AAgent Combined Usage","text":"<p>Here's a complete example showing how to run both A2A Server (exposing local Agent) and A2AAgent (calling remote service) in the same program:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/a2aagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/server/a2a\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n)\n\nfunc main() {\n    // 1. Create and start remote Agent service\n    remoteAgent := createRemoteAgent()\n    startA2AServer(remoteAgent, \"localhost:8888\")\n\n    time.Sleep(1 * time.Second) // Wait for service to start\n\n    // 2. Create A2AAgent connecting to remote service\n    a2aAgent, err := a2aagent.New(\n        a2aagent.WithAgentCardURL(\"http://localhost:8888\"),\n        a2aagent.WithTransferStateKey(\"user_context\"),\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    // 3. Create local Agent\n    localAgent := createLocalAgent()\n\n    // 4. Compare local and remote Agent responses\n    compareAgents(localAgent, a2aAgent)\n}\n\nfunc createRemoteAgent() agent.Agent {\n    model := openai.New(\"gpt-4o-mini\")\n    return llmagent.New(\"JokeAgent\",\n        llmagent.WithModel(model),\n        llmagent.WithDescription(\"I am a joke-telling agent\"),\n        llmagent.WithInstruction(\"Always respond with a funny joke\"),\n    )\n}\n\nfunc createLocalAgent() agent.Agent {\n    model := openai.New(\"gpt-4o-mini\") \n    return llmagent.New(\"LocalAgent\",\n        llmagent.WithModel(model),\n        llmagent.WithDescription(\"I am a local assistant\"),\n    )\n}\n\nfunc startA2AServer(agent agent.Agent, host string) {\n    server, err := a2a.New(\n        a2a.WithHost(host),\n        a2a.WithAgent(agent, true), // Enable streaming\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    go func() {\n        server.Start(host)\n    }()\n}\n\nfunc compareAgents(localAgent, remoteAgent agent.Agent) {\n    sessionService := inmemory.NewSessionService()\n\n    localRunner := runner.NewRunner(\"local\", localAgent,\n        runner.WithSessionService(sessionService))\n    remoteRunner := runner.NewRunner(\"remote\", remoteAgent,\n        runner.WithSessionService(sessionService))\n\n    userMessage := \"Please tell me a joke\"\n\n    // Call local Agent\n    fmt.Println(\"=== Local Agent Response ===\")\n    processAgent(localRunner, userMessage)\n\n    // Call remote Agent (via A2AAgent)\n    fmt.Println(\"\\n=== Remote Agent Response (via A2AAgent) ===\")\n    processAgent(remoteRunner, userMessage)\n}\n\nfunc processAgent(runner runner.Runner, message string) {\n    events, err := runner.Run(\n        context.Background(),\n        \"user1\",\n        \"session1\",\n        model.NewUserMessage(message),\n        agent.WithRuntimeState(map[string]any{\n            \"user_context\": \"test_context\",\n        }),\n    )\n    if err != nil {\n        fmt.Printf(\"Error: %v\\n\", err)\n        return\n    }\n\n    for event := range events {\n        if event.Response != nil &amp;&amp; len(event.Response.Choices) &gt; 0 {\n            content := event.Response.Choices[0].Message.Content\n            if content == \"\" {\n                content = event.Response.Choices[0].Delta.Content\n            }\n            if content != \"\" {\n                fmt.Print(content)\n            }\n        }\n    }\n    fmt.Println()\n}\n</code></pre>"},{"location":"a2a/#agentcard-automatic-discovery","title":"AgentCard Automatic Discovery","text":"<p><code>A2AAgent</code> supports automatically obtaining remote Agent information through the standard AgentCard discovery mechanism:</p> <pre><code>// A2AAgent automatically retrieves AgentCard from the following path\n// http://remote-agent:8888/.well-known/agent.json\n\ntype AgentCard struct {\n    Name         string                 `json:\"name\"`\n    Description  string                 `json:\"description\"`\n    URL          string                 `json:\"url\"`\n    Capabilities AgentCardCapabilities  `json:\"capabilities\"`\n}\n\ntype AgentCardCapabilities struct {\n    Streaming *bool `json:\"streaming,omitempty\"`\n}\n</code></pre>"},{"location":"a2a/#state-transfer","title":"State Transfer","text":"<p><code>A2AAgent</code> supports transferring local runtime state to remote Agents:</p> <pre><code>a2aAgent, _ := a2aagent.New(\n    a2aagent.WithAgentCardURL(\"http://remote-agent:8888\"),\n    // Specify state keys to transfer\n    a2aagent.WithTransferStateKey(\"user_id\", \"session_context\", \"preferences\"),\n)\n\n// Runtime state is passed to remote Agent through A2A protocol metadata field\nevents, _ := runner.Run(ctx, userID, sessionID, message,\n    agent.WithRuntimeState(map[string]any{\n        \"user_id\":         \"12345\",\n        \"session_context\": \"shopping_cart\",\n        \"preferences\":     map[string]string{\"language\": \"en\"},\n    }),\n)\n</code></pre>"},{"location":"a2a/#custom-converters","title":"Custom Converters","text":"<p>For special requirements, you can customize message and event converters:</p> <pre><code>// Custom A2A message converter\ntype CustomA2AConverter struct{}\n\nfunc (c *CustomA2AConverter) ConvertToA2AMessage(\n    isStream bool, \n    agentName string, \n    invocation *agent.Invocation,\n) (*protocol.Message, error) {\n    // Custom message conversion logic\n    return &amp;protocol.Message{\n        MessageID: invocation.InvocationID,\n        Role:      protocol.MessageRoleUser,\n        Parts:     []protocol.Part{/* custom content */},\n    }, nil\n}\n\n// Custom event converter  \ntype CustomEventConverter struct{}\n\nfunc (c *CustomEventConverter) ConvertToEvent(\n    result protocol.MessageResult,\n    agentName string,\n    invocation *agent.Invocation,\n) (*event.Event, error) {\n    // Custom event conversion logic\n    return event.New(invocation.InvocationID, agentName), nil\n}\n\n// Use custom converters\na2aAgent, _ := a2aagent.New(\n    a2aagent.WithAgentCardURL(\"http://remote-agent:8888\"),\n    a2aagent.WithA2AMessageConverter(&amp;CustomA2AConverter{}),\n    a2aagent.WithEventConverter(&amp;CustomEventConverter{}),\n)\n</code></pre>"},{"location":"a2a/#summary-a2a-server-vs-a2aagent","title":"Summary: A2A Server vs A2AAgent","text":"Component Role Use Case Core Functions A2A Server Service Provider Expose local Agent for other systems to call \u2022 Protocol conversion\u2022 AgentCard generation\u2022 Message routing\u2022 Streaming support A2AAgent Service Consumer Call remote A2A services \u2022 Transparent proxy\u2022 Automatic discovery\u2022 State transfer\u2022 Protocol adaptation"},{"location":"a2a/#typical-architecture-pattern","title":"Typical Architecture Pattern","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 A2A protocol  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Client    \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2502 A2A Server    \u2502\n\u2502 (A2AAgent)  \u2502               \u2502 (local Agent) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2191                              \u2191\n      \u2502                              \u2502\n   Call remote                   Expose local\n   Agent service                 Agent service\n</code></pre> <p>Through the combined use of A2A Server and A2AAgent, you can easily build distributed Agent systems.</p>"},{"location":"agent/","title":"Agent Usage Documentation","text":"<p>Agent is the core execution unit of the tRPC-Agent-Go framework, responsible for processing user input and generating corresponding responses. Each Agent implements a unified interface, supporting streaming output and callback mechanisms.</p> <p>The framework provides multiple types of Agents, including LLMAgent, ChainAgent, ParallelAgent, CycleAgent, and GraphAgent. This document focuses on LLMAgent. For detailed information about other Agent types and multi-Agent systems, please refer to Multi-Agent.</p>"},{"location":"agent/#quick-start","title":"Quick Start","text":"<p>Recommended Usage: Runner</p> <p>We strongly recommend using Runner to execute Agents instead of directly calling Agent interfaces. Runner provides a more user-friendly interface, integrating services like Session and Memory, making usage much simpler.</p> <p>\ud83d\udcd6 Learn More: For detailed usage methods, please refer to Runner</p> <p>This example uses OpenAI's GPT-4o-mini model. Before starting, please ensure you have prepared the corresponding <code>OPENAI_API_KEY</code> and exported it through environment variables:</p> <pre><code>export OPENAI_API_KEY=\"your_api_key\"\n</code></pre> <p>Additionally, the framework supports OpenAI API-compatible models, which can be configured through environment variables:</p> <pre><code>export OPENAI_BASE_URL=\"your_api_base_url\"\nexport OPENAI_API_KEY=\"your_api_key\"\n</code></pre>"},{"location":"agent/#creating-model-instance","title":"Creating Model Instance","text":"<p>First, you need to create a model instance. Here we use OpenAI's GPT-4o-mini model:</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n\nmodelName := flag.String(\"model\", \"gpt-4o-mini\", \"Name of the model to use\")\nflag.Parse()\n// Create OpenAI model instance.\nmodelInstance := openai.New(*modelName, openai.Options{})\n</code></pre>"},{"location":"agent/#configuring-generation-parameters","title":"Configuring Generation Parameters","text":"<p>Set the model's generation parameters, including maximum tokens, temperature, and whether to use streaming output:</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/model\"\n\nmaxTokens := 1000\ntemperature := 0.7\ngenConfig := model.GenerationConfig{\n    MaxTokens:   &amp;maxTokens,   // Maximum number of tokens to generate.\n    Temperature: &amp;temperature, // Temperature parameter, controls output randomness.\n    Stream:      true,         // Enable streaming output.\n}\n</code></pre>"},{"location":"agent/#creating-llmagent","title":"Creating LLMAgent","text":"<p>Use the model instance and configuration to create an LLMAgent, while setting the Agent's Description and Instruction.</p> <p>Description is used to describe the basic functionality and characteristics of the Agent, while Instruction defines the specific instructions and behavioral guidelines that the Agent should follow when executing tasks.</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n\nllmAgent := llmagent.New(\n    \"demo-agent\",                      // Agent name.\n    llmagent.WithModel(modelInstance), // Set model.\n    llmagent.WithDescription(\"A helpful AI assistant for demonstrations\"),              // Set description.\n    llmagent.WithInstruction(\"Be helpful, concise, and informative in your responses\"), // Set instruction.\n    llmagent.WithGenerationConfig(genConfig),                                           // Set generation parameters.\n)\n</code></pre>"},{"location":"agent/#placeholder-variables-session-state-injection","title":"Placeholder Variables (Session State Injection)","text":"<p>LLMAgent automatically injects session state into <code>Instruction</code> and the optional <code>SystemPrompt</code> via placeholder variables. Supported patterns:</p> <ul> <li><code>{key}</code>: Replace with the string value of <code>session.State[\"key\"]</code></li> <li><code>{key?}</code>: Optional; if missing, replaced with an empty string</li> <li><code>{user:subkey}</code> / <code>{app:subkey}</code> / <code>{temp:subkey}</code>: Use user/app/temp scoped keys (session services merge app/user state into session with these prefixes)</li> </ul> <p>Notes:</p> <ul> <li>If a non-optional key is not found, the original <code>{key}</code> is preserved (helps the LLM notice missing context)</li> <li>Values are read from <code>invocation.Session.State</code> (Runner + SessionService set/merge this automatically)</li> </ul> <p>Example:</p> <pre><code>llm := llmagent.New(\n  \"research-agent\",\n  llmagent.WithModel(modelInstance),\n  llmagent.WithInstruction(\n    \"You are a research assistant. Focus: {research_topics}. \" +\n    \"User interests: {user:topics?}. App banner: {app:banner?}.\",\n  ),\n)\n\n// Initialize session state (Runner + SessionService)\n_ = sessionService.UpdateUserState(ctx, session.UserKey{AppName: app, UserID: user}, session.StateMap{\n  \"topics\": []byte(\"quantum computing, cryptography\"),\n})\n_ = sessionService.UpdateAppState(ctx, app, session.StateMap{\n  \"banner\": []byte(\"Research Mode\"),\n})\n// Unprefixed keys live directly in session.State\n_, _ = sessionService.CreateSession(ctx, session.Key{AppName: app, UserID: user, SessionID: sid}, session.StateMap{\n  \"research_topics\": []byte(\"AI, ML, DL\"),\n})\n</code></pre> <p>See also:</p> <ul> <li>Examples: <code>examples/placeholder</code>, <code>examples/outputkey</code></li> <li>Session API: <code>docs/mkdocs/en/session.md</code></li> </ul>"},{"location":"agent/#using-runner-to-execute-agent","title":"Using Runner to Execute Agent","text":"<p>Use Runner to execute the Agent, which is the recommended usage:</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/runner\"\n\n// Create Runner.\nrunner := runner.NewRunner(\"demo-app\", llmAgent)\n\n// Send message directly without creating complex Invocation.\nmessage := model.NewUserMessage(\"Hello! Can you tell me about yourself?\")\neventChan, err := runner.Run(ctx, \"user-001\", \"session-001\", message)\nif err != nil {\n    log.Fatalf(\"Failed to execute Agent: %v\", err)\n}\n</code></pre>"},{"location":"agent/#handling-event-stream","title":"Handling Event Stream","text":"<p>Receive execution results through the event channel:</p> <pre><code>import \"context\"\n\nctx := context.Background()\n// Handle Event.\nfor event := range eventChan {\n    // Check for errors.\n    if event.Error != nil {\n        log.Printf(\"err: %s\", event.Error.Message)\n        continue\n    }\n    // Handle content.\n    if len(event.Choices) &gt; 0 {\n        choice := event.Choices[0]\n        if choice.Delta.Content != \"\" {\n            // Streaming output.\n            fmt.Print(choice.Delta.Content)\n        }\n    }\n    // Check if completed.\n    if event.Done {\n        break\n    }\n}\n</code></pre>"},{"location":"agent/#handling-event-stream_1","title":"Handling Event Stream","text":"<p>Receive execution results through the event channel:</p> <pre><code>// Handle Event.\nfor event := range eventChan {\n    // Check for errors.\n    if event.Error != nil {\n        log.Printf(\"err: %s\", event.Error.Message)\n        continue\n    }\n    // Handle content.\n    if len(event.Choices) &gt; 0 {\n        choice := event.Choices[0]\n        if choice.Delta.Content != \"\" {\n            // Streaming output.\n            fmt.Print(choice.Delta.Content)\n        }\n    }\n    // Check if completed.\n    if event.Done {\n        break\n    }\n}\n</code></pre> <p>The complete code for this example can be found at examples/runner</p> <p>Why is Runner recommended?</p> <ol> <li>Simpler Interface: No need to create complex Invocation objects</li> <li>Integrated Services: Automatically integrates Session, Memory and other services</li> <li>Better Management: Unified management of Agent execution flow</li> <li>Production Ready: Suitable for production environment use</li> </ol> <p>\ud83d\udca1 Tip: Want to learn more about Runner's detailed usage and advanced features? Please check Runner</p> <p>Advanced Usage: Direct Agent Usage</p> <p>If you need more fine-grained control, you can also use the Agent interface directly, but this requires creating Invocation objects:</p>"},{"location":"agent/#core-concepts","title":"Core Concepts","text":""},{"location":"agent/#invocation-advanced-usage","title":"Invocation (Advanced Usage)","text":"<p>Invocation is the context object for Agent execution flow, containing all information needed for a single call. Note: This is advanced usage, we recommend using Runner to simplify operations.</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/agent\"\n\n// Create Invocation object (advanced usage).\ninvocation := agent.NewInvocation(\n    agent.WithAgentName(agent),                                                                  // Agent.\n    agent.WithInvocationMessage(model.NewUserMessage(\"Hello! Can you tell me about yourself?\")), // User message.\n    agent.WithInvocationSession(&amp;session.Session{ID: \"session-001\"}),                            // session object.\n    agent.WithInvocationEndInvocation(false),                                                    // Whether to end invocation.\n    agent.WithInvocationModel(modelInstance),                                                    // Model to use.\n)\n\n// Call Agent directly (advanced usage).\nctx := context.Background()\neventChan, err := llmAgent.Run(ctx, invocation)\nif err != nil {\n    log.Fatalf(\"Failed to execute Agent: %v\", err)\n}\n</code></pre> <p>When to use direct calls?</p> <ul> <li>Need complete control over execution flow</li> <li>Custom Session and Memory management</li> <li>Implement special invocation logic</li> <li>Debugging and testing scenarios</li> </ul> <pre><code>// Invocation is the context object for Agent execution flow, containing all information needed for a single call.\ntype Invocation struct {\n    // Agent specifies the Agent instance to call.\n    Agent Agent\n    // AgentName identifies the name of the Agent instance to call.\n    AgentName string\n    // InvocationID provides a unique identifier for each call.\n    InvocationID string\n    // Branch is a branch identifier for hierarchical event filtering.\n    Branch string\n    // EndInvocation is a flag indicating whether to end the invocation.\n    EndInvocation bool\n    // Session maintains the context state of the conversation.\n    Session *session.Session\n    // Model specifies the model instance to use.\n    Model model.Model\n    // Message is the specific content sent by the user to the Agent.\n    Message model.Message\n    // RunOptions are option configurations for the Run method.\n    RunOptions RunOptions\n    // TransferInfo supports control transfer between Agents.\n    TransferInfo *TransferInfo\n\n    // notice\n    noticeChanMap map[string]chan any\n    noticeMu      *sync.Mutex\n}\n</code></pre>"},{"location":"agent/#event","title":"Event","text":"<p>Event is the real-time feedback generated during Agent execution, reporting execution progress in real-time through Event streams.</p> <p>Events mainly include the following types:</p> <ul> <li>Model conversation events</li> <li>Tool call and response events</li> <li>Agent transfer events</li> <li>Error events</li> </ul> <pre><code>// Event is the real-time feedback generated during Agent execution, reporting execution progress in real-time through Event streams.\ntype Event struct {\n    // Response contains model response content, tool call results and statistics.\n    *model.Response\n    // InvocationID is associated with a specific invocation.\n    InvocationID string `json:\"invocationId\"`\n    // Author is the source of the event, such as Agent or tool.\n    Author string `json:\"author\"`\n    // ID is the unique identifier of the event.\n    ID string `json:\"id\"`\n    // Timestamp records the time when the event occurred.\n    Timestamp time.Time `json:\"timestamp\"`\n    // Branch is a branch identifier for hierarchical event filtering.\n    Branch string `json:\"branch,omitempty\"`\n    // RequiresCompletion identifies whether this event requires a completion signal.\n    RequiresCompletion bool `json:\"requiresCompletion,omitempty\"`\n    // LongRunningToolIDs is a set of IDs for long-running function calls. Agent clients can understand which function calls are long-running through this field, only valid for function call events.\n    LongRunningToolIDs map[string]struct{} `json:\"longRunningToolIDs,omitempty\"`\n}\n</code></pre> <p>The streaming nature of Events allows you to see the Agent's working process in real-time, just like having a natural conversation with a real person. You only need to iterate through the Event stream, check the content and status of each Event, and you can completely handle the Agent's execution results.</p>"},{"location":"agent/#agent-interface","title":"Agent Interface","text":"<p>The Agent interface defines the core behaviors that all Agents must implement. This interface allows you to uniformly use different types of Agents while supporting tool calls and sub-Agent management.</p> <pre><code>type Agent interface {\n    // Run receives execution context and invocation information, returns an event channel. Through this channel, you can receive Agent execution progress and results in real-time.\n    Run(ctx context.Context, invocation *Invocation) (&lt;-chan *event.Event, error)\n    // Tools returns the list of tools that this Agent can access and execute.\n    Tools() []tool.Tool\n    // Info method provides basic information about the Agent, including name and description, for easy identification and management.\n    Info() Info\n    // SubAgents returns the list of sub-Agents available to this Agent.\n    // SubAgents and FindSubAgent methods support collaboration between Agents. An Agent can delegate tasks to other Agents, building complex multi-Agent systems.\n    SubAgents() []Agent\n    // FindSubAgent finds sub-Agent by name.\n    FindSubAgent(name string) Agent\n}\n</code></pre> <p>The framework provides multiple types of Agent implementations, including LLMAgent, ChainAgent, ParallelAgent, CycleAgent, and GraphAgent. For detailed information about different types of Agents and multi-Agent systems, please refer to Multi-Agent.</p>"},{"location":"agent/#callbacks","title":"Callbacks","text":"<p>Callbacks provide a rich callback mechanism that allows you to inject custom logic at key points during Agent execution.</p>"},{"location":"agent/#callback-types","title":"Callback Types","text":"<p>The framework provides three types of callbacks:</p> <p>Agent Callbacks: Triggered before and after Agent execution</p> <pre><code>type AgentCallbacks struct {\n    BeforeAgent []BeforeAgentCallback  // Callbacks before Agent runs.\n    AfterAgent  []AfterAgentCallback   // Callbacks after Agent runs.\n}\n</code></pre> <p>Model Callbacks: Triggered before and after model calls</p> <pre><code>type ModelCallbacks struct {\n    BeforeModel []BeforeModelCallback  // Callbacks before model calls.\n    AfterModel  []AfterModelCallback   // Callbacks after model calls.\n}\n</code></pre> <p>Tool Callbacks: Triggered before and after tool calls</p> <pre><code>type ToolCallbacks struct {\n    BeforeTool []BeforeToolCallback  // Callbacks before tool calls.\n    AfterTool []AfterToolCallback    // Callbacks after tool calls.\n}\n</code></pre>"},{"location":"agent/#usage-example","title":"Usage Example","text":"<pre><code>// Create Agent callbacks.\ncallbacks := &amp;agent.AgentCallbacks{\n    BeforeAgent: []agent.BeforeAgentCallback{\n        func(ctx context.Context, invocation *agent.Invocation) (*model.Response, error) {\n            log.Printf(\"Agent %s started execution\", invocation.AgentName)\n            return nil, nil\n        },\n    },\n    AfterAgent: []agent.AfterAgentCallback{\n        func(ctx context.Context, invocation *agent.Invocation, runErr error) (*model.Response, error) {\n            if runErr != nil {\n                log.Printf(\"Agent %s execution error: %v\", invocation.AgentName, runErr)\n            } else {\n                log.Printf(\"Agent %s execution completed\", invocation.AgentName)\n            }\n            return nil, nil\n        },\n    },\n}\n\n// Use callbacks in Invocation.\nllmagent := llmagent.New(\"llmagent\", llmagent.WithAgentCallbacks(callbacks))\n</code></pre> <p>The callback mechanism allows you to precisely control the Agent's execution process and implement more complex business logic.</p>"},{"location":"agent/#advanced-usage","title":"Advanced Usage","text":"<p>The framework provides advanced features like Runner, Session, and Memory for building more complex Agent systems.</p> <p>Runner is the recommended usage, responsible for managing Agent execution flow, connecting Session/Memory Service capabilities, and providing a more user-friendly interface.</p> <p>Session Service is used to manage session state, supporting conversation history and context maintenance.</p> <p>Memory Service is used to record user preference information, supporting personalized experiences.</p> <p>Recommended Reading Order:</p> <ol> <li>Runner - Learn the recommended usage</li> <li>Session - Understand session management</li> <li>Multi-Agent - Learn multi-Agent systems</li> </ol>"},{"location":"artifact/","title":"Artifacts","text":"<p>Artifacts in trpc-agent-go are named, versioned binary data objects that can be linked to user sessions or persistently associated with users across sessions. The artifact system consists of two main components:</p> <ol> <li>Artifacts: The data objects themselves - containing binary content, metadata, and versioning information</li> <li>Artifact Service: The storage and management service that handles saving, retrieving, and organizing artifacts</li> </ol> <p>This system enables agents to store, retrieve, and manage various types of content including images, documents, text files, and other binary data.</p>"},{"location":"artifact/#what-are-artifacts","title":"What are Artifacts?","text":"<p>Artifacts are data containers that hold: - Binary content (images, documents, files, etc.) - Metadata (MIME type, name, URL) - Version information - Association with users and sessions</p>"},{"location":"artifact/#what-is-the-artifact-service","title":"What is the Artifact Service?","text":"<p>The Artifact Service is the backend system that: - Stores and retrieves artifacts - Manages versioning - Handles namespace organization (session vs user scope) - Provides different storage backends (in-memory, cloud storage)</p>"},{"location":"artifact/#system-overview","title":"System Overview","text":"<p>The artifact system provides:</p> <ul> <li>Versioned Storage: Each artifact is automatically versioned, allowing you to track changes over time</li> <li>Session-based Organization: Artifacts can be scoped to specific user sessions</li> <li>User-persistent Storage: Artifacts can be stored persistently for users across sessions using the <code>user:</code> namespace</li> <li>Multiple Storage Backends: Support for in-memory storage (development) and cloud storage (production)</li> <li>MIME Type Support: Proper content type handling for different file formats</li> </ul>"},{"location":"artifact/#core-components","title":"Core Components","text":""},{"location":"artifact/#artifact-data-structure","title":"Artifact Data Structure","text":"<p>An Artifact is the fundamental data object that contains your content:</p> <pre><code>type Artifact struct {\n    // Data contains the raw bytes (required)\n    Data []byte `json:\"data,omitempty\"`\n    // MimeType is the IANA standard MIME type (required)\n    MimeType string `json:\"mime_type,omitempty\"`\n    // URL is the optional URL where the artifact can be accessed\n    URL string `json:\"url,omitempty\"`\n    // Name is an optional display name of the artifact\n    Name string `json:\"name,omitempty\"`\n}\n</code></pre>"},{"location":"artifact/#session-information","title":"Session Information","text":"<pre><code>type SessionInfo struct {\n    // AppName is the name of the application\n    AppName string\n    // UserID is the ID of the user\n    UserID string\n    // SessionID is the ID of the session\n    SessionID string\n}\n</code></pre>"},{"location":"artifact/#artifact-service-backends","title":"Artifact Service Backends","text":"<p>The Artifact Service provides different storage implementations for managing artifacts:</p>"},{"location":"artifact/#in-memory-storage","title":"In-Memory Storage","text":"<p>Perfect for development and testing:</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/artifact/inmemory\"\n\nservice := inmemory.NewService()\n</code></pre>"},{"location":"artifact/#tencent-cloud-object-storage-cos","title":"Tencent Cloud Object Storage (COS)","text":"<p>For production deployments:</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/artifact/cos\"\n\n// Set environment variables\n// export COS_SECRETID=\"your-secret-id\"\n// export COS_SECRETKEY=\"your-secret-key\"\n\nservice := cos.NewService(\"https://bucket.cos.region.myqcloud.com\")\n</code></pre>"},{"location":"artifact/#usage-in-agents","title":"Usage in Agents","text":""},{"location":"artifact/#setup-artifact-service-with-runner","title":"Setup Artifact Service with Runner","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/artifact/inmemory\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n)\n\n// Create artifact service\nartifactService := inmemory.NewService()\n\n// Create runner with artifact service\nr := runner.NewRunner(\n    \"my-app\",\n    myAgent,\n    runner.WithArtifactService(artifactService),\n)\n</code></pre>"},{"location":"artifact/#creating-and-managing-artifacts-in-tools","title":"Creating and Managing Artifacts in Tools","text":"<p>Tools can create artifacts and use the Artifact Service through the tool context:</p> <pre><code>func myTool(ctx context.Context, input MyInput) (MyOutput, error) {\n    // Get tool context\n    toolCtx, err := agent.NewToolContext(ctx)\n    if err != nil {\n        return MyOutput{}, err\n    }\n\n    // Create an artifact\n    artifact := &amp;artifact.Artifact{\n        Data:     []byte(\"Hello, World!\"),\n        MimeType: \"text/plain\",\n        Name:     \"greeting.txt\",\n    }\n\n    // Save the artifact\n    version, err := toolCtx.SaveArtifact(\"greeting.txt\", artifact)\n    if err != nil {\n        return MyOutput{}, err\n    }\n\n    // Load the artifact later\n    loadedArtifact, err := toolCtx.LoadArtifact(\"greeting.txt\", nil) // nil for latest version\n    if err != nil {\n        return MyOutput{}, err\n    }\n\n    return MyOutput{}, nil\n}\n</code></pre>"},{"location":"artifact/#namespace-and-versioning","title":"Namespace and Versioning","text":""},{"location":"artifact/#session-scoped-artifacts","title":"Session-scoped Artifacts","text":"<p>By default, artifacts are scoped to the current session:</p> <pre><code>// This file is only accessible within the current session\nversion, err := toolCtx.SaveArtifact(\"session-file.txt\", artifact)\n</code></pre>"},{"location":"artifact/#user-persistent-artifacts","title":"User-persistent Artifacts","text":"<p>Use the <code>user:</code> prefix to create artifacts that persist across sessions:</p> <pre><code>// This file persists across all sessions for the user\nversion, err := toolCtx.SaveArtifact(\"user:profile.json\", artifact)\n</code></pre>"},{"location":"artifact/#version-management","title":"Version Management","text":"<p>Each save operation creates a new version:</p> <pre><code>// Save version 0\nv0, _ := toolCtx.SaveArtifact(\"document.txt\", artifact1)\n\n// Save version 1\nv1, _ := toolCtx.SaveArtifact(\"document.txt\", artifact2)\n\n// Load specific version\noldVersion := 0\nartifact, _ := toolCtx.LoadArtifact(\"document.txt\", &amp;oldVersion)\n\n// Load latest version\nartifact, _ := toolCtx.LoadArtifact(\"document.txt\", nil)\n</code></pre>"},{"location":"artifact/#artifact-service-interface","title":"Artifact Service Interface","text":"<p>The Artifact Service provides the following operations for managing artifacts:</p> <pre><code>type Service interface {\n    // Save an artifact and return the version ID\n    SaveArtifact(ctx context.Context, sessionInfo SessionInfo, filename string, artifact *Artifact) (int, error)\n\n    // Load an artifact (latest version if version is nil)\n    LoadArtifact(ctx context.Context, sessionInfo SessionInfo, filename string, version *int) (*Artifact, error)\n\n    // List all artifact filenames in a session\n    ListArtifactKeys(ctx context.Context, sessionInfo SessionInfo) ([]string, error)\n\n    // Delete an artifact (all versions)\n    DeleteArtifact(ctx context.Context, sessionInfo SessionInfo, filename string) error\n\n    // List all versions of an artifact\n    ListVersions(ctx context.Context, sessionInfo SessionInfo, filename string) ([]int, error)\n}\n</code></pre>"},{"location":"artifact/#examples","title":"Examples","text":""},{"location":"artifact/#image-generation-and-storage","title":"Image Generation and Storage","text":"<pre><code>// Tool to generate and save images\nfunc generateImageTool(ctx context.Context, input GenerateImageInput) (GenerateImageOutput, error) {\n    // Generate image (implementation details omitted)\n    imageData := generateImage(input.Prompt)\n\n    // Create artifact\n    artifact := &amp;artifact.Artifact{\n        Data:     imageData,\n        MimeType: \"image/png\",\n        Name:     \"generated-image.png\",\n    }\n\n    // Save to artifacts\n    toolCtx, _ := agent.NewToolContext(ctx)\n    version, err := toolCtx.SaveArtifact(\"generated-image.png\", artifact)\n\n    return GenerateImageOutput{\n        ImagePath: \"generated-image.png\",\n        Version:   version,\n    }, err\n}\n</code></pre>"},{"location":"artifact/#text-processing-and-storage","title":"Text Processing and Storage","text":"<pre><code>// Tool to process and save text\nfunc processTextTool(ctx context.Context, input ProcessTextInput) (ProcessTextOutput, error) {\n    // Process the text\n    processedText := strings.ToUpper(input.Text)\n\n    // Create artifact\n    artifact := &amp;artifact.Artifact{\n        Data:     []byte(processedText),\n        MimeType: \"text/plain\",\n        Name:     \"processed-text.txt\",\n    }\n\n    // Save to user namespace for persistence\n    toolCtx, _ := agent.NewToolContext(ctx)\n    version, err := toolCtx.SaveArtifact(\"user:processed-text.txt\", artifact)\n\n    return ProcessTextOutput{\n        ProcessedText: processedText,\n        Version:       version,\n    }, err\n}\n</code></pre>"},{"location":"artifact/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Use Appropriate Namespaces: Use session-scoped artifacts for temporary data and user-persistent artifacts for data that should survive across sessions.</p> </li> <li> <p>Set Proper MIME Types: Always specify the correct MIME type for your artifacts to ensure proper handling.</p> </li> <li> <p>Handle Versions: Consider whether you need to track versions and use the versioning system appropriately.</p> </li> <li> <p>Choose the Right Storage Backend: Use in-memory storage for development and cloud storage for production.</p> </li> <li> <p>Error Handling: Always handle errors when saving and loading artifacts, as storage operations can fail.</p> </li> <li> <p>Resource Management: Be mindful of storage costs and data lifecycle when using cloud storage backends.</p> </li> </ol>"},{"location":"artifact/#configuration","title":"Configuration","text":""},{"location":"artifact/#environment-variables-for-cos","title":"Environment Variables for COS","text":"<p>When using Tencent Cloud Object Storage:</p> <pre><code>export COS_SECRETID=\"your-secret-id\"\nexport COS_SECRETKEY=\"your-secret-key\"\n</code></pre>"},{"location":"artifact/#storage-path-structure","title":"Storage Path Structure","text":"<p>The artifact system organizes files using the following path structure:</p> <ul> <li>Session-scoped: <code>{app_name}/{user_id}/{session_id}/{filename}/{version}</code></li> <li>User-persistent: <code>{app_name}/{user_id}/user/{filename}/{version}</code></li> </ul> <p>This structure ensures proper isolation between applications, users, and sessions while maintaining version history.</p>"},{"location":"callbacks/","title":"Callbacks","text":""},{"location":"callbacks/#callbacks","title":"Callbacks","text":"<p>This page describes the callback system used across the project to intercept, observe, and customize model inference, tool invocation, and agent execution.</p> <p>The callback system comes in three categories:</p> <ul> <li>ModelCallbacks</li> <li>ToolCallbacks</li> <li>AgentCallbacks</li> </ul> <p>Each category provides a Before and an After callback. A Before callback can short-circuit the default execution by returning a non-nil custom response.</p>"},{"location":"callbacks/#modelcallbacks","title":"ModelCallbacks","text":"<ul> <li>BeforeModelCallback: Runs before a model inference.</li> <li>AfterModelCallback: Runs after the model finishes (or per streaming phase).</li> </ul> <p>Signatures:</p> <pre><code>type BeforeModelCallback func(ctx context.Context, req *model.Request) (*model.Response, error)\ntype AfterModelCallback  func(ctx context.Context, req *model.Request, resp *model.Response, runErr error) (*model.Response, error)\n</code></pre> <p>Key points:</p> <ul> <li>Before can return a non-nil response to skip the model call.</li> <li>After receives the original request, useful for content restoration and   post-processing.</li> </ul> <p>Example:</p> <pre><code>modelCallbacks := model.NewCallbacks().\n  // Before: respond to a special prompt to skip the real model call.\n  RegisterBeforeModel(func(ctx context.Context, req *model.Request) (*model.Response, error) {\n    if len(req.Messages) &gt; 0 &amp;&amp; strings.Contains(req.Messages[len(req.Messages)-1].Content, \"/ping\") {\n      return &amp;model.Response{Choices: []model.Choice{{Message: model.Message{Role: model.RoleAssistant, Content: \"pong\"}}}}, nil\n    }\n    return nil, nil\n  }).\n  // After: annotate successful responses, keep errors untouched.\n  RegisterAfterModel(func(ctx context.Context, req *model.Request, resp *model.Response, runErr error) (*model.Response, error) {\n    if runErr != nil || resp == nil || len(resp.Choices) == 0 {\n      return resp, runErr\n    }\n    c := resp.Choices[0]\n    c.Message.Content = c.Message.Content + \"\\n\\n-- answered by callback\"\n    resp.Choices[0] = c\n    return resp, nil\n  })\n</code></pre>"},{"location":"callbacks/#toolcallbacks","title":"ToolCallbacks","text":"<ul> <li>BeforeToolCallback: Runs before each tool invocation.</li> <li>AfterToolCallback: Runs after each tool invocation.</li> </ul> <p>Signatures:</p> <pre><code>// Before: can short-circuit with a custom result and can mutate arguments via pointer.\ntype BeforeToolCallback func(\n  ctx context.Context,\n  toolName string,\n  toolDeclaration *tool.Declaration,\n  jsonArgs *[]byte, // pointer: mutations are visible to the caller\n) (any, error)\n\n// After: can override the result.\ntype AfterToolCallback func(\n  ctx context.Context,\n  toolName string,\n  toolDeclaration *tool.Declaration,\n  jsonArgs []byte,\n  result any,\n  runErr error,\n) (any, error)\n</code></pre> <p>Argument mutation (important):</p> <ul> <li>jsonArgs is passed as a pointer (<code>*[]byte</code>) to BeforeToolCallback.</li> <li>The callback may replace the slice (e.g., <code>*jsonArgs = newBytes</code>).</li> <li>The mutated arguments will be used for:<ul> <li>The actual tool execution.</li> <li>Telemetry traces and graph events (emitToolStartEvent/emitToolCompleteEvent).</li> </ul> </li> </ul> <p>Short-circuiting:</p> <ul> <li>If BeforeToolCallback returns a non-nil custom result, the tool is skipped   and that result is used directly.</li> </ul> <p>Example:</p> <pre><code>toolCallbacks := tool.NewCallbacks().\n  RegisterBeforeTool(func(ctx context.Context, toolName string, d *tool.Declaration, jsonArgs *[]byte) (any, error) {\n    if jsonArgs != nil &amp;&amp; toolName == \"calculator\" {\n      // Enrich arguments.\n      original := string(*jsonArgs)\n      enriched := []byte(fmt.Sprintf(`{\"original\":%s,\"ts\":%d}`, original, time.Now().Unix()))\n      *jsonArgs = enriched\n    }\n    return nil, nil\n  }).\n  RegisterAfterTool(func(ctx context.Context, toolName string, d *tool.Declaration, args []byte, result any, runErr error) (any, error) {\n    if runErr != nil {\n      return nil, runErr\n    }\n    if s, ok := result.(string); ok {\n      return s + \"\\n-- post processed by tool callback\", nil\n    }\n    return result, nil\n  })\n</code></pre> <p>Telemetry and events:</p> <ul> <li>Modified arguments are propagated to:<ul> <li><code>TraceToolCall</code> telemetry attributes.</li> <li>Graph events emitted by <code>emitToolStartEvent</code> and <code>emitToolCompleteEvent</code>.</li> </ul> </li> </ul>"},{"location":"callbacks/#agentcallbacks","title":"AgentCallbacks","text":"<ul> <li>BeforeAgentCallback: Runs before agent execution.</li> <li>AfterAgentCallback: Runs after agent execution.</li> </ul> <p>Signatures:</p> <pre><code>type BeforeAgentCallback func(ctx context.Context, inv *agent.Invocation) (*model.Response, error)\ntype AfterAgentCallback  func(ctx context.Context, inv *agent.Invocation, runErr error) (*model.Response, error)\n</code></pre> <p>Key points:</p> <ul> <li>Before can short-circuit with a custom model.Response.</li> <li>After can return a replacement response.</li> </ul> <p>Example:</p> <pre><code>agentCallbacks := agent.NewCallbacks().\n  // Before: if the user message contains /abort, return a fixed response and skip the rest.\n  RegisterBeforeAgent(func(ctx context.Context, inv *agent.Invocation) (*model.Response, error) {\n    if inv != nil &amp;&amp; strings.Contains(inv.GetUserMessageContent(), \"/abort\") {\n      return &amp;model.Response{Choices: []model.Choice{{Message: model.Message{Role: model.RoleAssistant, Content: \"aborted by callback\"}}}}, nil\n    }\n    return nil, nil\n  }).\n  // After: append a footer to successful responses.\n  RegisterAfterAgent(func(ctx context.Context, inv *agent.Invocation, runErr error) (*model.Response, error) {\n    if runErr != nil {\n      return nil, runErr\n    }\n    if inv == nil || inv.Response == nil || len(inv.Response.Choices) == 0 {\n      return nil, nil\n    }\n    c := inv.Response.Choices[0]\n    c.Message.Content = c.Message.Content + \"\\n\\n-- handled by agent callback\"\n    inv.Response.Choices[0] = c\n    return inv.Response, nil\n  })\n</code></pre>"},{"location":"callbacks/#access-invocation-in-callbacks","title":"Access Invocation in Callbacks","text":"<p>Callbacks can access the current agent invocation via context to correlate events, add tracing, or implement per-invocation logic.</p> <pre><code>if inv, ok := agent.InvocationFromContext(ctx); ok &amp;&amp; inv != nil {\n  fmt.Printf(\"invocation id=%s, agent=%s\\n\", inv.InvocationID, inv.AgentName)\n}\n</code></pre> <p>This pattern is showcased in the examples where Before/After callbacks print the presence of an invocation.</p>"},{"location":"callbacks/#global-callbacks-and-chain-registration","title":"Global Callbacks and Chain Registration","text":"<p>You can define reusable global callbacks using chain registration.</p> <pre><code>_ = model.NewCallbacks().\n  RegisterBeforeModel(func(ctx context.Context, req *model.Request) (*model.Response, error) {\n    fmt.Printf(\"Global BeforeModel: %d messages.\\n\", len(req.Messages))\n    return nil, nil\n  }).\n  RegisterAfterModel(func(ctx context.Context, req *model.Request, rsp *model.Response, err error) (*model.Response, error) {\n    fmt.Println(\"Global AfterModel: completed.\")\n    return nil, nil\n  })\n\n_ = tool.NewCallbacks().\n  RegisterBeforeTool(func(ctx context.Context, toolName string, d *tool.Declaration, jsonArgs *[]byte) (any, error) {\n    fmt.Printf(\"Global BeforeTool: %s.\\n\", toolName)\n    // jsonArgs is a pointer; modifications are visible to the caller.\n    return nil, nil\n  }).\n  RegisterAfterTool(func(ctx context.Context, toolName string, d *tool.Declaration, jsonArgs []byte, result any, runErr error) (any, error) {\n    fmt.Printf(\"Global AfterTool: %s done.\\n\", toolName)\n    return nil, nil\n  })\n\n_ = agent.NewCallbacks().\n  RegisterBeforeAgent(func(ctx context.Context, inv *agent.Invocation) (*model.Response, error) {\n    fmt.Printf(\"Global BeforeAgent: %s.\\n\", inv.AgentName)\n    return nil, nil\n  }).\n  RegisterAfterAgent(func(ctx context.Context, inv *agent.Invocation, runErr error) (*model.Response, error) {\n    fmt.Println(\"Global AfterAgent: completed.\")\n    return nil, nil\n  })\n</code></pre>"},{"location":"callbacks/#mocking-and-argument-mutation-examples","title":"Mocking and Argument Mutation Examples","text":"<p>Mock a tool result and short-circuit execution:</p> <pre><code>toolCallbacks.RegisterBeforeTool(func(ctx context.Context, toolName string, d *tool.Declaration, jsonArgs *[]byte) (any, error) {\n  if toolName == \"calculator\" &amp;&amp; jsonArgs != nil &amp;&amp; strings.Contains(string(*jsonArgs), \"42\") {\n    return calculatorResult{Operation: \"custom\", A: 42, B: 42, Result: 4242}, nil\n  }\n  return nil, nil\n})\n</code></pre> <p>Modify arguments prior to execution (and telemetry/event reporting):</p> <pre><code>toolCallbacks.RegisterBeforeTool(func(ctx context.Context, toolName string, d *tool.Declaration, jsonArgs *[]byte) (any, error) {\n  if jsonArgs != nil &amp;&amp; toolName == \"calculator\" {\n    originalArgs := string(*jsonArgs)\n    modifiedArgs := fmt.Sprintf(`{\"original\":%s,\"timestamp\":\"%d\"}`, originalArgs, time.Now().Unix())\n    *jsonArgs = []byte(modifiedArgs)\n  }\n  return nil, nil\n})\n</code></pre> <p>Both examples mirror the runnable demo under examples/callbacks.</p>"},{"location":"callbacks/#running-the-callbacks-example","title":"Running the Callbacks Example","text":"<pre><code>cd examples/callbacks\nexport OPENAI_API_KEY=\"your-api-key\"\n\n# Basic\ngo run .\n\n# Choose model\ngo run . -model gpt-4o-mini\n\n# Disable streaming\ngo run . -streaming=false\n</code></pre> <p>Observe logs for Before/After callbacks, argument mutation messages, and tool responses.</p>"},{"location":"custom-agent/","title":"Custom Agent","text":"<p>If you don\u2019t want to start with Graph or multi-Agent orchestration and prefer embedding LLM into your existing service logic, implement the <code>agent.Agent</code> interface directly and control the flow yourself.</p> <p>This example shows a small \u201cintent branching\u201d agent:</p> <ul> <li>First classify intent using the LLM: <code>chitchat</code> or <code>task</code></li> <li>If chitchat: reply conversationally</li> <li>If task: output a short actionable plan (in real apps, you can route to tools or downstream services)</li> </ul>"},{"location":"custom-agent/#when-to-choose-a-custom-agent","title":"When to choose a custom Agent","text":"<ul> <li>Logic is simple but you need precise control (validation, fallbacks, branching)</li> <li>You don\u2019t need visual orchestration or complex teams yet (you can later evolve to Chain/Parallel/Graph)</li> </ul>"},{"location":"custom-agent/#what-to-implement","title":"What to implement","text":"<p>You must implement:</p> <ul> <li><code>Run(ctx, *Invocation) (&lt;-chan *event.Event, error)</code>: execute your flow and emit events (forward model streaming to events)</li> <li><code>Tools() []tool.Tool</code>: return available tools (empty if none)</li> <li><code>Info() Info</code>: basic agent info</li> <li><code>SubAgents()/FindSubAgent()</code>: return empty/nil if not used</li> </ul> <p>Core pattern:</p> <p>1) Use <code>invocation.Message</code> as user input</p> <p>2) Share framework capabilities via <code>invocation</code> (Session, Callbacks, Artifact, etc.)</p> <p>3) Call <code>model.Model.GenerateContent(ctx, *model.Request)</code> for streaming responses; forward via <code>event.NewResponseEvent(...)</code></p>"},{"location":"custom-agent/#code-example","title":"Code example","text":"<p>Full example: <code>examples/customagent</code></p> <p>Key snippet (simplified):</p> <pre><code>type SimpleIntentAgent struct {\n    name        string\n    description string\n    model       model.Model\n}\n\nfunc (a *SimpleIntentAgent) Run(ctx context.Context, inv *agent.Invocation) (&lt;-chan *event.Event, error) {\n    out := make(chan *event.Event, 64)\n    go func() {\n        defer close(out)\n        intent := a.classifyIntent(ctx, inv) // chitchat | task\n        if intent == \"task\" {\n            a.replyTaskPlan(ctx, inv, out)\n        } else {\n            a.replyChitChat(ctx, inv, out)\n        }\n    }()\n    return out, nil\n}\n\nfunc (a *SimpleIntentAgent) replyChitChat(ctx context.Context, inv *agent.Invocation, out chan&lt;- *event.Event) {\n    req := &amp;model.Request{\n        Messages: []model.Message{\n            model.NewSystemMessage(\"Be concise and friendly.\"),\n            inv.Message,\n        },\n        GenerationConfig: model.GenerationConfig{Stream: true},\n    }\n    rspCh, _ := a.model.GenerateContent(ctx, req)\n    for rsp := range rspCh {\n        out &lt;- event.NewResponseEvent(inv.InvocationID, a.name, rsp)\n    }\n}\n</code></pre>"},{"location":"custom-agent/#runner-integration","title":"Runner integration","text":"<p>While you can call Agent directly, we recommend running agents via <code>Runner</code> which manages session and appends events for you.</p> <p>Example:</p> <pre><code>// Build model and agent\nm := openai.New(\"deepseek-chat\")\nag := NewSimpleIntentAgent(\"biz-agent\", \"intent branching\", m)\n\n// Run with Runner\nr := runner.NewRunner(\"customagent-app\", ag)\nch, err := r.Run(ctx, \"user-001\", \"session-001\", model.NewUserMessage(\"Hi there\"))\n// consume events...\n</code></pre>"},{"location":"custom-agent/#run-the-example-interactive","title":"Run the example (interactive)","text":"<pre><code>cd examples/customagent\nexport OPENAI_API_KEY=\"your_api_key\"\ngo run . -model deepseek-chat\n\n# Inside the interactive session:\n# /history  - Ask to show conversation history\n# /new      - Start a new session\n# /exit     - Quit\n</code></pre>"},{"location":"custom-agent/#extensions","title":"Extensions","text":"<ul> <li>Add tools: return <code>[]tool.Tool</code> (e.g., <code>function.NewFunctionTool(...)</code>) to call DB/HTTP/internal services</li> <li>Add validation: enforce checks and guards before branching</li> <li>Evolve gradually: when if-else grows or you need collaboration, move to <code>ChainAgent</code>/<code>ParallelAgent</code> or <code>Graph</code></li> </ul>"},{"location":"debugserver/","title":"Debug Server Usage Guide","text":""},{"location":"debugserver/#overview","title":"Overview","text":"<p>Debug Server is a debugging tool provided by the trpc-agent-go framework.  It helps developers quickly test and debug Agent functionality. It can be combined with ADK Web UI to allow you to verify Agent behavior and tool calls through a visual interactive interface.</p>"},{"location":"debugserver/#main-features","title":"Main Features","text":"<ul> <li>Visual Debug Interface: Provides a user-friendly graphical interface through ADK Web UI</li> <li>Real-time Interactive Testing: Supports real-time conversation and tool calls with Agents</li> <li>Streaming Response: Supports Server-Sent Events (SSE) streaming response</li> <li>Session Management: Supports creating and managing multiple conversation sessions</li> <li>Tool Validation: Can intuitively test and verify various tool functions of Agents</li> </ul>"},{"location":"debugserver/#architecture-diagram","title":"Architecture Diagram","text":"<pre><code>User Interface\n+---------------------------+\n|      ADK Web UI           |  \u2190 Access via browser: http://localhost:4200\n|        (React)            |\n+-----------+---------------+\n            | HTTP/SSE Request\n            v\n+-----------------------------+\n|     Debug Server            |  \u2190 Listening on http://localhost:8000\n|                             |\n|       API Routing           | \n|       Session Management    | \n|       CORS Handling         |\n+-----------+-----------------+\n            | Call Agent\n            v\n+---------------------------------+\n|    tRPC-Agent-Go                |\n|                                 |\n| +-------------+ +--------------+| \n| | LLM Agent   | | Tool System  ||\n| | \u2022 Model Call| | \u2022 Calculator ||\n| | \u2022 Streaming | | \u2022 Time Query ||\n| | \u2022 Prompting | | \u2022 Custom Tool||\n| +-------------+ +--------------+|\n+-----------+---------------------+\n            | External Call\n            v\n+----------------------------------+\n|     External Services            |\n|                                  |\n| \u2022 LLM API   (OpenAI/DeepSeek)    | \n| \u2022 Database   (Redis/MySQL)       | \n| \u2022 Other API  (Search/File System)|\n+----------------------------------+\n</code></pre> <p>Data Flow:</p> <pre><code>User Input \u2192 Web UI \u2192 Debug Server \u2192 Agent \u2192 LLM/Tools \u2192 Streaming Response \u2192 Web UI\n</code></pre>"},{"location":"debugserver/#usage-steps","title":"Usage Steps","text":"<ol> <li>Create an Agent.</li> <li>Create a Debug Server with the Agent as a constructor parameter. The Debug Server itself can provide http Handler functions.</li> <li>Create a tRPC HTTP service and register the Debug Server's http Handler as the handler function for the tRPC HTTP service.</li> <li>Start the tRPC HTTP service as a backend service.</li> <li>Install ADK Web UI for convenient frontend visual debugging.</li> <li>Start ADK Web UI and specify the tRPC HTTP service as the backend service.</li> <li>You can directly input user requests through ADK Web UI in the browser frontend for debugging. The frontend page will display observable data.</li> </ol> <p>For specific runnable examples, see examples/debugserver</p>"},{"location":"debugserver/#debug-results-display","title":"Debug Results Display","text":"<p>Through ADK Web UI, you can directly test call scenarios. The Web interface will display event and trace information. For example, the following shows debugging an agent with calculator functionality.</p> <p></p> <p></p>"},{"location":"ecosystem/","title":"tRPC-Agent-Go Ecosystem Development Guide","text":"<p>This document analyzes the modules in the tRPC-Agent-Go framework that need ecosystem development, explains the interfaces that need to be implemented, and provides contribution guidance.</p> <p>Note: All community-built components are contributed directly to the corresponding directory under the GitHub open source repository, such as <code>model/somemodel</code>, <code>tool/sometool</code>, <code>agent/someagent</code>, etc.</p> <p>When contributing, create a reasonably named subfolder under the corresponding contribution module directory, then implement the corresponding module interface, and provide rich test cases and example samples.</p>"},{"location":"ecosystem/#ecosystem-development-module-analysis","title":"Ecosystem Development Module Analysis","text":""},{"location":"ecosystem/#1-agent-ecosystem","title":"1. Agent Ecosystem","text":"<p>Goal: Encapsulate and adapt third-party Agent frameworks</p> <p>Interface Definition: agent.Agent</p> <p>Existing Implementation Reference: LLMAgent</p> <p>Implementation Notes:</p> <ul> <li>The <code>Run</code> method must return an event channel, supporting streaming responses</li> <li>The <code>Tools</code> method returns the list of tools available to the Agent</li> <li>The <code>Info</code> method provides basic information about the Agent</li> <li><code>SubAgents</code> and <code>FindSubAgent</code> support Agent composition patterns</li> <li>Reference LLMAgent implementation to understand event handling and error handling mechanisms</li> </ul> <p>Implementation Example:</p> <pre><code>package langchain\n\nimport (\n    \"context\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent\"\n    \"trpc.group/trpc-go/trpc-agent-go/event\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n)\n\ntype LangChainAdapter struct {\n    config *Config\n    client *langchain.Client\n}\n\nfunc New(config *Config) (agent.Agent, error) {\n    client := langchain.NewClient(config.Endpoint, config.APIKey)\n\n    return &amp;LangChainAdapter{\n        config: config,\n        client: client,\n    }, nil\n}\n\nfunc (a *LangChainAdapter) Run(ctx context.Context, invocation *agent.Invocation) (&lt;-chan *event.Event, error) {\n    events := make(chan *event.Event)\n\n    go func() {\n        defer close(events)\n\n        response, err := a.client.Call(ctx, invocation.Messages)\n        if err != nil {\n            events &lt;- &amp;event.Event{\n                Type: event.TypeError,\n                Error: err,\n            }\n            return\n        }\n\n        events &lt;- &amp;event.Event{\n            Type: event.TypeResponse,\n            Response: &amp;model.Response{\n                Content: response.Content,\n            },\n        }\n    }()\n\n    return events, nil\n}\n\nfunc (a *LangChainAdapter) Tools() []tool.Tool {\n    return a.config.Tools\n}\n\nfunc (a *LangChainAdapter) Info() agent.Info {\n    return agent.Info{\n        Name:        \"langchain-adapter\",\n        Description: \"LangChain framework adapter\",\n    }\n}\n\nfunc (a *LangChainAdapter) SubAgents() []agent.Agent {\n    return nil\n}\n\nfunc (a *LangChainAdapter) FindSubAgent(name string) agent.Agent {\n    return nil\n}\n</code></pre> <p>Open Source Components That Can Be Integrated:</p> <ul> <li>LangChain adapter</li> <li>LangGraph adapter</li> </ul> <p>Contribution Method:</p> <ul> <li>Create components under the corresponding directory (create a subdirectory with the corresponding component name)</li> <li>Contribute directly to <code>https://github.com/trpc-group/trpc-agent-go/agent/</code></li> </ul>"},{"location":"ecosystem/#2-model-ecosystem","title":"2. Model Ecosystem","text":"<p>Goal: Support more model providers</p> <p>Interface Definition: model.Model</p> <p>Existing Implementation Reference: OpenAI Model</p> <p>Implementation Notes:</p> <ul> <li>The <code>GenerateContent</code> method must support streaming responses, returning an event channel</li> <li>Distinguish between system-level errors (return error) and API-level errors (Response.Error)</li> <li>Implement the <code>Info</code> method to provide basic model information</li> <li>Reference OpenAI implementation to understand request building and response handling</li> <li>Support context cancellation and timeout control</li> </ul> <p>Implementation Example:</p> <pre><code>package gemini\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n)\n\ntype GeminiModel struct {\n    config *Config\n    client *gemini.Client\n}\n\nfunc New(config *Config) (model.Model, error) {\n    client := gemini.NewClient(config.APIKey)\n\n    return &amp;GeminiModel{\n        config: config,\n        client: client,\n    }, nil\n}\n\nfunc (g *GeminiModel) GenerateContent(ctx context.Context, request *model.Request) (&lt;-chan *model.Response, error) {\n    if request == nil {\n        return nil, fmt.Errorf(\"request cannot be nil\")\n    }\n\n    responses := make(chan *model.Response)\n\n    go func() {\n        defer close(responses)\n\n        // Call Gemini API.\n        stream, err := g.client.GenerateContent(ctx, request.Messages)\n        if err != nil {\n            responses &lt;- &amp;model.Response{\n                Error: &amp;model.Error{\n                    Message: err.Error(),\n                },\n            }\n            return\n        }\n\n        for chunk := range stream {\n            responses &lt;- &amp;model.Response{\n                Content: chunk.Content,\n            }\n        }\n    }()\n\n    return responses, nil\n}\n\nfunc (g *GeminiModel) Info() model.Info {\n    return model.Info{\n        Name: \"gemini-pro\",\n    }\n}\n</code></pre> <p>Open Source Components That Can Be Integrated:</p> <ul> <li>Google Gemini model support</li> <li>Anthropic Claude model support</li> <li>Ollama local model support</li> </ul> <p>Contribution Method:</p> <ul> <li>Create components under the corresponding directory (create a subdirectory with the corresponding component name)</li> <li>Contribute directly to <code>https://github.com/trpc-group/trpc-agent-go/model/</code></li> </ul>"},{"location":"ecosystem/#3-tool-ecosystem","title":"3. Tool Ecosystem","text":"<p>Goal: Integrate more third-party tools</p> <p>Interface Definition: </p> <ul> <li>tool.Tool - Single tool interface</li> <li>tool.ToolSet - Tool collection interface</li> </ul> <p>Existing Implementation Reference: DuckDuckGo Tool</p> <p>Implementation Notes:</p> <p>Single Tool Implementation:</p> <ul> <li>The <code>Declaration</code> method must return complete tool metadata</li> <li>The <code>Call</code> method receives JSON format parameters and returns results of any type</li> <li>Use JSON Schema to define input and output formats</li> <li>Reference DuckDuckGo implementation to understand tool calling and error handling</li> <li>Support context cancellation and timeout control</li> </ul> <p>Tool Collection Implementation:</p> <ul> <li>The <code>Tools</code> method returns available tool lists based on context</li> <li>The <code>Close</code> method releases resources held by the tool collection</li> <li>Support dynamic tool loading and configuration</li> <li>Implement tool lifecycle management</li> </ul> <p>Implementation Example:</p> <p>Single Tool Implementation:</p> <pre><code>package weather\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"net/http\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n)\n\ntype WeatherTool struct {\n    apiKey string\n    client *http.Client\n}\n\nfunc New(apiKey string) tool.CallableTool {\n    return &amp;WeatherTool{\n        apiKey: apiKey,\n        client: &amp;http.Client{},\n    }\n}\n\nfunc (w *WeatherTool) Declaration() *tool.Declaration {\n    return &amp;tool.Declaration{\n        Name:        \"get_weather\",\n        Description: \"Get current weather information for a location\",\n        InputSchema: &amp;tool.Schema{\n            Type: \"object\",\n            Properties: map[string]*tool.Schema{\n                \"location\": {\n                    Type:        \"string\",\n                    Description: \"City name or coordinates\",\n                },\n            },\n            Required: []string{\"location\"},\n        },\n        OutputSchema: &amp;tool.Schema{\n            Type: \"object\",\n            Properties: map[string]*tool.Schema{\n                \"temperature\": {Type: \"number\"},\n                \"condition\":   {Type: \"string\"},\n                \"humidity\":    {Type: \"number\"},\n            },\n        },\n    }\n}\n\nfunc (w *WeatherTool) Call(ctx context.Context, jsonArgs []byte) (any, error) {\n    var args struct {\n        Location string `json:\"location\"`\n    }\n\n    if err := json.Unmarshal(jsonArgs, &amp;args); err != nil {\n        return nil, fmt.Errorf(\"invalid arguments: %w\", err)\n    }\n\n    url := fmt.Sprintf(\"https://api.weatherapi.com/v1/current.json?key=%s&amp;q=%s\", w.apiKey, args.Location)\n\n    req, err := http.NewRequestWithContext(ctx, \"GET\", url, nil)\n    if err != nil {\n        return nil, err\n    }\n\n    resp, err := w.client.Do(req)\n    if err != nil {\n        return nil, err\n    }\n    defer resp.Body.Close()\n\n    var weatherData map[string]interface{}\n    if err := json.NewDecoder(resp.Body).Decode(&amp;weatherData); err != nil {\n        return nil, err\n    }\n\n    return weatherData, nil\n}\n</code></pre> <p>Tool Collection Implementation:</p> <pre><code>package apitools\n\nimport (\n    \"context\"\n    \"sync\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n)\n\ntype APIToolSet struct {\n    tools map[string]tool.CallableTool\n    mu    sync.RWMutex\n}\n\nfunc New() *APIToolSet {\n    return &amp;APIToolSet{\n        tools: make(map[string]tool.CallableTool),\n    }\n}\n\nfunc (a *APIToolSet) AddTool(name string, tool tool.CallableTool) {\n    a.mu.Lock()\n    defer a.mu.Unlock()\n    a.tools[name] = tool\n}\n\nfunc (a *APIToolSet) RemoveTool(name string) {\n    a.mu.Lock()\n    defer a.mu.Unlock()\n    delete(a.tools, name)\n}\n\nfunc (a *APIToolSet) Tools(ctx context.Context) []tool.CallableTool {\n    a.mu.RLock()\n    defer a.mu.RUnlock()\n\n    var result []tool.CallableTool\n    for _, t := range a.tools {\n        result = append(result, t)\n    }\n    return result\n}\n\nfunc (a *APIToolSet) Close() error {\n    a.mu.Lock()\n    defer a.mu.Unlock()\n\n    // Clean up resources.\n    a.tools = make(map[string]tool.CallableTool)\n    return nil\n}\n</code></pre> <p>Open Source Components That Can Be Integrated:</p> <ul> <li>Search engine tools (Google, Bing)</li> <li>Weather query tools</li> <li>Calculator tools</li> <li>File operation tools</li> <li>API tool collections (REST API toolkit)</li> <li>Database operation tool collections</li> <li>File processing tool collections</li> </ul> <p>Contribution Method:</p> <ul> <li>Create components under the corresponding directory (create a subdirectory with the corresponding component name)</li> <li>Contribute directly to <code>https://github.com/trpc-group/trpc-agent-go/tool/</code></li> </ul>"},{"location":"ecosystem/#4-knowledge-base-ecosystem","title":"4. Knowledge Base Ecosystem","text":"<p>Goal: Integrate mature RAG components</p> <p>Interface Definition: knowledge.Knowledge</p> <p>Existing Implementation Reference: </p> <ul> <li>InMemory Knowledge</li> </ul> <p>Implementation Notes:</p> <ul> <li>The <code>Search</code> method supports context and history records</li> <li>Returns relevant documents and relevance scores</li> <li>Supports search parameters and result limits</li> <li>Reference InMemory implementation to understand search logic and result processing</li> <li>Supports vectorized search and semantic matching</li> </ul> <p>Implementation Example:</p> <pre><code>package weaviate\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge\"\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge/document\"\n)\n\ntype WeaviateKnowledge struct {\n    config *Config\n    client *weaviate.Client\n}\n\nfunc New(config *Config) (knowledge.Knowledge, error) {\n    client := weaviate.NewClient(config.Endpoint, config.APIKey)\n\n    return &amp;WeaviateKnowledge{\n        config: config,\n        client: client,\n    }, nil\n}\n\nfunc (w *WeaviateKnowledge) Search(ctx context.Context, req *knowledge.SearchRequest) (*knowledge.SearchResult, error) {\n    if req.Query == \"\" {\n        return nil, fmt.Errorf(\"query cannot be empty\")\n    }\n\n    // Build search query.\n    query := w.buildQuery(req)\n\n    // Execute vector search.\n    results, err := w.client.Search(ctx, query)\n    if err != nil {\n        return nil, err\n    }\n\n    if len(results) == 0 {\n        return nil, fmt.Errorf(\"no results found\")\n    }\n\n    // Return best matching result.\n    bestResult := results[0]\n\n    return &amp;knowledge.SearchResult{\n        Document: &amp;document.Document{\n            ID:      bestResult.ID,\n            Content: bestResult.Content,\n            Metadata: bestResult.Metadata,\n        },\n        Score: bestResult.Score,\n        Text:  bestResult.Content,\n    }, nil\n}\n\nfunc (w *WeaviateKnowledge) buildQuery(req *knowledge.SearchRequest) *weaviate.Query {\n    // Build Weaviate query logic.\n    return &amp;weaviate.Query{\n        Query: req.Query,\n        Limit: req.MaxResults,\n        Filter: w.buildFilter(req),\n    }\n}\n</code></pre> <p>Open Source Components That Can Be Integrated:</p> <ul> <li>Weaviate vector database</li> <li>Pinecone vector database</li> <li>Qdrant vector database</li> </ul> <p>Contribution Method:</p> <ul> <li>Create components under the corresponding directory (create a subdirectory with the corresponding component name)</li> <li>Contribute directly to <code>https://github.com/trpc-group/trpc-agent-go/knowledge/</code></li> </ul>"},{"location":"ecosystem/#5-session-ecosystem","title":"5. Session Ecosystem","text":"<p>Goal: Support multiple session storage backends, manage user session state and events</p> <p>Interface Definition: session.Service</p> <p>Existing Implementation Reference:</p> <ul> <li>InMemory Session</li> <li>Redis Session</li> </ul> <p>Implementation Notes:</p> <ul> <li>Implement complete Session lifecycle management (create, get, delete, list)</li> <li>Support state storage and event recording</li> <li>Implement connection pooling and error handling</li> <li>Support transactions and consistency</li> <li>Can reuse storage module clients</li> <li>Reference InMemory and Redis implementations to understand Session management logic</li> </ul> <p>Implementation Example:</p> <pre><code>package postgresql\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"encoding/json\"\n    \"fmt\"\n    \"time\"\n    \"trpc.group/trpc-go/trpc-agent-go/event\"\n    \"trpc.group/trpc-go/trpc-agent-go/session\"\n)\n\ntype PostgreSQLService struct {\n    db *sql.DB\n}\n\nfunc New(dsn string) (session.Service, error) {\n    db, err := sql.Open(\"postgres\", dsn)\n    if err != nil {\n        return nil, err\n    }\n\n    if err := db.Ping(); err != nil {\n        return nil, err\n    }\n\n    return &amp;PostgreSQLService{db: db}, nil\n}\n\nfunc (p *PostgreSQLService) CreateSession(ctx context.Context, key session.Key, state session.StateMap, \n    options ...session.Option) (*session.Session, error) {\n    if err := key.CheckSessionKey(); err != nil {\n        return nil, err\n    }\n\n    now := time.Now()\n    session := &amp;session.Session{\n        ID:        key.SessionID,\n        AppName:   key.AppName,\n        UserID:    key.UserID,\n        State:     state,\n        Events:    []event.Event{},\n        UpdatedAt: now,\n        CreatedAt: now,\n    }\n\n    // Insert into database.\n    _, err := p.db.ExecContext(ctx, `\n        INSERT INTO sessions (id, app_name, user_id, state, created_at, updated_at)\n        VALUES ($1, $2, $3, $4, $5, $6)\n    `, session.ID, session.AppName, session.UserID, p.marshalState(state), session.CreatedAt, session.UpdatedAt)\n\n    if err != nil {\n        return nil, err\n    }\n\n    return session, nil\n}\n\nfunc (p *PostgreSQLService) GetSession(ctx context.Context, key session.Key, \n    options ...session.Option) (*session.Session, error) {\n    if err := key.CheckSessionKey(); err != nil {\n        return nil, err\n    }\n\n    var session session.Session\n    var stateData []byte\n\n    err := p.db.QueryRowContext(ctx, `\n        SELECT id, app_name, user_id, state, created_at, updated_at\n        FROM sessions WHERE id = $1\n    `, key.SessionID).Scan(&amp;session.ID, &amp;session.AppName, &amp;session.UserID, &amp;stateData, &amp;session.CreatedAt, \n        &amp;session.UpdatedAt)\n\n    if err != nil {\n        return nil, err\n    }\n\n    session.State = p.unmarshalState(stateData)\n\n    return &amp;session, nil\n}\n\nfunc (p *PostgreSQLService) Close() error {\n    return p.db.Close()\n}\n\nfunc (p *PostgreSQLService) marshalState(state session.StateMap) []byte {\n    data, _ := json.Marshal(state)\n    return data\n}\n\nfunc (p *PostgreSQLService) unmarshalState(data []byte) session.StateMap {\n    var state session.StateMap\n    json.Unmarshal(data, &amp;state)\n    return state\n}\n</code></pre> <p>Open Source Components That Can Be Integrated:</p> <ul> <li>PostgreSQL session storage</li> <li>MongoDB session storage</li> <li>MySQL session storage</li> <li>Cassandra session storage</li> </ul> <p>Contribution Method:</p> <ul> <li>Create components under the corresponding directory (create a subdirectory with the corresponding component name)</li> <li>Contribute directly to <code>https://github.com/trpc-group/trpc-agent-go/session/</code></li> </ul>"},{"location":"ecosystem/#6-memory-ecosystem","title":"6. Memory Ecosystem","text":"<p>Goal: Support multiple memory storage backends, manage user long-term memory and personalized information</p> <p>Interface Definition: memory.Service</p> <p>Existing Implementation Reference: InMemory Memory</p> <p>Implementation Notes:</p> <ul> <li>Implement complete Memory lifecycle management (add, update, delete, search, read)</li> <li>Support memory topic classification and search</li> <li>Provide memory tool integration (memory_add, memory_search, etc.)</li> <li>Implement connection pooling and error handling</li> <li>Can reuse storage module clients</li> <li>Support memory limits and cleanup mechanisms</li> <li>Reference InMemory implementation to understand memory management logic</li> </ul> <p>Implementation Example:</p> <pre><code>package postgresql\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"encoding/json\"\n    \"fmt\"\n    \"time\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/memory\"\n    memorytool \"trpc.group/trpc-go/trpc-agent-go/memory/tool\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n)\n\ntype PostgreSQLMemoryService struct {\n    db *sql.DB\n    cachedTools map[string]tool.Tool\n}\n\nfunc New(dsn string) (memory.Service, error) {\n    db, err := sql.Open(\"postgres\", dsn)\n    if err != nil {\n        return nil, err\n    }\n\n    if err := db.Ping(); err != nil {\n        return nil, err\n    }\n\n    service := &amp;PostgreSQLMemoryService{\n        db: db,\n        cachedTools: make(map[string]tool.Tool),\n    }\n\n    // Initialize tools.\n    service.initTools()\n\n    return service, nil\n}\n\nfunc (p *PostgreSQLMemoryService) AddMemory(ctx context.Context, userKey memory.UserKey, memoryStr string, \n    topics []string) error {\n    if err := userKey.CheckUserKey(); err != nil {\n        return err\n    }\n\n    now := time.Now()\n    memoryID := p.generateMemoryID(memoryStr)\n\n    // Insert memory into database.\n    _, err := p.db.ExecContext(ctx, `\n        INSERT INTO memories (id, app_name, user_id, memory, topics, created_at, updated_at)\n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n    `, memoryID, userKey.AppName, userKey.UserID, memoryStr, p.marshalTopics(topics), now, now)\n\n    return err\n}\n\nfunc (p *PostgreSQLMemoryService) SearchMemories(ctx context.Context, userKey memory.UserKey, \n    query string) ([]*memory.Entry, error) {\n    if err := userKey.CheckUserKey(); err != nil {\n        return nil, err\n    }\n\n    // Execute full-text search.\n    rows, err := p.db.QueryContext(ctx, `\n        SELECT id, app_name, user_id, memory, topics, created_at, updated_at\n        FROM memories \n        WHERE app_name = $1 AND user_id = $2 \n        AND (memory ILIKE $3 OR topics::text ILIKE $3)\n        ORDER BY updated_at DESC\n        LIMIT 10\n    `, userKey.AppName, userKey.UserID, \"%\"+query+\"%\")\n\n    if err != nil {\n        return nil, err\n    }\n    defer rows.Close()\n\n    var entries []*memory.Entry\n    for rows.Next() {\n        var entry memory.Entry\n        var topicsData []byte\n\n        err := rows.Scan(&amp;entry.ID, &amp;entry.AppName, &amp;entry.UserID, &amp;entry.Memory.Memory, &amp;topicsData, &amp;entry.CreatedAt, \n        &amp;entry.UpdatedAt)\n    if err != nil {\n        return nil, err\n    }\n\n        entry.Memory.Topics = p.unmarshalTopics(topicsData)\n        entries = append(entries, &amp;entry)\n    }\n\n    return entries, nil\n}\n\nfunc (p *PostgreSQLMemoryService) Tools() []tool.Tool {\n    var tools []tool.Tool\n    for _, t := range p.cachedTools {\n        tools = append(tools, t)\n    }\n    return tools\n}\n\nfunc (p *PostgreSQLMemoryService) initTools() {\n    p.cachedTools[memory.AddToolName] = memorytool.NewAddTool(p)\n    p.cachedTools[memory.SearchToolName] = memorytool.NewSearchTool(p)\n    p.cachedTools[memory.LoadToolName] = memorytool.NewLoadTool(p)\n}\n\nfunc (p *PostgreSQLMemoryService) generateMemoryID(memoryStr string) string {\n    // Generate unique memory ID.\n    return fmt.Sprintf(\"mem_%d\", time.Now().UnixNano())\n}\n\nfunc (p *PostgreSQLMemoryService) marshalTopics(topics []string) []byte {\n    data, _ := json.Marshal(topics)\n    return data\n}\n\nfunc (p *PostgreSQLMemoryService) unmarshalTopics(data []byte) []string {\n    var topics []string\n    json.Unmarshal(data, &amp;topics)\n    return topics\n}\n</code></pre> <p>For quick implementation, you can directly integrate with existing Memory platforms/services (such as mem0). Recommendations:</p> <ul> <li>Provide implementation in <code>memory/mem0/</code>, following the <code>memory.Service</code> interface.</li> <li>Reuse existing <code>memory/tool</code> tools (<code>memory_add</code>, <code>memory_search</code>, <code>memory_load</code>, etc.), expose through <code>Tools()</code>.</li> <li>Map topics and search according to target service capabilities, maintain lightweight local indexes when necessary to enhance query experience.</li> <li>Optional: Reuse <code>storage</code> module client management for unified authentication, connection and reuse.</li> </ul> <p>Example skeleton (simplified):</p> <pre><code>package mem0\n\nimport (\n    \"context\"\n    \"net/http\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/memory\"\n    memorytool \"trpc.group/trpc-go/trpc-agent-go/memory/tool\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n)\n\ntype Service struct {\n    client  *http.Client\n    baseURL string\n    apiKey  string\n    tools   map[string]tool.Tool\n}\n\nfunc New(baseURL, apiKey string) *Service {\n    s := &amp;Service{\n        client:  &amp;http.Client{},\n        baseURL: baseURL,\n        apiKey:  apiKey,\n        tools:   make(map[string]tool.Tool),\n    }\n    s.tools[memory.AddToolName] = memorytool.NewAddTool(s)\n    s.tools[memory.SearchToolName] = memorytool.NewSearchTool(s)\n    s.tools[memory.LoadToolName] = memorytool.NewLoadTool(s)\n    return s\n}\n\nfunc (s *Service) Tools() []tool.Tool {\n    var ts []tool.Tool\n    for _, t := range s.tools {\n        ts = append(ts, t)\n    }\n    return ts\n}\n\nfunc (s *Service) AddMemory(ctx context.Context, key memory.UserKey, m string, topics []string) error {\n    if err := key.CheckUserKey(); err != nil {\n        return err\n    }\n    // Call mem0 API to write memory.\n    return nil\n}\n\nfunc (s *Service) SearchMemories(ctx context.Context, key memory.UserKey, q string) ([]*memory.Entry, error) {\n    if err := key.CheckUserKey(); err != nil {\n        return nil, err\n    }\n    // Call mem0 API to search, and convert to []*memory.Entry.\n    return nil, nil\n}\n\n// Other interfaces Update/Delete/Clear/Read map according to mem0 capabilities\n</code></pre> <p>Implementation points:</p> <ul> <li>Configure authentication and rate limiting according to target service guidelines.</li> <li>Return values strictly align with <code>memory.Entry</code> and <code>memory.Memory</code>, use UTC for time fields.</li> <li>Tool declarations should accurately describe input and output for frontend and model understanding.</li> <li>Add README, examples and tests to ensure compatibility with <code>runner</code>, <code>server/debug</code> combinations.</li> </ul> <p>Open Source Components That Can Be Integrated:</p> <ul> <li>PostgreSQL memory storage</li> <li>MongoDB memory storage</li> <li>Elasticsearch memory storage</li> <li>Redis memory storage</li> </ul> <p>Contribution Method:</p> <ul> <li>Create components under the corresponding directory (create a subdirectory with the corresponding component name)</li> <li>Contribute directly to <code>https://github.com/trpc-group/trpc-agent-go/memory/</code></li> </ul>"},{"location":"ecosystem/#7-observability-ecosystem","title":"7. Observability Ecosystem","text":"<p>Goal: Provide unified observability capabilities based on OpenTelemetry standards, covering Logging, Metrics, Tracing, facilitating ecosystem expansion and replacement.</p> <p>Core Packages and Interfaces:</p> <ul> <li>Logging: <code>trpc-agent-go/log</code> (<code>log.Logger</code> interface and <code>log.Default</code> global logger).</li> <li>Metrics: <code>trpc-agent-go/telemetry/metric</code> (global <code>metric.Meter</code> and <code>metric.Start</code> initialization).</li> <li>Tracing: <code>trpc-agent-go/telemetry/trace</code> (global <code>trace.Tracer</code> and <code>trace.Start</code> initialization).</li> <li>tRPC Integration: <code>trpc/log.go</code>, <code>trpc/telemetry/galileo/</code>.</li> </ul>"},{"location":"ecosystem/#logging","title":"Logging","text":"<ul> <li>Interface Definition: <code>log.Logger</code> defines <code>Debug/Info/Warn/Error/Fatal</code> and their <code>*f</code> variant methods, facilitating replacement with any implementation.</li> <li>Default Implementation: <code>log.Default</code> uses <code>zap</code>'s <code>SugaredLogger</code> by default.</li> <li>Dynamic Level: <code>log.SetLevel(level)</code> supports <code>debug/info/warn/error/fatal</code>.</li> <li>tRPC Integration: <code>trpc/log.go</code> injects <code>tlog.DefaultLogger</code> as <code>log.Default</code> and refreshes with tRPC plugin lifecycle.</li> </ul> <p>Example (using global logger):</p> <pre><code>package main\n\nimport (\n    \"context\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/log\"\n)\n\nfunc main() {\n    log.SetLevel(log.LevelInfo)\n    log.Info(\"app start\")\n    log.Debugf(\"ctx: %v\", context.Background())\n}\n</code></pre> <p>Example (in tRPC through configuration to disk/remote):</p> <pre><code>plugins:\n  log:\n    default:\n      - writer: console\n        level: info\n      - writer: file\n        level: warn\n        writer_config:\n          log_path: ./app.log\n</code></pre> <p>Contribution directions:</p> <ul> <li>Adapt any Logger (such as zerolog, logrus): implement <code>log.Logger</code> interface, and set <code>log.Default = yourLogger</code> during initialization.</li> <li>tRPC pluginization: reference <code>trpc/log.go</code>'s <code>plugin.RegisterSetupHook</code> usage.</li> </ul>"},{"location":"ecosystem/#metrics","title":"Metrics","text":"<ul> <li>Package: <code>telemetry/metric</code>.</li> <li>Global Object: <code>metric.Meter</code>, default <code>noop</code>, points to OTel Meter after calling <code>metric.Start</code>.</li> <li>Initialization: <code>metric.Start(ctx, metric.WithEndpoint(\"host:4317\"))</code>.</li> <li>OTLP Export: uses <code>otlpmetricgrpc</code>, supports environment variable override:<ul> <li><code>OTEL_EXPORTER_OTLP_METRICS_ENDPOINT</code>.</li> <li><code>OTEL_EXPORTER_OTLP_ENDPOINT</code> (fallback).</li> </ul> </li> <li>Resource Identification: automatically fills <code>service.namespace/name/version</code>.</li> </ul> <p>Example (start metrics and report Counter):</p> <pre><code>package main\n\nimport (\n    \"context\"\n\n    \"go.opentelemetry.io/otel/metric\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/telemetry/metric\" // alias ametric\n    ametric \"trpc.group/trpc-go/trpc-agent-go/telemetry/metric\"\n)\n\nfunc main() {\n    clean, _ := ametric.Start(context.Background(),\n        ametric.WithEndpoint(\"localhost:4317\"),\n    )\n    defer clean()\n\n    counter, _ := ametric.Meter.Int64Counter(\n        \"requests_total\",\n        metric.WithDescription(\"total requests\"),\n    )\n    counter.Add(context.Background(), 1)\n}\n</code></pre> <p>Contribution directions:</p> <ul> <li>Exporter ecosystem: encapsulate more OTel Exporter convenient startup methods (such as Prometheus pull/OTLP http).</li> <li>Metrics library: agree on common metric naming and label conventions, provide helper methods.</li> </ul>"},{"location":"ecosystem/#tracing","title":"Tracing","text":"<ul> <li>Package: <code>telemetry/trace</code>.</li> <li>Global Object: <code>trace.Tracer</code>, default <code>noop</code>, points to OTel Tracer after calling <code>trace.Start</code>.</li> <li>Initialization: <code>trace.Start(ctx, trace.WithEndpoint(\"host:4317\"))</code>.</li> <li>OTLP Export: uses <code>otlptracegrpc</code>, supports environment variable override:<ul> <li><code>OTEL_EXPORTER_OTLP_TRACES_ENDPOINT</code>.</li> <li><code>OTEL_EXPORTER_OTLP_ENDPOINT</code> (fallback).</li> </ul> </li> <li>Propagator: enables <code>TraceContext</code> by default.</li> </ul> <p>Example (start tracing and create Span):</p> <pre><code>package main\n\nimport (\n    \"context\"\n\n    \"go.opentelemetry.io/otel/trace\"\n    atrace \"trpc.group/trpc-go/trpc-agent-go/telemetry/trace\"\n)\n\nfunc main() {\n    clean, _ := atrace.Start(context.Background(),\n        atrace.WithEndpoint(\"localhost:4317\"),\n    )\n    defer clean()\n\n    ctx, span := atrace.Tracer.Start(context.Background(), \"example\",\n        trace.WithAttributes(),\n    )\n    _ = ctx\n    span.End()\n}\n</code></pre> <p>Contribution directions:</p> <ul> <li>Exporter ecosystem: encapsulate Zipkin, Jaeger (direct push) and other startup methods.</li> <li>Span conventions: agree on common Span names/attribute keys, provide helpers (can be placed in <code>telemetry/</code>).</li> </ul>"},{"location":"ecosystem/#8-api-service-ecosystem","title":"8. API Service Ecosystem","text":"<p>Goal: Provide unified, extensible API service encapsulation for frontend Chat interfaces (such as ADK Web, AG-UI, Agent UI), covering session management, conversation sending, streaming transmission, tool calls, observability and authentication capabilities, and align with various UI protocols for plug-and-play.</p> <p>Existing Implementation Reference:</p> <ul> <li>ADK Web Compatible HTTP Service: <code>server/debug</code>.<ul> <li>Endpoints (implemented):<ul> <li><code>GET /list-apps</code>: List available <code>Agent</code> applications.</li> <li><code>GET /apps/{appName}/users/{userId}/sessions</code>: List user sessions.</li> <li><code>POST /apps/{appName}/users/{userId}/sessions</code>: Create session.</li> <li><code>GET /apps/{appName}/users/{userId}/sessions/{sessionId}</code>: Query session.</li> <li><code>POST /run</code>: Non-streaming conversation inference, returns aggregated event list.</li> <li><code>POST /run_sse</code>: SSE streaming inference, returns token-level event stream.</li> <li><code>GET /debug/trace/{event_id}</code>: Query Trace attributes by event.</li> <li><code>GET /debug/trace/session/{session_id}</code>: Query Trace list by Session.</li> </ul> </li> <li>Features: Built-in CORS, pluggable session storage (default In-Memory), integrated with <code>runner.Runner</code>, observability instrumentation (exports key Spans).</li> </ul> </li> <li>A2A Server: <code>server/a2a</code>.<ul> <li>Service encapsulation for A2A protocol, built-in <code>AuthProvider</code> and task orchestration, suitable for platform-to-Agent integration scenarios.</li> </ul> </li> </ul> <p>Alignment with Frontend Protocols:</p> <ul> <li>ADK Web: Already aligned with request/response and event Schema, see <code>server/debug/internal/schema</code>.</li> <li>AG-UI: Reference <code>https://github.com/ag-ui-protocol/ag-ui</code>.<ul> <li>Required capabilities:<ul> <li>Session list/create/query.</li> <li>Text conversation and SSE streaming increment; support tool calls and function response fragment display.</li> <li>State/usage metadata, error expression alignment.</li> <li>Rich media support (InlineData) for files/images and server-side storage integration.</li> <li>Authentication (API Key, JWT, Cookie session) and CORS.</li> </ul> </li> <li>Recommend providing implementation in <code>server/agui/</code>, reuse common model and event mapping tools, complete protocol layer adaptation in Handler.</li> </ul> </li> <li>Agent UI (agno): Reference <code>https://docs.agno.com/agent-ui/introduction</code>.<ul> <li>Focus: SSE/WebSocket streaming, Tool call streaming UI feedback, session/artifact persistence.</li> </ul> </li> </ul> <p>Key Design Points:</p> <ul> <li>Schema Mapping:<ul> <li>Input: Map UI's <code>Content</code>/<code>Part</code> to internal <code>model.Message</code>.</li> <li>Output events: Map internal <code>event.Event</code> to UI-expected envelope/parts, structure tool calls and tool responses to avoid duplicate text display.</li> </ul> </li> <li>Streaming Transmission:<ul> <li>SSE already implemented in <code>server/debug</code>, prioritize reuse; WebSocket can be ecosystem extension.</li> <li>Non-streaming endpoints need to aggregate final messages and tool responses according to UI expectations.</li> </ul> </li> <li>Session Storage:<ul> <li>Inject specific implementation through <code>runner.WithSessionService</code>, reuse <code>session</code> module.</li> </ul> </li> <li>Observability:<ul> <li>Reuse <code>telemetry/trace</code> and <code>telemetry/metric</code>. <code>server/debug</code> already demonstrates how to export key Spans and event attributes for UI-side debugging and positioning.</li> </ul> </li> <li>Authentication and Security:<ul> <li>Support API Key/JWT/custom Header; add rate limiting and cross-domain control for sensitive endpoints.</li> </ul> </li> <li>Open Specifications:<ul> <li>Recommend attaching <code>openapi.json</code>/<code>README.md</code> to each <code>server/*</code> submodule for frontend/integration party integration.</li> </ul> </li> </ul> <p>Minimal Example (reuse ADK Web compatible service):</p> <pre><code>package main\n\nimport (\n    \"net/http\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    debugsrv \"trpc.group/trpc-go/trpc-agent-go/server/debug\"\n)\n\nfunc main() {\n    // 1. Register Agent.\n    ag := llmagent.New(\"assistant\")\n    s := debugsrv.New(map[string]agent.Agent{\n        ag.Info().Name: ag,\n    })\n    // 2. Expose HTTP Handler.\n    _ = http.ListenAndServe(\":8080\", s.Handler())\n}\n</code></pre> <p>AG-UI Adaptation Suggestion (skeleton):</p> <pre><code>package agui\n\nimport (\n    \"net/http\"\n\n    \"github.com/gorilla/mux\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n)\n\ntype Server struct {\n    router *mux.Router\n    ag     agent.Agent\n    run    runner.Runner\n}\n\nfunc New(ag agent.Agent, opts ...runner.Option) *Server {\n    r := runner.NewRunner(ag.Info().Name, ag, opts...)\n    s := &amp;Server{router: mux.NewRouter(), ag: ag, run: r}\n    s.routes()\n    return s\n}\n\nfunc (s *Server) Handler() http.Handler { return s.router }\n\nfunc (s *Server) routes() {\n    // GET /sessions, POST /sessions, GET /sessions/{id}\n    // POST /chat (non-stream), POST /chat/stream (SSE)\n}\n</code></pre> <p>Ecosystem Directions and Contribution Standards:</p> <ul> <li>Target UI/Protocols:<ul> <li>AG-UI: Provide HTTP + SSE adaptation in <code>server/agui/</code>, with examples and <code>openapi.json</code>.</li> </ul> </li> <li>Agent UI (agno): Provide HTTP + SSE / WebSocket adaptation in <code>server/agentui/</code>.<ul> <li>WebSocket/Bidi Streaming: Align with ADK <code>run_live</code>, provide real-time audio/video channels (depends on model-side support).</li> </ul> </li> <li>Implementation Requirements:<ul> <li>Clear event Schema, complete mapping, ensure tool calls/responses have good experience in UI.</li> <li>Support pluggable session storage, default In-Memory, recommend supporting Redis/MySQL etc.</li> <li>Built-in CORS, authentication middleware (API Key/JWT), expose health check endpoints.</li> <li>Observability: integrate <code>telemetry</code>, provide minimal Trace and Metric examples.</li> <li>Documentation: README, OpenAPI, end-to-end examples (include simple frontend or curl scripts).</li> </ul> </li> </ul> <p>Link references:</p> <ul> <li><code>server/debug</code> (ADK Web compatible) and its <code>openapi.json</code>. </li> <li><code>server/a2a</code> (A2A protocol encapsulation). </li> </ul>"},{"location":"ecosystem/#9-planner-ecosystem","title":"9. Planner Ecosystem","text":"<p>Goal: Provide diverse planners to adapt to different models and workflows, including built-in thinking capability adaptation and explicit planning (ReAct/Reflection, etc.).</p> <p>Interface Definition: <code>planner.Planner</code>.</p> <ul> <li><code>BuildPlanningInstruction(ctx, invocation, llmRequest) string</code>: Build or inject system prompts and request configurations for planning.</li> <li><code>ProcessPlanningResponse(ctx, invocation, response) *model.Response</code>: Post-process model responses for planning (optional).</li> </ul> <p>Existing Implementation Reference:</p> <ul> <li><code>planner/builtin</code>: Adapt O series, Claude, Gemini and other models with reasoning parameters, through configuring <code>ReasoningEffort</code>, <code>ThinkingEnabled</code>, <code>ThinkingTokens</code>.</li> <li><code>planner/react</code>: Provide explicit planning instructions and response post-processing, agree on <code>/*PLANNING*/</code>, <code>/*ACTION*/</code>, <code>/*REASONING*/</code>, <code>/*FINAL_ANSWER*/</code> and other tags.</li> </ul> <p>Ecosystem Directions:</p> <ul> <li>Reflection Planner: Self-reflective correction and multi-round re-planning.</li> <li>LangGraph style Planner: Align with Pregel parallel and checkpoint mechanisms.</li> <li>Tool-first Planner: Selection and constraints for Tool-First processes.</li> </ul> <p>Integration Example (skeleton):</p> <pre><code>package myplanner\n\nimport (\n    \"context\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/planner\"\n)\n\ntype Planner struct{}\n\nvar _ planner.Planner = (*Planner)(nil)\n\nfunc New() *Planner { return &amp;Planner{} }\n\nfunc (p *Planner) BuildPlanningInstruction(ctx context.Context, inv *agent.Invocation, req *model.Request) string {\n    // Can inject custom parameters into req, and return system prompt string.\n    return \"You must plan before action.\"\n}\n\nfunc (p *Planner) ProcessPlanningResponse(ctx context.Context, inv *agent.Invocation, \n    rsp *model.Response) *model.Response {\n    if rsp == nil {\n        return nil\n    }\n    // Can do structured segmentation or tool call correction on rsp.\n    return nil\n}\n</code></pre> <p>Combination and Usage: Inject Planner when creating <code>agent/llmagent</code>, or select different Planner strategies at <code>runner</code> layer as needed, combine with <code>Tool</code> and <code>Session</code> management for end-to-end implementation.</p> <p>Contribution Suggestions:</p> <ul> <li>Provide implementation and README, test cases, examples in <code>planner/&lt;name&gt;/</code>.</li> <li>Combine with <code>docs/overall-introduction.md</code>'s Observability and <code>server/debug</code> endpoints to provide end-to-end examples for frontend UI demonstration.</li> <li>Follow goimports and error message style, add periods at end of comments, code line breaks around 80 columns.</li> </ul>"},{"location":"ecosystem/#component-relationship-description","title":"Component Relationship Description","text":""},{"location":"ecosystem/#relationship-between-storage-session-and-memory","title":"Relationship between Storage, Session, and Memory","text":"<p>These three components have different responsibilities and relationships in the architecture:</p> <p>1. Storage (Storage Layer)</p> <ul> <li>Responsibility: Provide unified storage client management, provide infrastructure support for Session and Memory</li> <li>Function: Register, manage and obtain clients for various storage backends (Redis, PostgreSQL, MongoDB, etc.)</li> <li>Characteristics: As an infrastructure component, can be shared and used by Session and Memory components</li> </ul> <p>2. Session (Session Layer)</p> <ul> <li>Responsibility: Manage user session state and events</li> <li>Function: Create, get, delete sessions, manage session state, record session events</li> <li>Dependency: Can reuse Storage module clients</li> <li>Data Characteristics: Temporary data, can be cleaned up after session ends</li> </ul> <p>3. Memory (Memory Layer)</p> <ul> <li>Responsibility: Manage user long-term memory and personalized information</li> <li>Function: Add, search, update, delete user memories, provide memory tools</li> <li>Dependency: Can reuse Storage module clients</li> <li>Data Characteristics: Persistent data, maintained across sessions</li> </ul> <p>Relationship Diagram:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Application   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Session       \u2502    \u2502   Memory        \u2502\n\u2502   Service       \u2502    \u2502   Service       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502                      \u2502\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2502\n          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n          \u2502   Storage       \u2502\n          \u2502   Client        \u2502\n          \u2502   Management    \u2502\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2502\n          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n          \u2502   Storage       \u2502\n          \u2502   Backends      \u2502\n          \u2502   (Redis, DB)   \u2502\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Usage Example:</p> <pre><code>// 1. Register storage client.\nstorage.RegisterRedisInstance(\"default\", storage.WithClientBuilderURL(\"redis://localhost:6379\"))\n\n// 2. Session service uses storage client.\nsessionService, err := session.NewRedisService(\n    session.WithRedisInstance(\"default\"),\n)\n\n// 3. Memory service uses storage client.\nmemoryService, err := memory.NewRedisService(\n    memory.WithRedisInstance(\"default\"),\n)\n\n// 4. Use in application.\nsession, err := sessionService.CreateSession(ctx, sessionKey, state)\nmemory, err := memoryService.AddMemory(ctx, userKey, \"User likes coffee\", []string{\"preferences\"})\n</code></pre>"},{"location":"ecosystem/#contribution-guidance","title":"Contribution Guidance","text":""},{"location":"ecosystem/#contribution-guidance_1","title":"Contribution Guidance","text":"<p>Suitable Components:</p> <ul> <li>Various third-party service and tool integrations</li> <li>Open source component adapters</li> <li>Standard protocol support</li> <li>Framework functionality extensions</li> </ul> <p>Contribution Process:</p> <ol> <li>Fork <code>https://github.com/trpc-group/trpc-agent-go</code></li> <li>Create components under the corresponding module root directory (such as <code>model/somemodel</code>, <code>tool/sometool</code>, <code>agent/someagent</code>)</li> <li>Implement corresponding interfaces</li> <li>Write tests and documentation</li> <li>Submit Pull Request</li> </ol> <p>Directory Structure Example:</p> <pre><code>model/gemini/\n\u251c\u2500\u2500 model.go\n\u251c\u2500\u2500 config.go\n\u251c\u2500\u2500 examples/\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 gemini_test.go\n</code></pre>"},{"location":"ecosystem/#summary","title":"Summary","text":"<p>Ecosystem development is an important direction for tRPC-Agent-Go development. By implementing standard interfaces, various third-party services and tools can be easily integrated to expand the framework's capabilities.</p> <p>Key Contribution Points:</p> <ul> <li>Reference existing implementations to understand interface usage</li> <li>Choose appropriate contribution paths based on component types</li> <li>Follow unified interface specifications and code standards</li> <li>Provide complete test cases and documentation</li> </ul> <p>Determining Contribution Location:</p> <ul> <li>All components are contributed directly to the corresponding module directory on GitHub</li> </ul> <p>Storage, Session, Memory Component Characteristics:</p> <ul> <li>Storage: Provides unified client management, can be shared by Session and Memory</li> <li>Session: Manages temporary session data, can reuse Storage clients</li> <li>Memory: Manages persistent memory data, can reuse Storage clients</li> <li>The three components are decoupled through interfaces, supporting independent implementation and combined usage</li> </ul>"},{"location":"event/","title":"Event Usage Documentation","text":"<p>Event is the core communication mechanism between Agent and users in trpc-agent-go. It's like a message envelope that carries Agent response content, tool call results, error information, etc. Through Event, you can understand Agent's working status in real-time, handle streaming responses, implement multi-Agent collaboration, and track tool execution.</p>"},{"location":"event/#event-overview","title":"Event Overview","text":"<p>Event is the carrier for communication between Agent and users.</p> <p>Users obtain event streams through the <code>runner.Run()</code> method, then listen to event channels to handle Agent responses.</p>"},{"location":"event/#event-structure","title":"Event Structure","text":"<p><code>Event</code> represents an event between Agent and users, with the following structure definition:</p> <pre><code>type Event struct {\n    // Response is the basic response structure of Event, carrying LLM responses.\n    *model.Response\n\n    // InvocationID is the unique identifier for this invocation.\n    InvocationID string `json:\"invocationId\"`\n\n    // Author is the initiator of the event.\n    Author string `json:\"author\"`\n\n    // ID is the unique identifier of the event.\n    ID string `json:\"id\"`\n\n    // Timestamp is the timestamp of the event.\n    Timestamp time.Time `json:\"timestamp\"`\n\n    // Branch is a branch identifier for multi-Agent collaboration.\n    Branch string `json:\"branch,omitempty\"`\n\n    // RequiresCompletion indicates whether this event requires a completion signal.\n    RequiresCompletion bool `json:\"requiresCompletion,omitempty\"`\n\n    // LongRunningToolIDs is a set of IDs for long-running function calls.\n    // Agent clients will understand which function calls are long-running from this field.\n    // Only valid for function call events.\n    LongRunningToolIDs map[string]struct{} `json:\"longRunningToolIDs,omitempty\"`\n\n    // StateDelta contains state changes to be written to the session.\n    StateDelta map[string][]byte `json:\"stateDelta,omitempty\"`\n\n    // StructuredOutput carries a typed, in-memory structured payload (not serialized).\n    StructuredOutput any `json:\"-\"`\n\n    // Actions carry flow-level hints (e.g., skip post-tool summarization).\n    Actions *EventActions `json:\"actions,omitempty\"`\n}\n\n// EventActions provides optional behavior hints attached to the event.\ntype EventActions struct {\n    // SkipSummarization indicates the flow should not run a summarization LLM call\n    // after a tool.response event.\n    SkipSummarization bool `json:\"skipSummarization,omitempty\"`\n}\n</code></pre> <p><code>model.Response</code> is the basic response structure of Event, carrying LLM responses, tool calls, and error information, defined as follows:</p> <pre><code>type Response struct {\n    // Response unique identifier.\n    ID string `json:\"id\"`\n\n    // Object type (such as \"chat.completion\", \"error\", etc.), helps clients identify processing methods.\n    Object string `json:\"object\"`\n\n    // Creation timestamp.\n    Created int64 `json:\"created\"`\n\n    // Model name used.\n    Model string `json:\"model\"`\n\n    // Response options, LLM may generate multiple candidate responses for user selection, default is 1.\n    Choices []Choice `json:\"choices\"`\n\n    // Usage statistics, records token usage.\n    Usage *Usage `json:\"usage,omitempty\"`\n\n    // System fingerprint.\n    SystemFingerprint *string `json:\"system_fingerprint,omitempty\"`\n\n    // Error information.\n    Error *ResponseError `json:\"error,omitempty\"`\n\n    // Timestamp.\n    Timestamp time.Time `json:\"timestamp\"`\n\n    // Indicates whether the entire conversation is complete.\n    Done bool `json:\"done\"`\n\n    // Whether it's a partial response.\n    IsPartial bool `json:\"is_partial\"`\n}\n\ntype Choice struct {\n    // Choice index.\n    Index int `json:\"index\"`\n\n    // Complete message, contains the entire response.\n    Message Message `json:\"message,omitempty\"`\n\n    // Incremental message, used for streaming responses, only contains new content of current chunk.\n    // For example: complete response \"Hello, how can I help you?\" in streaming response:\n    // First event: Delta.Content = \"Hello\"\n    // Second event: Delta.Content = \", how\"  \n    // Third event: Delta.Content = \" can I help you?\"\n    Delta Message `json:\"delta,omitempty\"`\n\n    // Completion reason.\n    FinishReason *string `json:\"finish_reason,omitempty\"`\n}\n\ntype Message struct {\n    // Role of message initiator, such as \"system\", \"user\", \"assistant\", \"tool\".\n    Role string `json:\"role\"`\n\n    // Message content.\n    Content string `json:\"content\"`\n\n    // Content fragments for multimodal messages.\n    ContentParts []ContentPart `json:\"content_parts,omitempty\"`\n\n    // ID of the tool used by tool response.\n    ToolID string `json:\"tool_id,omitempty\"`\n\n    // Name of the tool used by tool response.\n    ToolName string `json:\"tool_name,omitempty\"`\n\n    // Optional tool calls.\n    ToolCalls []ToolCall `json:\"tool_calls,omitempty\"`\n}\n\ntype Usage struct {\n    // Number of tokens used in prompts.\n    PromptTokens int `json:\"prompt_tokens\"`\n\n    // Number of tokens used in completion.\n    CompletionTokens int `json:\"completion_tokens\"`\n\n    // Total number of tokens used in response.\n    TotalTokens int `json:\"total_tokens\"`\n}\n</code></pre>"},{"location":"event/#event-types","title":"Event Types","text":"<p>Events are created and sent in the following scenarios:</p> <ol> <li>User Message Events: Automatically created when users send messages</li> <li>Agent Response Events: Created when Agent generates responses</li> <li>Streaming Response Events: Created for each response chunk in streaming mode</li> <li>Tool Call Events: Created when Agent calls tools</li> <li>Error Events: Created when errors occur</li> <li>Agent Transfer Events: Created when Agent transfers to other Agents</li> <li>Completion Events: Created when Agent execution completes</li> </ol> <p>Based on the <code>model.Response.Object</code> field, Events can be divided into the following types:</p> <pre><code>const (\n    // Error event.\n    ObjectTypeError = \"error\"\n\n    // Tool response event.\n    ObjectTypeToolResponse = \"tool.response\"\n\n    // Preprocessing events.\n    ObjectTypePreprocessingBasic = \"preprocessing.basic\"\n    ObjectTypePreprocessingContent = \"preprocessing.content\"\n    ObjectTypePreprocessingIdentity = \"preprocessing.identity\"\n    ObjectTypePreprocessingInstruction = \"preprocessing.instruction\"\n    ObjectTypePreprocessingPlanning = \"preprocessing.planning\"\n\n    // Postprocessing events.\n    ObjectTypePostprocessingPlanning = \"postprocessing.planning\"\n    ObjectTypePostprocessingCodeExecution = \"postprocessing.code_execution\"\n\n    // Agent transfer event.\n    ObjectTypeTransfer = \"agent.transfer\"\n\n    // Runner completion event.\n    ObjectTypeRunnerCompletion = \"runner.completion\"\n)\n</code></pre>"},{"location":"event/#event-creation","title":"Event Creation","text":"<p>When developing custom Agent types or Processors, you need to create Events.</p> <p>Event provides three creation methods, suitable for different scenarios. Prefer these helpers instead of constructing <code>&amp;event.Event{}</code> directly.</p> <pre><code>// Create new event.\nfunc New(invocationID, author string, opts ...Option) *Event\n\n// Create error event.\nfunc NewErrorEvent(invocationID, author, errorType, errorMessage string) *Event\n\n// Create event from response.\nfunc NewResponseEvent(invocationID, author string, response *model.Response) *Event\n</code></pre> <p>Parameter Description:</p> <ul> <li><code>invocationID string</code>: Invocation unique identifier</li> <li><code>author string</code>: Event initiator</li> <li><code>opts ...Option</code>: Optional configuration options (New method only)</li> <li><code>errorType string</code>: Error type (NewErrorEvent method only)</li> <li><code>errorMessage string</code>: Error message (NewErrorEvent method only)</li> <li><code>response *model.Response</code>: Response object (NewResponseEvent method only)</li> </ul> <p>The framework supports the following Options for configuring Event:</p> <ul> <li><code>WithBranch(branch string)</code>: Set event branch identifier</li> <li><code>WithResponse(response *model.Response)</code>: Set event response content</li> <li><code>WithObject(o string)</code>: Set event type</li> </ul> <p>Example: <pre><code>// Create basic event.\nevt := event.New(\"invoke-123\", \"agent\")\n\n// Create event with branch.\nevt := event.New(\"invoke-123\", \"agent\", event.WithBranch(\"main\"))\n\n// Create error event.\nevt := event.NewErrorEvent(\"invoke-123\", \"agent\", \"api_error\", \"Request timeout\")\n\n// Create event from response.\nresponse := &amp;model.Response{\n    Object: \"chat.completion\",\n    Done:   true,\n    Choices: []model.Choice{{Message: model.Message{Role: \"assistant\", Content: \"Hello!\"}}},\n}\nevt := event.NewResponseEvent(\"invoke-123\", \"agent\", response)\n</code></pre></p>"},{"location":"event/#tool-response-streaming-including-agenttool-forwarding","title":"Tool Response Streaming (including AgentTool forwarding)","text":"<p>When a Streamable tool is invoked (including AgentTool), the framework emits <code>tool.response</code> events. In streaming mode:</p> <ul> <li>Each partial chunk appears in <code>choice.Delta.Content</code>, <code>Done=false</code>, <code>IsPartial=true</code>.</li> <li>Final tool messages arrive with <code>choice.Message.Role=tool</code> and <code>choice.Message.Content</code>.</li> </ul> <p>When AgentTool enables <code>WithStreamInner(true)</code>, it also forwards the child Agent\u2019s events inline to the parent flow:</p> <ul> <li>Forwarded child events are standard <code>event.Event</code> items; incremental text appears in <code>choice.Delta.Content</code>.</li> <li>To avoid duplicate display, the child\u2019s final full message is not forwarded; it is aggregated into the final <code>tool.response</code> content so the next LLM turn has tool messages as required by some providers.</li> </ul> <p>Runner automatically sends completion signals for events requiring them (<code>RequiresCompletion=true</code>), so manual handling is not needed.</p> <p>Example handling in an event loop:</p> <pre><code>if evt.Response != nil &amp;&amp; evt.Object == model.ObjectTypeToolResponse &amp;&amp; len(evt.Response.Choices) &gt; 0 {\n    for _, ch := range evt.Response.Choices {\n        if ch.Delta.Content != \"\" { // partial\n            fmt.Print(ch.Delta.Content)\n            continue\n        }\n        if ch.Message.Role == model.RoleTool &amp;&amp; ch.Message.Content != \"\" { // final\n            fmt.Println(strings.TrimSpace(ch.Message.Content))\n        }\n    }\n    // Continue to next event; don't treat as assistant content\n    continue\n}\n</code></pre> <p>Tip: For custom events, always use <code>event.New(...)</code> with <code>WithResponse</code>, <code>WithBranch</code>, etc., to ensure IDs and timestamps are set consistently.</p>"},{"location":"event/#event-methods","title":"Event Methods","text":"<p>Event provides the <code>Clone</code> method for creating deep copies of Events.</p> <pre><code>func (e *Event) Clone() *Event\n</code></pre>"},{"location":"event/#event-usage-examples","title":"Event Usage Examples","text":"<p>This example demonstrates how to use Event in real applications to handle Agent streaming responses, tool calls, and error handling.</p>"},{"location":"event/#core-flow","title":"Core Flow","text":"<ol> <li>Send User Message: Start Agent processing through <code>runner.Run()</code></li> <li>Receive Event Stream: Handle events returned by Agent in real-time</li> <li>Handle Different Event Types: Distinguish streaming content, tool calls, errors, etc.</li> <li>Visual Output: Provide user-friendly interactive experience</li> </ol>"},{"location":"event/#code-example","title":"Code Example","text":"<pre><code>// processMessage handles single message interaction.\nfunc (c *multiTurnChat) processMessage(ctx context.Context, userMessage string) error {\n    message := model.NewUserMessage(userMessage)\n\n    // Run agent through runner.\n    eventChan, err := c.runner.Run(ctx, c.userID, c.sessionID, message)\n    if err != nil {\n        return fmt.Errorf(\"failed to run agent: %w\", err)\n    }\n\n    // Handle response.\n    return c.processResponse(eventChan)\n}\n\n// processResponse handles response, including streaming response and tool call visualization.\nfunc (c *multiTurnChat) processResponse(eventChan &lt;-chan *event.Event) error {\n    fmt.Print(\"\ud83e\udd16 Assistant: \")\n\n    var (\n        fullContent       string        // Accumulated complete content.\n        toolCallsDetected bool          // Whether tool calls are detected.\n        assistantStarted  bool          // Whether Assistant has started replying.\n    )\n\n    for event := range eventChan {\n        // Handle single event.\n        if err := c.handleEvent(event, &amp;toolCallsDetected, &amp;assistantStarted, &amp;fullContent); err != nil {\n            return err\n        }\n\n        // Check if it's the final event.\n        if event.Done &amp;&amp; !c.isToolEvent(event) {\n            fmt.Printf(\"\\n\")\n            break\n        }\n    }\n\n    return nil\n}\n\n// handleEvent handles single event.\nfunc (c *multiTurnChat) handleEvent(\n    event *event.Event,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n    fullContent *string,\n) error {\n    // 1. Handle error events.\n    if event.Error != nil {\n        fmt.Printf(\"\\n\u274c Error: %s\\n\", event.Error.Message)\n        return nil\n    }\n\n    // 2. Handle tool calls.\n    if c.handleToolCalls(event, toolCallsDetected, assistantStarted) {\n        return nil\n    }\n\n    // 3. Handle tool responses.\n    if c.handleToolResponses(event) {\n        return nil\n    }\n\n    // 4. Handle content.\n    c.handleContent(event, toolCallsDetected, assistantStarted, fullContent)\n\n    return nil\n}\n\n// handleToolCalls detects and displays tool calls.\nfunc (c *multiTurnChat) handleToolCalls(\n    event *event.Event,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n) bool {\n    if len(event.Choices) &gt; 0 &amp;&amp; len(event.Choices[0].Message.ToolCalls) &gt; 0 {\n        *toolCallsDetected = true\n        if *assistantStarted {\n            fmt.Printf(\"\\n\")\n        }\n        fmt.Printf(\"\ud83d\udd27 Tool calls initiated:\\n\")\n        for _, toolCall := range event.Choices[0].Message.ToolCalls {\n            fmt.Printf(\"   \u2022 %s (ID: %s)\\n\", toolCall.Function.Name, toolCall.ID)\n            if len(toolCall.Function.Arguments) &gt; 0 {\n                fmt.Printf(\"     Args: %s\\n\", string(toolCall.Function.Arguments))\n            }\n        }\n        fmt.Printf(\"\\n\ud83d\udd04 Executing tools...\\n\")\n        return true\n    }\n    return false\n}\n\n// handleToolResponses detects and displays tool responses.\nfunc (c *multiTurnChat) handleToolResponses(event *event.Event) bool {\n    if event.Response != nil &amp;&amp; len(event.Response.Choices) &gt; 0 {\n        for _, choice := range event.Response.Choices {\n            if choice.Message.Role == model.RoleTool &amp;&amp; choice.Message.ToolID != \"\" {\n                fmt.Printf(\"\u2705 Tool response (ID: %s): %s\\n\",\n                    choice.Message.ToolID,\n                    strings.TrimSpace(choice.Message.Content))\n                return true\n            }\n        }\n    }\n    return false\n}\n\n// handleContent handles and displays content.\nfunc (c *multiTurnChat) handleContent(\n    event *event.Event,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n    fullContent *string,\n) {\n    if len(event.Choices) &gt; 0 {\n        choice := event.Choices[0]\n        content := c.extractContent(choice)\n\n        if content != \"\" {\n            c.displayContent(content, toolCallsDetected, assistantStarted, fullContent)\n        }\n    }\n}\n\n// extractContent extracts content based on streaming mode.\nfunc (c *multiTurnChat) extractContent(choice model.Choice) string {\n    if c.streaming {\n        // Streaming mode: use incremental content.\n        return choice.Delta.Content\n    }\n    // Non-streaming mode: use complete message content.\n    return choice.Message.Content\n}\n\n// displayContent prints content to console.\nfunc (c *multiTurnChat) displayContent(\n    content string,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n    fullContent *string,\n) {\n    if !*assistantStarted {\n        if *toolCallsDetected {\n            fmt.Printf(\"\\n\ud83e\udd16 Assistant: \")\n        }\n        *assistantStarted = true\n    }\n    fmt.Print(content)\n    *fullContent += content\n}\n\n// isToolEvent checks if event is a tool response.\nfunc (c *multiTurnChat) isToolEvent(event *event.Event) bool {\n    if event.Response == nil {\n        return false\n    }\n\n    // Check if there are tool calls.\n    if len(event.Choices) &gt; 0 &amp;&amp; len(event.Choices[0].Message.ToolCalls) &gt; 0 {\n        return true\n    }\n\n    // Check if there's a tool ID.\n    if len(event.Choices) &gt; 0 &amp;&amp; event.Choices[0].Message.ToolID != \"\" {\n        return true\n    }\n\n    // Check if it's a tool role.\n    for _, choice := range event.Response.Choices {\n        if choice.Message.Role == model.RoleTool {\n            return true\n        }\n    }\n\n    return false\n}\n</code></pre>"},{"location":"graph/","title":"Graph Package Usage Guide","text":"<p>The Graph package is a core component in trpc-agent-go for building and executing workflows. It provides a type-safe, extensible graph execution engine that supports complex AI workflow orchestration.</p>"},{"location":"graph/#overview","title":"Overview","text":"<p>The Graph package allows you to model complex AI workflows as directed graphs, where nodes represent processing steps and edges represent data flow and control flow. It is particularly suitable for building AI applications that require conditional routing, state management, and multi-step processing.</p>"},{"location":"graph/#usage-pattern","title":"Usage Pattern","text":"<p>The usage of the Graph package follows this pattern:</p> <ol> <li>Create Graph: Use <code>StateGraph</code> builder to define workflow structure</li> <li>Create GraphAgent: Wrap the compiled Graph as an Agent</li> <li>Create Runner: Use Runner to manage sessions and execution environment</li> <li>Execute Workflow: Execute workflow through Runner and handle results</li> </ol> <p>This pattern provides:</p> <ul> <li>Type Safety: Ensures data consistency through state schema</li> <li>Session Management: Supports concurrent execution for multiple users and sessions</li> <li>Event Stream: Real-time monitoring of workflow execution progress</li> <li>Error Handling: Unified error handling and recovery mechanisms</li> </ul>"},{"location":"graph/#agent-integration","title":"Agent Integration","text":"<p>GraphAgent implements the <code>agent.Agent</code> interface and can:</p> <ul> <li>Act as Independent Agent: Execute directly through Runner</li> <li>Act as SubAgent: Be used as a sub-agent by other Agents (such as LLMAgent)</li> <li>Host SubAgents: Register child agents via <code>graphagent.WithSubAgents</code> and invoke them through <code>AddAgentNode</code></li> </ul> <p>This design lets GraphAgent plug into other agents while orchestrating its own specialized sub-agents.</p>"},{"location":"graph/#key-features","title":"Key Features","text":"<ul> <li>Type-safe state management: Use Schema to define state structure, support custom Reducers</li> <li>Conditional routing: Dynamically select execution paths based on state</li> <li>LLM node integration: Built-in support for large language models</li> <li>Tool nodes: Support function calls and external tool integration</li> <li>Agent nodes: Delegate parts of the workflow to registered sub-agents</li> <li>Streaming execution: Support real-time event streams and progress tracking</li> <li>Concurrency safety: Thread-safe graph execution</li> <li>Checkpoint-based Time Travel: Navigate through execution history and restore previous states</li> <li>Human-in-the-Loop (HITL): Support for interactive workflows with interrupt and resume capabilities</li> <li>Atomic checkpointing: Atomic storage of checkpoints with pending writes for reliable recovery</li> <li>Checkpoint Lineage: Track related checkpoints forming execution threads with parent-child relationships</li> </ul>"},{"location":"graph/#core-concepts","title":"Core Concepts","text":""},{"location":"graph/#1-graph","title":"1. Graph","text":"<p>A graph is the core structure of a workflow, consisting of nodes and edges:</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\n// Create state schema.\nschema := graph.NewStateSchema()\n\n// Create graph.\ngraph := graph.New(schema)\n</code></pre> <p>Virtual Nodes:</p> <ul> <li><code>Start</code>: Virtual start node, automatically connected through <code>SetEntryPoint()</code></li> <li><code>End</code>: Virtual end node, automatically connected through <code>SetFinishPoint()</code></li> <li>These nodes don't need to be explicitly created, the system automatically handles connections</li> </ul>"},{"location":"graph/#2-node","title":"2. Node","text":"<p>A node represents a processing step in the workflow:</p> <pre><code>import (\n    \"context\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\n// Node function signature.\ntype NodeFunc func(ctx context.Context, state graph.State) (any, error)\n\n// Create node.\nnode := &amp;graph.Node{\n    ID:          \"process_data\",\n    Name:        \"Data Processing\",\n    Description: \"Process input data\",\n    Function:    processDataFunc,\n}\n</code></pre>"},{"location":"graph/#3-state","title":"3. State","text":"<p>State is a data container passed between nodes:</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\n// State is a key-value pair mapping.\ntype State map[string]any\n\n// User-defined state keys.\nconst (\n    StateKeyInput         = \"input\"          // Input data.\n    StateKeyResult        = \"result\"         // Processing result.\n    StateKeyProcessedData = \"processed_data\" // Processed data.\n    StateKeyStatus        = \"status\"         // Processing status.\n)\n</code></pre> <p>Built-in State Keys:</p> <p>The Graph package provides some built-in state keys, mainly for internal system communication:</p> <p>User-accessible Built-in Keys:</p> <ul> <li><code>StateKeyUserInput</code>: User input (one-shot, cleared after consumption, persisted by LLM nodes)</li> <li><code>StateKeyOneShotMessages</code>: One-shot messages (complete override for current round, cleared after consumption)</li> <li><code>StateKeyLastResponse</code>: Last response (used to set final output, Executor reads this value as result)</li> <li><code>StateKeyMessages</code>: Message history (durable, supports append + MessageOp patch operations)</li> <li><code>StateKeyNodeResponses</code>: Per-node responses map. Key is node ID, value is the   node's final textual response. Use <code>StateKeyLastResponse</code> for the final   serial output; when multiple parallel nodes converge, read each node's   output from <code>StateKeyNodeResponses</code>.</li> <li><code>StateKeyMetadata</code>: Metadata (general metadata storage available to users)</li> </ul> <p>System Internal Keys (users should not use directly):</p> <ul> <li><code>StateKeySession</code>: Session information (automatically set by GraphAgent)</li> <li><code>StateKeyExecContext</code>: Execution context (automatically set by Executor)</li> <li><code>StateKeyToolCallbacks</code>: Tool callbacks (automatically set by Executor)</li> <li><code>StateKeyModelCallbacks</code>: Model callbacks (automatically set by Executor)</li> </ul> <p>Users should use custom state keys to store business data, and only use user-accessible built-in state keys when necessary.</p>"},{"location":"graph/#4-state-schema","title":"4. State Schema","text":"<p>State schema defines the structure and behavior of state:</p> <pre><code>import (\n    \"reflect\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\n// Create state schema.\nschema := graph.NewStateSchema()\n\n// Add field definitions.\nschema.AddField(\"counter\", graph.StateField{\n    Type:    reflect.TypeOf(0),\n    Reducer: graph.DefaultReducer,\n    Default: func() any { return 0 },\n})\n</code></pre>"},{"location":"graph/#usage-guide","title":"Usage Guide","text":""},{"location":"graph/#node-io-conventions","title":"Node I/O Conventions","text":"<p>Nodes communicate exclusively through the shared state. Each node returns a state delta which is merged into the graph state using the schema\u2019s reducers. Downstream nodes read whatever upstream nodes wrote.</p> <ul> <li>Common built\u2011in keys (user\u2011facing)<ul> <li><code>user_input</code>: One\u2011shot input for the next LLM/Agent node. Cleared after consumption.</li> <li><code>one_shot_messages</code>: Full message override for the next LLM call. Cleared after consumption.</li> <li><code>messages</code>: Durable conversation history (LLM/Tools append here). Supports MessageOp patches.</li> <li><code>last_response</code>: The last textual assistant response.</li> <li><code>node_responses</code>: Map[nodeID]any \u2014 per\u2011node final textual response. Use <code>last_response</code> for the most recent.</li> </ul> </li> </ul> <ul> <li>Function node<ul> <li>Input: the entire state</li> <li>Output: return a <code>graph.State</code> delta with custom keys (declare them in the schema), e.g. <code>{\"parsed_time\": \"...\"}</code></li> </ul> </li> </ul> <ul> <li>LLM node<ul> <li>Input priority: <code>one_shot_messages</code> \u2192 <code>user_input</code> \u2192 <code>messages</code></li> <li>Output:<ul> <li>Appends assistant message to <code>messages</code></li> <li>Sets <code>last_response</code></li> <li>Sets <code>node_responses[&lt;llm_node_id&gt;]</code></li> </ul> </li> </ul> </li> </ul> <ul> <li>Tools node<ul> <li>Input: scans <code>messages</code> for the latest assistant message with <code>tool_calls</code></li> <li>Output: appends tool responses to <code>messages</code></li> </ul> </li> </ul> <ul> <li>Agent node (sub\u2011agent)<ul> <li>Input: state is injected into the sub\u2011agent\u2019s <code>Invocation.RunOptions.RuntimeState</code>.<ul> <li>Model/Tool callbacks can access it via <code>agent.InvocationFromContext(ctx)</code>.</li> </ul> </li> <li>Output on finish:<ul> <li>Sets <code>last_response</code></li> <li>Sets <code>node_responses[&lt;agent_node_id&gt;]</code></li> <li>Clears <code>user_input</code></li> </ul> </li> </ul> </li> </ul> <p>Recommended patterns</p> <ul> <li>Add your own keys in the schema (e.g., <code>parsed_time</code>, <code>final_payload</code>) and write/read them in function nodes.</li> <li>To feed structured hints into an LLM node, write <code>one_shot_messages</code> in the previous node (e.g., prepend a system message with parsed context).</li> <li>To consume an upstream node\u2019s text, read <code>last_response</code> immediately downstream or fetch from <code>node_responses[that_node_id]</code> later.</li> </ul> <p>See examples:</p> <ul> <li><code>examples/graph/io_conventions</code> \u2014 Function + LLM + Agent I/O</li> <li><code>examples/graph/io_conventions_tools</code> \u2014 Adds a Tools node path and shows how to capture tool JSON</li> </ul>"},{"location":"graph/#constant-references-import-and-keys","title":"Constant references (import and keys)","text":"<ul> <li>Import: <code>import \"trpc.group/trpc-go/trpc-agent-go/graph\"</code></li> <li>Defined in: <code>graph/state.go</code></li> </ul> <ul> <li>User\u2011facing keys<ul> <li><code>user_input</code> \u2192 <code>graph.StateKeyUserInput</code></li> <li><code>one_shot_messages</code> \u2192 <code>graph.StateKeyOneShotMessages</code></li> <li><code>messages</code> \u2192 <code>graph.StateKeyMessages</code></li> <li><code>last_response</code> \u2192 <code>graph.StateKeyLastResponse</code></li> <li><code>node_responses</code> \u2192 <code>graph.StateKeyNodeResponses</code></li> </ul> </li> </ul> <ul> <li>Other useful keys<ul> <li><code>session</code> \u2192 <code>graph.StateKeySession</code></li> <li><code>metadata</code> \u2192 <code>graph.StateKeyMetadata</code></li> <li><code>current_node_id</code> \u2192 <code>graph.StateKeyCurrentNodeID</code></li> <li><code>exec_context</code> \u2192 <code>graph.StateKeyExecContext</code></li> <li><code>tool_callbacks</code> \u2192 <code>graph.StateKeyToolCallbacks</code></li> <li><code>model_callbacks</code> \u2192 <code>graph.StateKeyModelCallbacks</code></li> <li><code>agent_callbacks</code> \u2192 <code>graph.StateKeyAgentCallbacks</code></li> <li><code>parent_agent</code> \u2192 <code>graph.StateKeyParentAgent</code></li> </ul> </li> </ul> <p>Snippet:</p> <pre><code>import (\n    \"context\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\nfunc myNode(ctx context.Context, state graph.State) (any, error) {\n    last, _ := state[graph.StateKeyLastResponse].(string)\n    return graph.State{\"my_key\": last}, nil\n}\n</code></pre>"},{"location":"graph/#event-metadata-keys-statedelta","title":"Event metadata keys (StateDelta)","text":"<ul> <li>Import: <code>import \"trpc.group/trpc-go/trpc-agent-go/graph\"</code></li> <li>Defined in: <code>graph/events.go</code></li> </ul> <ul> <li>Model metadata: <code>_model_metadata</code> \u2192 <code>graph.MetadataKeyModel</code> (struct <code>graph.ModelExecutionMetadata</code>)</li> <li>Tool metadata: <code>_tool_metadata</code> \u2192 <code>graph.MetadataKeyTool</code> (struct <code>graph.ToolExecutionMetadata</code>)</li> </ul> <p>Snippet:</p> <pre><code>if b, ok := event.StateDelta[graph.MetadataKeyModel]; ok {\n    var md graph.ModelExecutionMetadata\n    _ = json.Unmarshal(b, &amp;md)\n}\n</code></pre>"},{"location":"graph/#1-creating-graphagent-and-runner","title":"1. Creating GraphAgent and Runner","text":"<p>Users mainly use the Graph package by creating GraphAgent and then using it through Runner. This is the recommended usage pattern:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/graphagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/event\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n)\n\nfunc main() {\n    // 1. Create state schema.\n    schema := graph.MessagesStateSchema()\n\n    // 2. Create state graph builder.\n    stateGraph := graph.NewStateGraph(schema)\n\n    // 3. Add nodes.\n    stateGraph.AddNode(\"start\", startNodeFunc).\n        AddNode(\"process\", processNodeFunc)\n\n    // 4. Set edges.\n    stateGraph.AddEdge(\"start\", \"process\")\n\n    // 5. Set entry point and finish point.\n    // SetEntryPoint automatically creates edge from virtual Start node to \"start\" node.\n    // SetFinishPoint automatically creates edge from \"process\" node to virtual End node.\n    stateGraph.SetEntryPoint(\"start\").\n        SetFinishPoint(\"process\")\n\n    // 6. Compile graph.\n    compiledGraph, err := stateGraph.Compile()\n    if err != nil {\n        panic(err)\n    }\n\n    // 7. Create GraphAgent.\n    graphAgent, err := graphagent.New(\"simple-workflow\", compiledGraph,\n        graphagent.WithDescription(\"Simple workflow example\"),\n        graphagent.WithInitialState(graph.State{}),\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    // 8. Create session service.\n    sessionService := inmemory.NewSessionService()\n\n    // 9. Create Runner.\n    appRunner := runner.NewRunner(\n        \"simple-app\",\n        graphAgent,\n        runner.WithSessionService(sessionService),\n    )\n\n    // 10. Execute workflow.\n    ctx := context.Background()\n    userID := \"user\"\n    sessionID := fmt.Sprintf(\"session-%d\", time.Now().Unix())\n\n    // Create user message (Runner automatically puts message content into StateKeyUserInput).\n    message := model.NewUserMessage(\"Hello World\")\n\n    // Execute through Runner.\n    eventChan, err := appRunner.Run(ctx, userID, sessionID, message)\n    if err != nil {\n        panic(err)\n    }\n\n    // Handle event stream.\n    for event := range eventChan {\n        if event.Error != nil {\n            fmt.Printf(\"Error: %s\\n\", event.Error.Message)\n            continue\n        }\n\n        if len(event.Choices) &gt; 0 {\n            choice := event.Choices[0]\n            if choice.Delta.Content != \"\" {\n                fmt.Print(choice.Delta.Content)\n            }\n        }\n\n        if event.Done {\n            break\n        }\n    }\n}\n\n// Node function implementations.\nfunc startNodeFunc(ctx context.Context, state graph.State) (any, error) {\n    // Get user input from built-in StateKeyUserInput (automatically set by Runner).\n    input := state[graph.StateKeyUserInput].(string)\n    return graph.State{\n        StateKeyProcessedData: fmt.Sprintf(\"Processed: %s\", input),\n    }, nil\n}\n\nfunc processNodeFunc(ctx context.Context, state graph.State) (any, error) {\n    processed := state[StateKeyProcessedData].(string)\n    result := fmt.Sprintf(\"Result: %s\", processed)\n    return graph.State{\n        StateKeyResult: result,\n        // Use built-in StateKeyLastResponse to set final output.\n        graph.StateKeyLastResponse: fmt.Sprintf(\"Final result: %s\", result),\n    }, nil\n}\n</code></pre>"},{"location":"graph/#2-using-llm-nodes","title":"2. Using LLM Nodes","text":"<p>LLM nodes implement a fixed three-stage input rule without extra configuration:</p> <ol> <li>OneShot first: If <code>one_shot_messages</code> exists, use it as the input for this round.</li> <li>UserInput next: Otherwise, if <code>user_input</code> exists, persist once to history.</li> <li>History default: Otherwise, use durable <code>messages</code> as input.</li> </ol> <pre><code>// Create LLM model.\nmodel := openai.New(\"gpt-4\")\n\n// Add LLM node.\nstateGraph.AddLLMNode(\"analyze\", model,\n    `You are a document analysis expert. Analyze the provided document and:\n1. Classify document type and complexity\n2. Extract key themes\n3. Evaluate content quality\nPlease provide structured analysis results.`,\n    nil) // Tool mapping.\n</code></pre> <p>Important notes:</p> <ul> <li>System prompt is only used for this round and is not persisted to state.</li> <li>One-shot keys (<code>user_input</code> / <code>one_shot_messages</code>) are automatically cleared after successful execution.</li> <li>All state updates are atomic.</li> <li>GraphAgent/Runner only sets <code>user_input</code> and no longer pre-populates <code>messages</code> with a user message. This allows any pre-LLM node to modify <code>user_input</code> and have it take effect in the same round.</li> </ul>"},{"location":"graph/#three-input-paradigms","title":"Three input paradigms","text":"<ul> <li> <p>OneShot (<code>StateKeyOneShotMessages</code>):</p> <ul> <li>When present, only the provided <code>[]model.Message</code> is used for this round, typically including a full system prompt and user prompt. Automatically cleared afterwards.</li> <li>Use case: a dedicated pre-node constructs the full prompt and must fully override input.</li> </ul> </li> </ul> <ul> <li> <p>UserInput (<code>StateKeyUserInput</code>):</p> <ul> <li>When non-empty, the LLM node uses durable <code>messages</code> plus this round's user input to call the model. After the call, it writes the user input and assistant reply to <code>messages</code> using <code>MessageOp</code> (e.g., <code>AppendMessages</code>, <code>ReplaceLastUser</code>) atomically, and clears <code>user_input</code> to avoid repeated appends.</li> <li>Use case: conversational flows where pre-nodes may adjust user input.</li> </ul> </li> </ul> <ul> <li>Messages only (just <code>StateKeyMessages</code>):<ul> <li>Common in tool-call loops. After the first round via <code>user_input</code>, routing to tools and back to LLM, since <code>user_input</code> is cleared, the LLM uses only <code>messages</code> (history). The tail is often a <code>tool</code> response, enabling the model to continue reasoning based on tool outputs.</li> </ul> </li> </ul>"},{"location":"graph/#atomic-updates-with-reducer-and-messageop","title":"Atomic updates with Reducer and MessageOp","text":"<p>The Graph package supports <code>MessageOp</code> patch operations (e.g., <code>ReplaceLastUser</code>, <code>AppendMessages</code>) on message state via <code>MessageReducer</code> to achieve atomic merges. Benefits:</p> <ul> <li>Pre-LLM nodes can modify <code>user_input</code>. The LLM node returns a single state delta with the needed patch operations (replace last user message, append assistant message) for one-shot, race-free persistence.</li> <li>Backwards compatible with appending <code>[]Message</code>, while providing more expressive updates for complex cases.</li> </ul> <p>Example: modify <code>user_input</code> in a pre-node before entering the LLM node.</p> <pre><code>stateGraph.\n    AddNode(\"prepare_input\", func(ctx context.Context, s graph.State) (any, error) {\n        cleaned := strings.TrimSpace(s[graph.StateKeyUserInput].(string))\n        return graph.State{graph.StateKeyUserInput: cleaned}, nil\n    }).\n    AddLLMNode(\"ask\", modelInstance,\n        \"You are a helpful assistant. Answer concisely.\",\n        nil).\n    SetEntryPoint(\"prepare_input\").\n    SetFinishPoint(\"ask\")\n</code></pre>"},{"location":"graph/#3-graphagent-configuration-options","title":"3. GraphAgent Configuration Options","text":"<p>GraphAgent supports various configuration options:</p> <pre><code>// Multiple options can be used when creating GraphAgent.\ngraphAgent, err := graphagent.New(\n    \"workflow-name\",\n    compiledGraph,\n    graphagent.WithDescription(\"Workflow description\"),\n    graphagent.WithInitialState(graph.State{\n        \"initial_data\": \"Initial data\",\n    }),\n    graphagent.WithChannelBufferSize(1024),            // Tune event buffer size\n    graphagent.WithCheckpointSaver(memorySaver),       // Persist checkpoints if needed\n    graphagent.WithSubAgents([]agent.Agent{subAgent}), // Register sub-agents by name\n    graphagent.WithAgentCallbacks(&amp;agent.Callbacks{\n        // Agent-level callbacks.\n    }),\n)\n</code></pre> <p>Model/tool callbacks are configured per node, e.g. <code>AddLLMNode(..., graph.WithModelCallbacks(...))</code> or <code>AddToolsNode(..., graph.WithToolCallbacks(...))</code>.</p> <p>Once sub-agents are registered you can delegate within the graph via agent nodes:</p> <pre><code>// Assume subAgent.Info().Name == \"assistant\"\nstateGraph.AddAgentNode(\"assistant\",\n    graph.WithName(\"Delegate to assistant agent\"),\n    graph.WithDescription(\"Invoke the pre-registered assistant agent\"),\n)\n\n// During execution the GraphAgent looks up a sub-agent with the same name and runs it\n</code></pre> <p>The agent node uses its ID for the lookup, so keep <code>AddAgentNode(\"assistant\")</code> aligned with <code>subAgent.Info().Name == \"assistant\"</code>.</p>"},{"location":"graph/#4-conditional-routing","title":"4. Conditional Routing","text":"<pre><code>// Define condition function.\nfunc complexityCondition(ctx context.Context, state graph.State) (string, error) {\n    complexity := state[\"complexity\"].(string)\n    if complexity == \"simple\" {\n        return \"simple_process\", nil\n    }\n    return \"complex_process\", nil\n}\n\n// Add conditional edges.\nstateGraph.AddConditionalEdges(\"analyze\", complexityCondition, map[string]string{\n    \"simple_process\":  \"simple_node\",\n    \"complex_process\": \"complex_node\",\n})\n</code></pre>"},{"location":"graph/#5-tool-node-integration","title":"5. Tool Node Integration","text":"<pre><code>// Create tools.\ntools := map[string]tool.Tool{\n    \"calculator\": calculatorTool,\n    \"search\":     searchTool,\n}\n\n// Add tool node.\nstateGraph.AddToolsNode(\"tools\", tools)\n\n// Add conditional routing from LLM to tools.\nstateGraph.AddToolsConditionalEdges(\"llm_node\", \"tools\", \"fallback_node\")\n</code></pre> <p>Tool-call pairing and second entry into LLM:</p> <ul> <li>Scan <code>messages</code> backward from the tail to find the most recent <code>assistant(tool_calls)</code>; stop at <code>user</code> to ensure correct pairing.</li> <li>When returning from tools to the LLM node, since <code>user_input</code> is cleared, the LLM follows the \u201cMessages only\u201d branch and continues based on the tool response in history.</li> </ul>"},{"location":"graph/#placeholder-variables-in-llm-instructions","title":"Placeholder Variables in LLM Instructions","text":"<p>LLM nodes support placeholder injection in their <code>instruction</code> string (same rules as LLMAgent):</p> <ul> <li><code>{key}</code> \u2192 replaced by <code>session.State[\"key\"]</code></li> <li><code>{key?}</code> \u2192 optional; missing values become empty</li> <li><code>{user:subkey}</code>, <code>{app:subkey}</code>, <code>{temp:subkey}</code> \u2192 access user/app/temp scopes (session services merge app/user state into session with these prefixes)</li> </ul> <p>Notes:</p> <ul> <li>GraphAgent writes the current <code>*session.Session</code> into graph state under <code>StateKeySession</code>; the LLM node reads values from there</li> <li>Unprefixed keys (e.g., <code>research_topics</code>) must be present directly in <code>session.State</code></li> </ul> <p>Example:</p> <pre><code>mdl := openai.New(modelName)\nstateGraph.AddLLMNode(\n  \"research\",\n  mdl,\n  \"You are a research assistant. Focus: {research_topics}. User: {user:topics?}. App: {app:banner?}.\",\n  nil,\n)\n</code></pre> <p>See the runnable example: <code>examples/graph/placeholder</code>.</p>"},{"location":"graph/#6-runner-configuration","title":"6. Runner Configuration","text":"<p>Runner provides session management and execution environment:</p> <pre><code>// Create session service.\nsessionService := inmemory.NewSessionService()\n// Or use Redis session service.\n// sessionService, err := redis.NewService(redis.WithRedisClientURL(\"redis://localhost:6379\"))\n\n// Create Runner.\nappRunner := runner.NewRunner(\n    \"app-name\",\n    graphAgent,\n    runner.WithSessionService(sessionService),\n    // Can add more configuration options.\n)\n\n// Use Runner to execute workflow.\n// Runner only sets StateKeyUserInput; it no longer pre-populates StateKeyMessages.\nmessage := model.NewUserMessage(\"User input\")\neventChan, err := appRunner.Run(ctx, userID, sessionID, message)\n</code></pre>"},{"location":"graph/#7-message-state-schema","title":"7. Message State Schema","text":"<p>For conversational applications, you can use predefined message state schema:</p> <pre><code>// Use message state schema.\nschema := graph.MessagesStateSchema()\n\n// This schema includes:\n// - messages: Conversation history (StateKeyMessages).\n// - user_input: User input (StateKeyUserInput).\n// - last_response: Last response (StateKeyLastResponse).\n// - node_responses: Map of nodeID -&gt; response (StateKeyNodeResponses).\n// - metadata: Metadata (StateKeyMetadata).\n</code></pre>"},{"location":"graph/#8-state-key-usage-scenarios","title":"8. State Key Usage Scenarios","text":"<p>User-defined State Keys: Used to store business logic data.</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\n// Recommended: Use custom state keys.\nconst (\n    StateKeyDocumentLength = \"document_length\"\n    StateKeyComplexityLevel = \"complexity_level\"\n    StateKeyProcessingStage = \"processing_stage\"\n)\n\n// Use in nodes.\nreturn graph.State{\n    StateKeyDocumentLength: len(input),\n    StateKeyComplexityLevel: \"simple\",\n    StateKeyProcessingStage: \"completed\",\n}, nil\n</code></pre> <p>Built-in State Keys: Used for system integration.</p> <pre><code>import (\n    \"time\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\n// Get user input (automatically set by system).\nuserInput := state[graph.StateKeyUserInput].(string)\n\n// Set final output (system will read this value).\nreturn graph.State{\n    graph.StateKeyLastResponse: \"Processing complete\",\n}, nil\n\n// Read per-node responses when multiple nodes (e.g., parallel LLM nodes)\n// produce outputs. Values are stored as a map[nodeID]any and merged across\n// steps. Use LastResponse for the final serial output; use NodeResponses for\n// converged parallel outputs.\nresponses, _ := state[graph.StateKeyNodeResponses].(map[string]any)\nnews := responses[\"news\"].(string)\ndialog := responses[\"dialog\"].(string)\n\n// Use them separately or combine into the final output.\nreturn graph.State{\n    \"news_output\":  news,\n    \"dialog_output\": dialog,\n    graph.StateKeyLastResponse: news + \"\\n\" + dialog,\n}, nil\n\n// Store metadata.\nreturn graph.State{\n    graph.StateKeyMetadata: map[string]any{\n        \"timestamp\": time.Now(),\n        \"version\": \"1.0\",\n    },\n}, nil\n</code></pre>"},{"location":"graph/#advanced-features","title":"Advanced Features","text":""},{"location":"graph/#1-interrupt-and-resume-human-in-the-loop","title":"1. Interrupt and Resume (Human-in-the-Loop)","text":"<p>The Graph package supports human-in-the-loop (HITL) workflows through interrupt and resume functionality. This enables workflows to pause execution, wait for human input or approval, and then resume from the exact point where they were interrupted.</p>"},{"location":"graph/#basic-usage","title":"Basic Usage","text":"<pre><code>import (\n    \"context\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\n// Create a node that can interrupt execution for human input\nb.AddNode(\"approval_node\", func(ctx context.Context, s graph.State) (any, error) {\n    // Use the Interrupt helper for clean interrupt/resume handling\n    prompt := map[string]any{\n        \"message\": \"Please approve this action (yes/no):\",\n        \"data\":    s[\"some_data\"],\n    }\n\n    // Interrupt execution and wait for user input\n    // The key \"approval\" identifies this specific interrupt point\n    resumeValue, err := graph.Interrupt(ctx, s, \"approval\", prompt)\n    if err != nil {\n        return nil, err\n    }\n\n    // Process the resume value when execution continues\n    approved := false\n    if resumeStr, ok := resumeValue.(string); ok {\n        approved = resumeStr == \"yes\"\n    }\n\n    return graph.State{\n        \"approved\": approved,\n    }, nil\n})\n</code></pre>"},{"location":"graph/#multi-stage-approval-example","title":"Multi-Stage Approval Example","text":"<pre><code>// First approval stage\nb.AddNode(\"first_approval\", func(ctx context.Context, s graph.State) (any, error) {\n    prompt := map[string]any{\n        \"message\": \"Manager approval required:\",\n        \"level\": 1,\n    }\n\n    approval, err := graph.Interrupt(ctx, s, \"manager_approval\", prompt)\n    if err != nil {\n        return nil, err\n    }\n\n    if approval != \"yes\" {\n        return graph.State{\"rejected_at\": \"manager\"}, nil\n    }\n\n    return graph.State{\"manager_approved\": true}, nil\n})\n\n// Second approval stage (only if first approved)\nb.AddNode(\"second_approval\", func(ctx context.Context, s graph.State) (any, error) {\n    if !s[\"manager_approved\"].(bool) {\n        return s, nil // Skip if not approved by manager\n    }\n\n    prompt := map[string]any{\n        \"message\": \"Director approval required:\",\n        \"level\": 2,\n    }\n\n    approval, err := graph.Interrupt(ctx, s, \"director_approval\", prompt)\n    if err != nil {\n        return nil, err\n    }\n\n    return graph.State{\n        \"director_approved\": approval == \"yes\",\n        \"final_approval\": approval == \"yes\",\n    }, nil\n})\n</code></pre>"},{"location":"graph/#resume-from-interrupt","title":"Resume from Interrupt","text":"<pre><code>// Resume execution with user input using ResumeMap\ncmd := &amp;graph.Command{\n    ResumeMap: map[string]any{\n        \"approval\": \"yes\", // Resume value for the \"approval\" interrupt key\n    },\n}\n\n// Pass the command through state\nstate := graph.State{\n    graph.StateKeyCommand: cmd,\n}\n\n// Execute with resume command\nevents, err := executor.Execute(ctx, state, invocation)\n\n// Resume merge rule:\n// When resuming, if the caller provides initial state keys that do not start\n// with an underscore (\"_\") and are not present in the restored checkpoint\n// state, they will be merged into the execution state. Internal framework\n// keys (prefixed with \"_\") are ignored for this merge.\n</code></pre>"},{"location":"graph/#resume-helper-functions","title":"Resume Helper Functions","text":"<pre><code>// Type-safe resume value extraction\nif value, ok := graph.ResumeValue[string](ctx, state, \"approval\"); ok {\n    // Use the resume value\n}\n\n// Resume with default value\nvalue := graph.ResumeValueOrDefault(ctx, state, \"approval\", \"no\")\n\n// Check if resume value exists\nif graph.HasResumeValue(state, \"approval\") {\n    // Handle resume case\n}\n\n// Clear resume values\ngraph.ClearResumeValue(state, \"approval\")\ngraph.ClearAllResumeValues(state)\n</code></pre>"},{"location":"graph/#2-checkpoint-based-time-travel","title":"2. Checkpoint-based Time Travel","text":"<p>Checkpoints enable \"time travel\" capabilities, allowing you to navigate through execution history and restore previous states. This is essential for debugging, auditing, and implementing sophisticated recovery strategies.</p>"},{"location":"graph/#checkpoint-configuration","title":"Checkpoint Configuration","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph/checkpoint/sqlite\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph/checkpoint/inmemory\"\n)\n\n// Create checkpoint saver (Memory or SQLite)\n// Memory saver - good for development/testing\nmemorySaver := inmemory.NewSaver()\n\n// SQLite saver - persistent storage for production\nsqliteSaver, err := sqlite.NewCheckpointSaver(\"checkpoints.db\")\n\n// Create executor with checkpoint support\nexecutor, err := graph.NewExecutor(compiledGraph,\n    graph.WithCheckpointSaver(sqliteSaver),\n    graph.WithCheckpointSaveTimeout(30*time.Second), // Configurable timeout\n    graph.WithMaxSteps(100),\n)\n</code></pre>"},{"location":"graph/#checkpoint-lineage-and-branching","title":"Checkpoint Lineage and Branching","text":"<pre><code>// Checkpoints form a lineage - a thread of execution\nlineageID := \"user-session-123\"\nnamespace := \"\" // Optional namespace for branching\n// Note: when namespace is empty (\"\"), Latest/List/GetTuple perform cross-namespace\n// queries within the same lineage. Use a concrete namespace to restrict scope.\n\n// Create checkpoint configuration\nconfig := graph.NewCheckpointConfig(lineageID).\n    WithNamespace(namespace)\n\n// Execute with checkpoint support\nstate := graph.State{\n    \"lineage_id\": lineageID,\n    \"checkpoint_ns\": namespace,\n}\n\nevents, err := executor.Execute(ctx, state, invocation)\n</code></pre>"},{"location":"graph/#checkpoint-management","title":"Checkpoint Management","text":"<pre><code>// Create checkpoint manager\nmanager := graph.NewCheckpointManager(saver)\n\n// List all checkpoints for a lineage\ncheckpoints, err := manager.ListCheckpoints(ctx, config.ToMap(), &amp;graph.CheckpointFilter{\n    Limit: 10, // Results are ordered by timestamp (newest first)\n})\n\n// Get the latest checkpoint\n// When namespace is empty (\"\"), Latest searches across namespaces for the lineage\nlatest, err := manager.Latest(ctx, lineageID, namespace)\nif latest != nil &amp;&amp; latest.Checkpoint.IsInterrupted() {\n    fmt.Printf(\"Workflow interrupted at: %s\\n\", latest.Checkpoint.InterruptState.NodeID)\n}\n\n// Get specific checkpoint by ID\nckptConfig := graph.CreateCheckpointConfig(lineageID, checkpointID, namespace)\ntuple, err := manager.GetTuple(ctx, ckptConfig)\n\n// Delete a lineage (all its checkpoints)\nerr = manager.DeleteLineage(ctx, lineageID)\n</code></pre>"},{"location":"graph/#checkpoint-tree-visualization","title":"Checkpoint Tree Visualization","text":"<pre><code>// Build checkpoint tree showing parent-child relationships\ntree, err := manager.GetCheckpointTree(ctx, lineageID)\n\n// Visualize the tree\nfor _, node := range tree {\n    indent := strings.Repeat(\"  \", node.Level)\n    marker := \"\ud83d\udccd\"\n    if node.Checkpoint.IsInterrupted() {\n        marker = \"\ud83d\udd34\" // Interrupted checkpoint\n    }\n    fmt.Printf(\"%s%s %s (step=%d)\\n\", \n        indent, marker, node.ID[:8], node.Metadata.Step)\n}\n</code></pre>"},{"location":"graph/#resume-from-specific-checkpoint","title":"Resume from Specific Checkpoint","text":"<pre><code>// Resume from a specific checkpoint (time travel)\nstate := graph.State{\n    \"lineage_id\": lineageID,\n    \"checkpoint_id\": checkpointID, // Resume from this checkpoint\n}\n\n// The executor will load the checkpoint and continue from there\nevents, err := executor.Execute(ctx, state, invocation)\n</code></pre>"},{"location":"graph/#3-checkpoint-storage-strategies","title":"3. Checkpoint Storage Strategies","text":""},{"location":"graph/#in-memory-storage","title":"In-Memory Storage","text":"<p>Best for development and testing: <pre><code>saver := memory.NewCheckpointSaver()\n</code></pre></p>"},{"location":"graph/#sqlite-storage","title":"SQLite Storage","text":"<p>Best for production with persistence: <pre><code>saver, err := sqlite.NewCheckpointSaver(\"workflow.db\",\n    sqlite.WithMaxConnections(10),\n    sqlite.WithTimeout(30*time.Second),\n)\n</code></pre></p>"},{"location":"graph/#checkpoint-metadata","title":"Checkpoint Metadata","text":"<p>Each checkpoint stores: - State: Complete workflow state at that point - Metadata: Source (input/loop/interrupt), step number, timestamp - Parent ID: Link to parent checkpoint for tree structure - Interrupt State: If interrupted, contains node ID, task ID, and prompt - Next Nodes: Nodes to execute when resuming - Channel Versions: For Pregel-style execution - Pending Writes: Uncommitted channel writes recorded and atomically stored   with checkpoints to deterministically rebuild the frontier during resume - Versions Seen: Per-node, per-channel version map used to avoid re-running   a node if it has already observed the latest version of its trigger channels</p>"},{"location":"graph/#4-custom-reducer","title":"4. Custom Reducer","text":"<p>Reducer defines how to merge state updates:</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\n// Default Reducer: Override existing values.\ngraph.DefaultReducer(existing, update) any\n\n// Merge Reducer: Merge maps.\ngraph.MergeReducer(existing, update) any\n\n// Append Reducer: Append to slices.\ngraph.AppendReducer(existing, update) any\n\n// Message Reducer: Handle message arrays.\ngraph.MessageReducer(existing, update) any\n</code></pre>"},{"location":"graph/#5-command-pattern","title":"5. Command Pattern","text":"<p>Nodes can return commands to simultaneously update state and specify routing:</p> <pre><code>import (\n    \"context\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\nfunc routingNodeFunc(ctx context.Context, state graph.State) (any, error) {\n    // Decide next step based on conditions.\n    if shouldGoToA(state) {\n        return &amp;graph.Command{\n            Update: graph.State{\"status\": \"going_to_a\"},\n            GoTo:   \"node_a\",\n        }, nil\n    }\n\n    return &amp;graph.Command{\n        Update: graph.State{\"status\": \"going_to_b\"},\n        GoTo:   \"node_b\",\n    }, nil\n}\n</code></pre> <p>Fan-out and dynamic routing:</p> <ul> <li>Return <code>[]*graph.Command</code> from a node to create parallel branches that run in the next step.</li> <li>Using <code>Command{ GoTo: \"target\" }</code> dynamically routes to <code>target</code> at runtime; no static edge is required for reachability checks. Ensure the target node exists, and use <code>SetFinishPoint(target)</code> if it is terminal.</li> </ul> <p>Example (fan-out with dynamic routing):</p> <pre><code>stateGraph.AddNode(\"fanout\", func(ctx context.Context, s graph.State) (any, error) {\n    tasks := []*graph.Command{\n        {Update: graph.State{\"param\": \"A\"}, GoTo: \"worker\"},\n        {Update: graph.State{\"param\": \"B\"}, GoTo: \"worker\"},\n        {Update: graph.State{\"param\": \"C\"}, GoTo: \"worker\"},\n    }\n    return tasks, nil\n})\n\nstateGraph.AddNode(\"worker\", func(ctx context.Context, s graph.State) (any, error) {\n    p, _ := s[\"param\"].(string)\n    if p == \"\" {\n        return graph.State{}, nil\n    }\n    return graph.State{\"results\": []string{p}}, nil\n})\n\n// Entry/finish\nstateGraph.SetEntryPoint(\"fanout\")\nstateGraph.SetFinishPoint(\"worker\")\n\n// No need to add a static edge fanout-&gt;worker; routing is driven by GoTo.\n</code></pre>"},{"location":"graph/#6-executor-configuration","title":"6. Executor Configuration","text":"<pre><code>import (\n    \"time\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph/checkpoint/inmemory\"\n)\n\n// Create executor with comprehensive configuration\nexecutor, err := graph.NewExecutor(compiledGraph,\n    graph.WithChannelBufferSize(1024),      // Event channel buffer size\n    graph.WithMaxSteps(50),                  // Maximum execution steps\n    graph.WithStepTimeout(5*time.Minute),    // Timeout per step\n    graph.WithNodeTimeout(2*time.Minute),    // Timeout per node execution\n    graph.WithCheckpointSaver(inmemory.NewSaver()),  // Enable checkpointing\n    graph.WithCheckpointSaveTimeout(30*time.Second), // Checkpoint save timeout\n)\n</code></pre>"},{"location":"graph/#7-virtual-nodes-and-routing","title":"7. Virtual Nodes and Routing","text":"<p>The Graph package uses virtual nodes to simplify workflow entry and exit:</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\n// Special node identifiers.\nconst (\n    Start = \"__start__\"  // Virtual start node.\n    End   = \"__end__\"    // Virtual end node.\n)\n\n// Set entry point (automatically creates edge from Start -&gt; nodeID).\nstateGraph.SetEntryPoint(\"first_node\")\n\n// Set finish point (automatically creates edge from nodeID -&gt; End).\nstateGraph.SetFinishPoint(\"last_node\")\n\n// No need to explicitly add these edges:\n// stateGraph.AddEdge(Start, \"first_node\")  // Not needed.\n// stateGraph.AddEdge(\"last_node\", End)     // Not needed.\n</code></pre> <p>This design makes workflow definitions more concise, developers only need to focus on actual business nodes and their connections.</p>"},{"location":"graph/#best-practices","title":"Best Practices","text":""},{"location":"graph/#1-state-management","title":"1. State Management","text":"<ul> <li>Use constants to define state keys, avoid hardcoded strings</li> <li>Create Helper functions for complex states</li> <li>Use Schema to validate state structure</li> <li>Distinguish between built-in state keys and user-defined state keys</li> </ul> <pre><code>import (\n    \"errors\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\n// Define user-defined state key constants.\nconst (\n    StateKeyInput        = \"input\"          // User business data.\n    StateKeyResult       = \"result\"         // Processing result.\n    StateKeyProcessedData = \"processed_data\" // Processed data.\n    StateKeyStatus       = \"status\"         // Processing status.\n)\n\n// User-accessible built-in state keys (use with caution).\n// StateKeyUserInput    - User input (automatically set by GraphAgent).\n// StateKeyLastResponse - Last response (read by Executor as final result).\n// StateKeyMessages     - Message history (automatically updated by LLM nodes).\n// StateKeyMetadata     - Metadata (general storage available to users).\n\n// System internal state keys (users should not use directly).\n// StateKeySession      - Session information (automatically set by GraphAgent).\n// StateKeyExecContext  - Execution context (automatically set by Executor).\n// StateKeyToolCallbacks - Tool callbacks (automatically set by Executor).\n// StateKeyModelCallbacks - Model callbacks (automatically set by Executor).\n\n// Create state Helper.\ntype StateHelper struct {\n    state graph.State\n}\n\nfunc (h *StateHelper) GetInput() (string, error) {\n    if input, ok := h.state[StateKeyInput].(string); ok {\n        return input, nil\n    }\n    return \"\", errors.New(\"input not found\")\n}\n\nfunc (h *StateHelper) GetUserInput() (string, error) {\n    if input, ok := h.state[graph.StateKeyUserInput].(string); ok {\n        return input, nil\n    }\n    return \"\", errors.New(\"user_input not found\")\n}\n</code></pre>"},{"location":"graph/#2-error-handling","title":"2. Error Handling","text":"<ul> <li>Return meaningful errors in node functions</li> <li>Use error type constants for classification</li> <li>Handle exceptional cases in condition functions</li> </ul> <pre><code>import (\n    \"context\"\n    \"fmt\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\nfunc safeNodeFunc(ctx context.Context, state graph.State) (any, error) {\n    input, ok := state[\"input\"].(string)\n    if !ok {\n        return nil, fmt.Errorf(\"input field not found or wrong type\")\n    }\n\n    if input == \"\" {\n        return nil, fmt.Errorf(\"input cannot be empty\")\n    }\n\n    // Processing logic...\n    return result, nil\n}\n</code></pre>"},{"location":"graph/#3-performance-optimization","title":"3. Performance Optimization","text":"<ul> <li>Reasonably set executor buffer size</li> <li>Use maximum step limits to prevent infinite loops</li> <li>Consider parallel execution paths (if supported)</li> </ul>"},{"location":"graph/#4-testing","title":"4. Testing","text":"<pre><code>import (\n    \"context\"\n    \"testing\"\n\n    \"github.com/stretchr/testify/assert\"\n    \"github.com/stretchr/testify/require\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\nfunc TestWorkflow(t *testing.T) {\n    // Create test graph.\n    graph := createTestGraph()\n\n    // Create executor.\n    executor, err := graph.NewExecutor(graph)\n    require.NoError(t, err)\n\n    // Execute test.\n    initialState := graph.State{\"test_input\": \"test\"}\n    eventChan, err := executor.Execute(context.Background(), initialState, nil)\n    require.NoError(t, err)\n\n    // Verify results.\n    for event := range eventChan {\n        // Verify event content.\n        assert.NotNil(t, event)\n    }\n}\n</code></pre>"},{"location":"graph/#common-use-cases","title":"Common Use Cases","text":""},{"location":"graph/#1-document-processing-workflow","title":"1. Document Processing Workflow","text":"<p>This is a complete document processing workflow example, demonstrating how to use GraphAgent and Runner:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"strings\"\n    \"time\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/graphagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/event\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\n// User-defined state keys.\nconst (\n    StateKeyDocumentLength  = \"document_length\"\n    StateKeyWordCount       = \"word_count\"\n    StateKeyComplexityLevel = \"complexity_level\"\n    StateKeyProcessingStage = \"processing_stage\"\n)\n\ntype documentWorkflow struct {\n    modelName string\n    runner    runner.Runner\n    userID    string\n    sessionID string\n}\n\nfunc (w *documentWorkflow) setup() error {\n    // 1. Create document processing graph.\n    workflowGraph, err := w.createDocumentProcessingGraph()\n    if err != nil {\n        return fmt.Errorf(\"failed to create graph: %w\", err)\n    }\n\n    // 2. Create GraphAgent.\n    graphAgent, err := graphagent.New(\"document-processor\", workflowGraph,\n        graphagent.WithDescription(\"Comprehensive document processing workflow\"),\n        graphagent.WithInitialState(graph.State{}),\n    )\n    if err != nil {\n        return fmt.Errorf(\"failed to create graph agent: %w\", err)\n    }\n\n    // 3. Create session service.\n    sessionService := inmemory.NewSessionService()\n\n    // 4. Create Runner.\n    w.runner = runner.NewRunner(\n        \"document-workflow\",\n        graphAgent,\n        runner.WithSessionService(sessionService),\n    )\n\n    // 5. Set identifiers.\n    w.userID = \"user\"\n    w.sessionID = fmt.Sprintf(\"workflow-session-%d\", time.Now().Unix())\n\n    return nil\n}\n\nfunc (w *documentWorkflow) createDocumentProcessingGraph() (*graph.Graph, error) {\n    // Create state schema.\n    schema := graph.MessagesStateSchema()\n\n    // Create model instance.\n    modelInstance := openai.New(w.modelName)\n\n    // Create analysis tool.\n    complexityTool := function.NewFunctionTool(\n        w.analyzeComplexity,\n        function.WithName(\"analyze_complexity\"),\n        function.WithDescription(\"Analyze document complexity level\"),\n    )\n\n    // Create state graph.\n    stateGraph := graph.NewStateGraph(schema)\n    tools := map[string]tool.Tool{\n        \"analyze_complexity\": complexityTool,\n    }\n\n    // Build workflow graph.\n    stateGraph.\n        AddNode(\"preprocess\", w.preprocessDocument).\n        AddLLMNode(\"analyze\", modelInstance,\n            `You are a document analysis expert. Analyze the provided document and:\n1. Classify document type and complexity (simple, moderate, complex)\n2. Extract key themes\n3. Evaluate content quality\nUse the analyze_complexity tool for detailed analysis.\nOnly return complexity level: \"simple\" or \"complex\".`,\n            tools).\n        AddToolsNode(\"tools\", tools).\n        AddNode(\"route_complexity\", w.routeComplexity).\n        AddLLMNode(\"summarize\", modelInstance,\n            `You are a document summarization expert. Create a comprehensive and concise summary of the document.\nFocus on:\n1. Key points and main arguments\n2. Important details and insights\n3. Logical structure and flow\n4. Conclusions and implications\nProvide a well-structured summary that preserves important information.\nRemember: Only output the final result itself, no other text.`,\n            map[string]tool.Tool{}).\n        AddLLMNode(\"enhance\", modelInstance,\n            `You are a content enhancement expert. Improve the provided content by:\n1. Improving clarity and readability\n2. Improving structure and organization\n3. Adding relevant details where appropriate\n4. Ensuring consistency and coherence\nFocus on making content more engaging and professional while maintaining the original meaning.\nRemember: Only output the final result itself, no other text.`,\n            map[string]tool.Tool{}).\n        AddNode(\"format_output\", w.formatOutput).\n        SetEntryPoint(\"preprocess\").\n        SetFinishPoint(\"format_output\")\n\n    // Add workflow edges.\n    stateGraph.AddEdge(\"preprocess\", \"analyze\")\n    stateGraph.AddToolsConditionalEdges(\"analyze\", \"tools\", \"route_complexity\")\n    stateGraph.AddEdge(\"tools\", \"analyze\")\n\n    // Add complexity conditional routing.\n    stateGraph.AddConditionalEdges(\"route_complexity\", w.complexityCondition, map[string]string{\n        \"simple\":  \"enhance\",\n        \"complex\": \"summarize\",\n    })\n\n    stateGraph.AddEdge(\"enhance\", \"format_output\")\n    stateGraph.AddEdge(\"summarize\", \"format_output\")\n\n    // SetEntryPoint and SetFinishPoint automatically handle connections with virtual Start/End nodes.\n\n    return stateGraph.Compile()\n}\n\n// Node function implementations.\nfunc (w *documentWorkflow) preprocessDocument(ctx context.Context, state graph.State) (any, error) {\n    var input string\n    if userInput, ok := state[graph.StateKeyUserInput].(string); ok {\n        input = userInput\n    }\n    if input == \"\" {\n        return nil, fmt.Errorf(\"no input document found\")\n    }\n\n    input = strings.TrimSpace(input)\n    if len(input) &lt; 10 {\n        return nil, fmt.Errorf(\"document too short for processing (minimum 10 characters)\")\n    }\n\n    return graph.State{\n        StateKeyDocumentLength:  len(input),\n        StateKeyWordCount:       len(strings.Fields(input)),\n        graph.StateKeyUserInput: input,\n        StateKeyProcessingStage: \"preprocessing\",\n    }, nil\n}\n\nfunc (w *documentWorkflow) routeComplexity(ctx context.Context, state graph.State) (any, error) {\n    return graph.State{\n        StateKeyProcessingStage: \"complexity_routing\",\n    }, nil\n}\n\nfunc (w *documentWorkflow) complexityCondition(ctx context.Context, state graph.State) (string, error) {\n    if msgs, ok := state[graph.StateKeyMessages].([]model.Message); ok {\n        if len(msgs) &gt; 0 {\n            lastMsg := msgs[len(msgs)-1]\n            if strings.Contains(strings.ToLower(lastMsg.Content), \"simple\") {\n                return \"simple\", nil\n            }\n        }\n    }\n    return \"complex\", nil\n}\n\nfunc (w *documentWorkflow) formatOutput(ctx context.Context, state graph.State) (any, error) {\n    var result string\n    if lastResponse, ok := state[graph.StateKeyLastResponse].(string); ok {\n        result = lastResponse\n    }\n\n    finalOutput := fmt.Sprintf(`DOCUMENT PROCESSING RESULTS\n========================\nProcessing Stage: %s\nDocument Length: %d characters\nWord Count: %d words\nComplexity Level: %s\n\nProcessed Content:\n%s\n`,\n        state[StateKeyProcessingStage],\n        state[StateKeyDocumentLength],\n        state[StateKeyWordCount],\n        state[StateKeyComplexityLevel],\n        result,\n    )\n\n    return graph.State{\n        graph.StateKeyLastResponse: finalOutput,\n    }, nil\n}\n\n// Tool function.\nfunc (w *documentWorkflow) analyzeComplexity(ctx context.Context, args map[string]any) (any, error) {\n    text, ok := args[\"text\"].(string)\n    if !ok {\n        return nil, fmt.Errorf(\"text argument is required\")\n    }\n\n    wordCount := len(strings.Fields(text))\n    sentenceCount := len(strings.Split(text, \".\"))\n\n    var level string\n    var score float64\n\n    if wordCount &lt; 100 {\n        level = \"simple\"\n        score = 0.3\n    } else if wordCount &lt; 500 {\n        level = \"moderate\"\n        score = 0.6\n    } else {\n        level = \"complex\"\n        score = 0.9\n    }\n\n    return map[string]any{\n        \"level\":          level,\n        \"score\":          score,\n        \"word_count\":     wordCount,\n        \"sentence_count\": sentenceCount,\n    }, nil\n}\n\n// Execute workflow.\nfunc (w *documentWorkflow) processDocument(ctx context.Context, content string) error {\n    message := model.NewUserMessage(content)\n    eventChan, err := w.runner.Run(ctx, w.userID, w.sessionID, message)\n    if err != nil {\n        return fmt.Errorf(\"failed to run workflow: %w\", err)\n    }\n    return w.processStreamingResponse(eventChan)\n}\n\nfunc (w *documentWorkflow) processStreamingResponse(eventChan &lt;-chan *event.Event) error {\n    var workflowStarted bool\n    var finalResult string\n\n    for event := range eventChan {\n        if event.Error != nil {\n            fmt.Printf(\"\u274c Error: %s\\n\", event.Error.Message)\n            continue\n        }\n\n        if len(event.Choices) &gt; 0 {\n            choice := event.Choices[0]\n            if choice.Delta.Content != \"\" {\n                if !workflowStarted {\n                    fmt.Print(\"\ud83e\udd16 Workflow: \")\n                    workflowStarted = true\n                }\n                fmt.Print(choice.Delta.Content)\n            }\n\n            if choice.Message.Content != \"\" &amp;&amp; event.Done {\n                finalResult = choice.Message.Content\n            }\n        }\n\n        if event.Done {\n            if finalResult != \"\" &amp;&amp; strings.Contains(finalResult, \"DOCUMENT PROCESSING RESULTS\") {\n                fmt.Printf(\"\\n\\n%s\\n\", finalResult)\n            }\n            break\n        }\n    }\n    return nil\n}\n</code></pre>"},{"location":"graph/#2-chat-bot","title":"2. Chat Bot","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/graphagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n)\n\n// Create chat bot.\nfunc createChatBot(modelName string) (*runner.Runner, error) {\n    // Create state graph.\n    stateGraph := graph.NewStateGraph(graph.MessagesStateSchema())\n\n    // Create model and tools.\n    modelInstance := openai.New(modelName)\n    tools := map[string]tool.Tool{\n        \"calculator\": calculatorTool,\n        \"search\":     searchTool,\n    }\n\n    // Build conversation graph.\n    stateGraph.\n        AddLLMNode(\"chat\", modelInstance,\n            `You are a helpful AI assistant. Provide help based on user questions and use tools when needed.`,\n            tools).\n        AddToolsNode(\"tools\", tools).\n        AddToolsConditionalEdges(\"chat\", \"tools\", \"chat\").\n        SetEntryPoint(\"chat\").\n        SetFinishPoint(\"chat\")\n\n    // Compile graph.\n    compiledGraph, err := stateGraph.Compile()\n    if err != nil {\n        return nil, err\n    }\n\n    // Create GraphAgent.\n    graphAgent, err := graphagent.New(\"chat-bot\", compiledGraph,\n        graphagent.WithDescription(\"Intelligent chat bot\"),\n        graphagent.WithInitialState(graph.State{}),\n    )\n    if err != nil {\n        return nil, err\n    }\n\n    // Create Runner.\n    sessionService := inmemory.NewSessionService()\n    appRunner := runner.NewRunner(\n        \"chat-bot-app\",\n        graphAgent,\n        runner.WithSessionService(sessionService),\n    )\n\n    return appRunner, nil\n}\n</code></pre>"},{"location":"graph/#3-data-processing-pipeline","title":"3. Data Processing Pipeline","text":"<pre><code>import (\n    \"reflect\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/graphagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n)\n\n// Create data processing pipeline.\nfunc createDataPipeline() (*runner.Runner, error) {\n    // Create custom state schema.\n    schema := graph.NewStateSchema()\n    schema.AddField(\"data\", graph.StateField{\n        Type:    reflect.TypeOf([]any{}),\n        Reducer: graph.AppendReducer,\n        Default: func() any { return []any{} },\n    })\n    schema.AddField(\"quality_score\", graph.StateField{\n        Type:    reflect.TypeOf(0.0),\n        Reducer: graph.DefaultReducer,\n    })\n\n    // Create state graph.\n    stateGraph := graph.NewStateGraph(schema)\n\n    // Build data processing pipeline.\n    stateGraph.\n        AddNode(\"extract\", extractData).\n        AddNode(\"validate\", validateData).\n        AddConditionalEdges(\"validate\", routeByQuality, map[string]string{\n            \"high\":   \"transform\",\n            \"medium\": \"clean\",\n            \"low\":    \"reject\",\n        }).\n        AddNode(\"clean\", cleanData).\n        AddNode(\"transform\", transformData).\n        AddNode(\"load\", loadData).\n        AddEdge(\"clean\", \"transform\").\n        AddEdge(\"transform\", \"load\").\n        SetEntryPoint(\"extract\").\n        SetFinishPoint(\"load\")\n\n    // Compile graph.\n    compiledGraph, err := stateGraph.Compile()\n    if err != nil {\n        return nil, err\n    }\n\n    // Create GraphAgent.\n    graphAgent, err := graphagent.New(\"data-pipeline\", compiledGraph,\n        graphagent.WithDescription(\"Data processing pipeline\"),\n        graphagent.WithInitialState(graph.State{}),\n    )\n    if err != nil {\n        return nil, err\n    }\n\n    // Create Runner.\n    sessionService := inmemory.NewSessionService()\n    appRunner := runner.NewRunner(\n        \"data-pipeline-app\",\n        graphAgent,\n        runner.WithSessionService(sessionService),\n    )\n\n    return appRunner, nil\n}\n</code></pre>"},{"location":"graph/#4-graphagent-as-subagent","title":"4. GraphAgent as SubAgent","text":"<p>GraphAgent can be used as a sub-agent of other Agents, implementing complex multi-Agent collaboration:</p> <pre><code>import (\n    \"context\"\n    \"log\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/graphagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n)\n\n// Create document processing GraphAgent.\nfunc createDocumentProcessor() (agent.Agent, error) {\n    // Create document processing graph.\n    stateGraph := graph.NewStateGraph(graph.MessagesStateSchema())\n\n    // Add document processing nodes.\n    stateGraph.\n        AddNode(\"preprocess\", preprocessDocument).\n        AddLLMNode(\"analyze\", modelInstance, analysisPrompt, tools).\n        AddNode(\"format\", formatOutput).\n        SetEntryPoint(\"preprocess\").\n        SetFinishPoint(\"format\")\n\n    // Compile graph.\n    compiledGraph, err := stateGraph.Compile()\n    if err != nil {\n        return nil, err\n    }\n\n    // Create GraphAgent.\n    return graphagent.New(\"document-processor\", compiledGraph,\n        graphagent.WithDescription(\"Professional document processing workflow\"),\n    )\n}\n\n// Create coordinator Agent, using GraphAgent as sub-agent.\nfunc createCoordinatorAgent() (agent.Agent, error) {\n    // Create document processing GraphAgent.\n    documentProcessor, err := createDocumentProcessor()\n    if err != nil {\n        return nil, err\n    }\n\n    // Create other sub-agents.\n    mathAgent := llmagent.New(\"math-agent\",\n        llmagent.WithModel(modelInstance),\n        llmagent.WithDescription(\"Mathematical calculation expert\"),\n        llmagent.WithTools([]tool.Tool{calculatorTool}),\n    )\n\n    // Create coordinator Agent.\n    coordinator := llmagent.New(\"coordinator\",\n        llmagent.WithModel(modelInstance),\n        llmagent.WithDescription(\"Task coordinator, can delegate to professional sub-agents\"),\n        llmagent.WithInstruction(`You are a coordinator that can delegate tasks to professional sub-agents:\n- document-processor: Document processing and analysis\n- math-agent: Mathematical calculations and formula processing\n\nChoose appropriate sub-agents based on user needs to handle tasks.`),\n        llmagent.WithSubAgents([]agent.Agent{\n            documentProcessor,  // GraphAgent as sub-agent.\n            mathAgent,\n        }),\n    )\n\n    return coordinator, nil\n}\n\n// Usage example.\nfunc main() {\n    // Create coordinator Agent.\n    coordinator, err := createCoordinatorAgent()\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Create Runner.\n    runner := runner.NewRunner(\"coordinator-app\", coordinator)\n\n    // Execute task (coordinator will automatically choose appropriate sub-agent).\n    message := model.NewUserMessage(\"Please analyze this document and calculate the statistical data in it\")\n    eventChan, err := runner.Run(ctx, userID, sessionID, message)\n    // ...\n}\n</code></pre> <p>Key Features:</p> <ul> <li>GraphAgent implements the <code>agent.Agent</code> interface and can be used as a sub-agent by other Agents</li> <li>Coordinator Agents can delegate tasks to GraphAgent through the <code>transfer_to_agent</code> tool or custom logic</li> <li>GraphAgent can in turn delegate to registered sub-agents through <code>graphagent.WithSubAgents</code> + <code>AddAgentNode</code></li> <li>This design enables seamless, bi-directional integration between complex workflows and multi-Agent systems</li> </ul>"},{"location":"graph/#troubleshooting","title":"Troubleshooting","text":""},{"location":"graph/#common-errors","title":"Common Errors","text":"<ol> <li>\"node not found\": Check if node ID is correct</li> <li>\"invalid graph\": Ensure graph has entry point and all nodes are reachable</li> <li>\"maximum execution steps exceeded\": Check for loops or increase maximum steps</li> <li>\"state validation failed\": Check state schema definition</li> </ol>"},{"location":"graph/#debugging-tips","title":"Debugging Tips","text":"<ul> <li>Use event streams to monitor execution process</li> <li>Add logs in node functions</li> <li>Validate state schema definitions</li> <li>Check condition function logic</li> </ul>"},{"location":"graph/#summary","title":"Summary","text":"<p>The Graph package provides a powerful and flexible workflow orchestration system, particularly suitable for building complex AI applications. Through the combined use of GraphAgent and Runner, you can create efficient and maintainable workflow applications.</p>"},{"location":"graph/#key-points","title":"Key Points","text":"<p>Workflow Creation:</p> <ul> <li>Use <code>StateGraph</code> builder to create graph structure</li> <li>Define clear state schemas and data flow</li> <li>Reasonably use conditional routing and tool nodes</li> </ul> <p>Application Integration:</p> <ul> <li>Wrap workflow graphs through <code>GraphAgent</code></li> <li>Use <code>Runner</code> to manage sessions and execution environment</li> <li>Handle streaming events and error responses</li> </ul> <p>Agent Integration:</p> <ul> <li>GraphAgent implements the <code>agent.Agent</code> interface</li> <li>Can be used as a sub-agent of other Agents</li> <li>Can also orchestrate other agents via <code>graphagent.WithSubAgents</code> and <code>AddAgentNode</code></li> <li>Supports complex multi-Agent collaboration scenarios</li> </ul> <p>Best Practices:</p> <ul> <li>Use type-safe state key constants</li> <li>Implement appropriate error handling and recovery mechanisms</li> <li>Test and monitor workflow execution process</li> <li>Reasonably configure executor parameters and buffer size</li> <li>Consider encapsulating complex workflows as GraphAgent sub-agents</li> </ul>"},{"location":"graph/#typical-usage-flow","title":"Typical Usage Flow","text":"<pre><code>import (\n    \"context\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/graphagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n)\n\n// 1. Create and compile graph.\nstateGraph := graph.NewStateGraph(schema)\n// ... Add nodes and edges.\ncompiledGraph, err := stateGraph.Compile()\n\n// 2. Create GraphAgent.\ngraphAgent, err := graphagent.New(\"workflow-name\", compiledGraph, opts...)\n\n// 3. Create Runner.\nappRunner := runner.NewRunner(\"app-name\", graphAgent, runnerOpts...)\n\n// 4. Execute workflow.\nmessage := model.NewUserMessage(\"User input\")\neventChan, err := appRunner.Run(ctx, userID, sessionID, message)\n</code></pre> <p>This pattern makes the Graph package particularly suitable for building enterprise-level AI workflow applications, providing good scalability, maintainability, and user experience.</p>"},{"location":"graph/#runtime-isolation-executor-vs-executioncontext","title":"Runtime Isolation (Executor vs ExecutionContext)","text":"<ul> <li>Executor is reusable and safe for concurrent runs. It intentionally does not store per-run mutable state.</li> <li>All per-run artifacts (e.g., restored checkpoint metadata, versions seen, pending writes) are carried inside an ExecutionContext instance created for that run.</li> <li>Functions like resumeFromCheckpoint only read from the checkpoint store and reconstruct state; they do not mutate the Executor. Callers pass any needed checkpoint-derived data into the ExecutionContext used for that run.</li> <li>Completion event serialization operates on a deep-copied snapshot and skips non-serializable/internal keys to avoid data races and reduce payload size.</li> </ul>"},{"location":"knowledge/","title":"Knowledge Usage Documentation","text":""},{"location":"knowledge/#overview","title":"Overview","text":"<p>Knowledge is the knowledge management system in the tRPC-Agent-Go framework, providing Retrieval-Augmented Generation (RAG) capabilities for Agents. By integrating vector data, embedding models, and document processing components, the Knowledge system enables Agents to access and retrieve relevant knowledge information, thereby providing more accurate and well-founded responses.</p>"},{"location":"knowledge/#usage-pattern","title":"Usage Pattern","text":"<p>The usage of the Knowledge system follows this pattern:</p> <ol> <li>Create Knowledge: Configure vector storage, Embedder, and knowledge sources</li> <li>Load Documents: Load and index documents from various sources</li> <li>Integrate with Agent: Use <code>WithKnowledge()</code> to integrate Knowledge into LLM Agent</li> <li>Agent Auto Retrieval: Agent automatically performs knowledge retrieval through built-in <code>knowledge_search</code> tool</li> <li>Knowledge Base Management: Enable intelligent synchronization mechanism through <code>enableSourceSync</code> to ensure data in vector storage always stays consistent with user-configured sources</li> </ol> <p>This pattern provides:</p> <ul> <li>Intelligent Retrieval: Semantic search based on vector similarity</li> <li>Multi-source Support: Support for files, directories, URLs, and other knowledge sources</li> <li>Flexible Storage: Support for memory, PostgreSQL, TcVector, and other storage backends</li> <li>High Performance Processing: Concurrent processing and batch document loading</li> <li>Knowledge Filtering: Support static filtering and Agent intelligent filtering through metadata</li> <li>Extensible Architecture: Support for custom Embedders, Retrievers, and Rerankers</li> <li>Dynamic Management: Support runtime addition, removal, and updating of knowledge sources</li> <li>Data Consistency Guarantee: Enable intelligent synchronization mechanism through <code>enableSourceSync</code> to ensure vector storage data always stays consistent with user-configured sources, supporting incremental processing, change detection, and automatic orphan document cleanup</li> </ul>"},{"location":"knowledge/#agent-integration","title":"Agent Integration","text":"<p>How the Knowledge system integrates with Agents:</p> <ul> <li>Automatic Tool Registration: Use <code>WithKnowledge()</code> option to automatically add <code>knowledge_search</code> tool</li> <li>Intelligent Filter Tool: Use <code>WithEnableKnowledgeAgenticFilter(true)</code> to enable <code>knowledge_search_with_agentic_filter</code> tool</li> <li>Tool Invocation: Agents can call knowledge search tools to obtain relevant information</li> <li>Context Enhancement: Retrieved knowledge content is automatically added to Agent's context</li> <li>Metadata Filtering: Support precise search based on document metadata</li> </ul>"},{"location":"knowledge/#quick-start","title":"Quick Start","text":""},{"location":"knowledge/#environment-requirements","title":"Environment Requirements","text":"<ul> <li>Go 1.24.1 or laster</li> <li>Valid LLM API key (OpenAI compatible interface)</li> <li>Vector database (optional, for production environment)</li> </ul>"},{"location":"knowledge/#configure-environment-variables","title":"Configure Environment Variables","text":"<pre><code># OpenAI API configuration.\nexport OPENAI_API_KEY=\"your-openai-api-key\"\nexport OPENAI_BASE_URL=\"your-openai-base-url\"\n\n# Embedding model configuration (optional, needs manual reading).\nexport OPENAI_EMBEDDING_MODEL=\"text-embedding-3-small\"\n</code></pre>"},{"location":"knowledge/#minimal-example","title":"Minimal Example","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n\n    // Core components.\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/event\"\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge\"\n    openaiembedder \"trpc.group/trpc-go/trpc-agent-go/knowledge/embedder/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge/source\"\n    dirsource \"trpc.group/trpc-go/trpc-agent-go/knowledge/source/dir\"\n    filesource \"trpc.group/trpc-go/trpc-agent-go/knowledge/source/file\"\n    vectorinmemory \"trpc.group/trpc-go/trpc-agent-go/knowledge/vectorstore/inmemory\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    // 1. Create embedder.\n    embedder := openaiembedder.New(\n        openaiembedder.WithModel(\"text-embedding-3-small\"),\n    )\n\n    // 2. Create vector store.\n    vectorStore := vectorinmemory.New()\n\n    // 3. Create knowledge sources (ensure these paths exist or replace with your own paths).\n    // The following files are in https://github.com/trpc-group/trpc-agent-go/tree/main/examples/knowledge.\n    sources := []source.Source{\n        filesource.New([]string{\"./data/llm.md\"}),\n        dirsource.New([]string{\"./dir\"}),\n    }\n\n    // 4. Create Knowledge.\n    kb := knowledge.New(\n        knowledge.WithEmbedder(embedder),\n        knowledge.WithVectorStore(vectorStore),\n        knowledge.WithSources(sources),\n        knowledge.WithEnableSourceSync(true), // Enable incremental sync to keep vector storage consistent with sources.\n    )\n\n    // 5. Load documents.\n    log.Println(\"\ud83d\ude80 Starting to load Knowledge ...\")\n    if err := kb.Load(ctx); err != nil {\n        log.Fatalf(\"Failed to load knowledge base: %v\", err)\n    }\n    log.Println(\"\u2705 Knowledge loading completed!\")\n\n    // 6. Create LLM model.\n    modelInstance := openai.New(\"claude-4-sonnet-20250514\")\n\n    // 7. Create Agent and integrate Knowledge.\n    llmAgent := llmagent.New(\n        \"knowledge-assistant\",\n        llmagent.WithModel(modelInstance),\n        llmagent.WithDescription(\"Intelligent assistant with Knowledge access capabilities\"),\n        llmagent.WithInstruction(\"Use the knowledge_search tool to retrieve relevant information from Knowledge and answer questions based on retrieved content.\"),\n        llmagent.WithKnowledge(kb), // Automatically add knowledge_search tool.\n    )\n\n    // 8. Create Runner.\n    sessionService := inmemory.NewSessionService()\n    appRunner := runner.NewRunner(\n        \"knowledge-chat\",\n        llmAgent,\n        runner.WithSessionService(sessionService),\n    )\n\n    // 9. Execute conversation (Agent will automatically use knowledge_search tool).\n    log.Println(\"\ud83d\udd0d Starting to search Knowledge ...\")\n    message := model.NewUserMessage(\"Please tell me about LLM information\")\n    eventChan, err := appRunner.Run(ctx, \"user123\", \"session456\", message)\n    if err != nil {\n        log.Fatalf(\"Failed to run agent: %v\", err)\n    }\n\n    // 10. Handle response ...\n}\n</code></pre>"},{"location":"knowledge/#core-concepts","title":"Core Concepts","text":"<p>The knowledge module is the knowledge management core of the tRPC-Agent-Go framework, providing complete RAG capabilities. The module adopts a modular design, supporting multiple document sources, vector storage backends, and embedding models.</p> <pre><code>knowledge/\n\u251c\u2500\u2500 knowledge.go          # Core interface definitions and main implementation.\n\u251c\u2500\u2500 source/               # Document source management.\n\u2502   \u251c\u2500\u2500 source.go        # Source interface definition.\n\u2502   \u251c\u2500\u2500 file.go          # File source implementation.\n\u2502   \u251c\u2500\u2500 dir.go           # Directory source implementation.\n\u2502   \u251c\u2500\u2500 url.go           # URL source implementation.\n\u2502   \u2514\u2500\u2500 auto.go          # Automatic source type detection.\n\u251c\u2500\u2500 vectorstore/          # Vector storage backend.\n\u2502   \u251c\u2500\u2500 vectorstore.go   # VectorStore interface definition.\n\u2502   \u251c\u2500\u2500 inmemory/        # In-memory vector storage (for development/testing).\n\u2502   \u251c\u2500\u2500 pgvector/        # PostgreSQL + pgvector implementation.\n\u2502   \u2514\u2500\u2500 tcvector/        # Tencent Cloud vector database implementation.\n\u251c\u2500\u2500 embedder/             # Text embedding models.\n\u2502   \u251c\u2500\u2500 embedder.go      # Embedder interface definition.\n\u2502   \u251c\u2500\u2500 openai/          # OpenAI embedding model.\n\u2502   \u2514\u2500\u2500 local/           # Local embedding model.\n\u251c\u2500\u2500 document/             # Document representation.\n\u2502   \u2514\u2500\u2500 document.go      # Document structure definition.\n\u251c\u2500\u2500 query/                # Query enhancer.\n\u2502   \u251c\u2500\u2500 query.go         # QueryEnhancer interface definition.\n\u2502   \u2514\u2500\u2500 passthrough.go   # Default passthrough enhancer.\n\u2514\u2500\u2500 loader/               # Document loader.\n    \u2514\u2500\u2500 loader.go        # Document loading logic.\n</code></pre>"},{"location":"knowledge/#usage-guide","title":"Usage Guide","text":""},{"location":"knowledge/#integration-with-agent","title":"Integration with Agent","text":"<p>Use <code>llmagent.WithKnowledge(kb)</code> to integrate Knowledge into Agent. The framework automatically registers the <code>knowledge_search</code> tool without needing to manually create custom tools.</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\" // Optional: use when adding other tools.\n)\n\n// Create Knowledge.\n// kb := ...\n\n// Create Agent and integrate Knowledge.\nllmAgent := llmagent.New(\n    \"knowledge-assistant\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"Intelligent assistant with Knowledge access capabilities\"),\n    llmagent.WithInstruction(\"Use the knowledge_search tool to retrieve relevant information from Knowledge and answer questions based on retrieved content.\"),\n    llmagent.WithKnowledge(kb), // Automatically add knowledge_search tool.\n    // llmagent.WithTools([]tool.Tool{otherTool}), // Optional: add other tools.\n)\n</code></pre>"},{"location":"knowledge/#vector-store","title":"Vector Store","text":"<p>Vector storage can be configured through options in code. Configuration sources can be configuration files, command line parameters, or environment variables, which users can implement themselves.</p>"},{"location":"knowledge/#vector-store-configuration-examples","title":"Vector Store Configuration Examples","text":"<pre><code>import (\n    vectorinmemory \"trpc.group/trpc-go/trpc-agent-go/knowledge/vectorstore/inmemory\"\n    vectorpgvector \"trpc.group/trpc-go/trpc-agent-go/knowledge/vectorstore/pgvector\"\n    vectortcvector \"trpc.group/trpc-go/trpc-agent-go/knowledge/vectorstore/tcvector\"\n    vectorelasticsearch \"trpc.group/trpc-go/trpc-agent-go/knowledge/vectorstore/elasticsearch\"\n)\n\n// In-memory implementation, can be used for testing.\nmemVS := vectorinmemory.New()\n\n// PostgreSQL + pgvector.\npgVS, err := vectorpgvector.New(\n    vectorpgvector.WithHost(\"127.0.0.1\"),\n    vectorpgvector.WithPort(5432),\n    vectorpgvector.WithUser(\"postgres\"),\n    vectorpgvector.WithPassword(\"your-password\"),\n    vectorpgvector.WithDatabase(\"your-database\"),\n    // Set index dimension based on embedding model (text-embedding-3-small is 1536).\n    pgvector.WithIndexDimension(1536),\n    // Enable/disable text retrieval vector, used with hybrid search weights.\n    pgvector.WithEnableTSVector(true),\n    // Adjust hybrid search weights (vector similarity weight vs text relevance weight).\n    pgvector.WithHybridSearchWeights(0.7, 0.3),\n    // If Chinese word segmentation extension is installed (like zhparser/jieba), set language to improve text recall.\n    pgvector.WithLanguageExtension(\"english\"),\n)\nif err != nil {\n    // Handle error.\n}\n\n// TcVector.\ntcVS, err := vectortcvector.New(\n    vectortcvector.WithURL(\"https://your-tcvector-endpoint\"),\n    vectortcvector.WithUsername(\"your-username\"),\n    vectortcvector.WithPassword(\"your-password\"),\n)\nif err != nil {\n    // Handle error.\n}\n\n// Pass to Knowledge.\nkb := knowledge.New(\n    knowledge.WithVectorStore(memVS), // pgVS, tcVS.\n)\n</code></pre>"},{"location":"knowledge/#elasticsearch","title":"Elasticsearch","text":"<pre><code>// Create Elasticsearch vector store with multi-version support (v7, v8, v9)\nesVS, err := vectorelasticsearch.New(\n    vectorelasticsearch.WithAddresses([]string{\"http://localhost:9200\"}),\n    vectorelasticsearch.WithUsername(os.Getenv(\"ELASTICSEARCH_USERNAME\")),\n    vectorelasticsearch.WithPassword(os.Getenv(\"ELASTICSEARCH_PASSWORD\")),\n    vectorelasticsearch.WithAPIKey(os.Getenv(\"ELASTICSEARCH_API_KEY\")),\n    vectorelasticsearch.WithIndexName(getEnvOrDefault(\"ELASTICSEARCH_INDEX_NAME\", \"trpc_agent_documents\")),\n    vectorelasticsearch.WithMaxRetries(3),\n    // Version options: \"v7\", \"v8\", \"v9\" (default \"v9\")\n    vectorelasticsearch.WithVersion(\"v9\"),\n)\nif err != nil {\n    // Handle error.\n}\n\nkb := knowledge.New(\n    knowledge.WithVectorStore(esVS),\n)\n</code></pre>"},{"location":"knowledge/#embedder","title":"Embedder","text":"<p>Embedder is responsible for converting text to vector representations and is a core component of the Knowledge system. Currently, the framework mainly supports OpenAI embedding models:</p> <pre><code>import (\n    openaiembedder \"trpc.group/trpc-go/trpc-agent-go/knowledge/embedder/openai\"\n)\n\n// OpenAI Embedder configuration.\nembedder := openaiembedder.New(\n    openaiembedder.WithModel(\"text-embedding-3-small\"), // Embedding model, can also be set via OPENAI_EMBEDDING_MODEL environment variable.\n)\n\n// Pass to Knowledge.\nkb := knowledge.New(\n    knowledge.WithEmbedder(embedder),\n)\n</code></pre> <p>Supported embedding models:</p> <ul> <li>OpenAI embedding models (text-embedding-3-small, etc.)</li> <li>Other OpenAI API compatible embedding services</li> <li>Gemini embedding model (via <code>knowledge/embedder/gemini</code>)</li> </ul> <p>Note:</p> <ul> <li>Retriever and Reranker are currently implemented internally by Knowledge, users don't need to configure them separately. Knowledge automatically handles document retrieval and result ranking.</li> <li>The <code>OPENAI_EMBEDDING_MODEL</code> environment variable needs to be manually read in code, the framework won't read it automatically. Refer to the <code>getEnvOrDefault(\"OPENAI_EMBEDDING_MODEL\", \"\")</code> implementation in the example code.</li> </ul>"},{"location":"knowledge/#document-source-configuration","title":"Document Source Configuration","text":"<p>The source module provides multiple document source types, each supporting rich configuration options:</p> <pre><code>import (\n    filesource \"trpc.group/trpc-go/trpc-agent-go/knowledge/source/file\"\n    dirsource \"trpc.group/trpc-go/trpc-agent-go/knowledge/source/dir\"\n    urlsource \"trpc.group/trpc-go/trpc-agent-go/knowledge/source/url\"\n    autosource \"trpc.group/trpc-go/trpc-agent-go/knowledge/source/auto\"\n)\n\n// File source: Single file processing, supports .txt, .md, .go, .json, etc. formats.\nfileSrc := filesource.New(\n    []string{\"./data/llm.md\"},\n    filesource.WithChunkSize(1000),      // Chunk size.\n    filesource.WithChunkOverlap(200),    // Chunk overlap.\n    filesource.WithName(\"LLM Doc\"),\n    filesource.WithMetadataValue(\"type\", \"documentation\"),\n)\n\n// Directory source: Batch directory processing, supports recursion and filtering.\ndirSrc := dirsource.New(\n    []string{\"./docs\"},\n    dirsource.WithRecursive(true),                           // Recursively process subdirectories.\n    dirsource.WithFileExtensions([]string{\".md\", \".txt\"}),   // File extension filtering.\n    dirsource.WithExcludePatterns([]string{\"*.tmp\", \"*.log\"}), // Exclusion patterns.\n    dirsource.WithChunkSize(800),\n    dirsource.WithName(\"Documentation\"),\n)\n\n// URL source: Get content from web pages and APIs.\nurlSrc := urlsource.New(\n    []string{\"https://en.wikipedia.org/wiki/Artificial_intelligence\"},\n    urlsource.WithTimeout(30*time.Second),           // Request timeout.\n    urlsource.WithUserAgent(\"MyBot/1.0\"),           // Custom User-Agent.\n    urlsource.WithMaxContentLength(1024*1024),       // Maximum content length (1MB).\n    urlsource.WithName(\"Web Content\"),\n)\n\n// Auto source: Intelligent type recognition, automatically select processor.\nautoSrc := autosource.New(\n    []string{\n        \"Cloud computing provides on-demand access to computing resources.\",\n        \"https://docs.example.com/api\",\n        \"./config.yaml\",\n    },\n    autosource.WithName(\"Mixed Sources\"),\n    autosource.WithFallbackChunkSize(1000),\n)\n\n// Combine usage.\nsources := []source.Source{fileSrc, dirSrc, urlSrc, autoSrc}\n\n// Pass to Knowledge.\nkb := knowledge.New(\n    knowledge.WithSources(sources),\n)\n\n// Load all sources.\nif err := kb.Load(ctx); err != nil {\n    log.Fatalf(\"Failed to load knowledge base: %v\", err)\n}\n</code></pre>"},{"location":"knowledge/#batch-document-processing-and-concurrency","title":"Batch Document Processing and Concurrency","text":"<p>Knowledge supports batch document processing and concurrent loading, which can significantly improve processing performance for large amounts of documents:</p> <pre><code>err := kb.Load(ctx,\n    knowledge.WithShowProgress(true),      // Print progress logs.\n    knowledge.WithProgressStepSize(10),    // Progress step size.\n    knowledge.WithShowStats(true),         // Print statistics.\n    knowledge.WithSourceConcurrency(4),    // Source-level concurrency.\n    knowledge.WithDocConcurrency(64),      // Document-level concurrency.\n)\n</code></pre> <p>Note on performance and rate limits:</p> <ul> <li>Higher concurrency increases embedder API request rates (OpenAI/Gemini) and may hit rate limits.</li> <li>Tune <code>WithSourceConcurrency()</code> and <code>WithDocConcurrency()</code> based on throughput, cost, and limits.</li> <li>Defaults are balanced for most scenarios; increase for speed, decrease to avoid throttling.</li> </ul>"},{"location":"knowledge/#filter-functionality","title":"Filter Functionality","text":"<p>The Knowledge system provides powerful filter functionality that allows precise search based on document metadata. This includes both static filters and intelligent filters.</p>"},{"location":"knowledge/#basic-filters","title":"Basic Filters","text":"<p>Basic filters support two configuration methods: Agent-level fixed filters and Runner-level runtime filters.</p>"},{"location":"knowledge/#agent-level-filters","title":"Agent-level Filters","text":"<p>Preset fixed search filter conditions when creating an Agent:</p> <pre><code>// Create Agent with fixed filters\nllmAgent := llmagent.New(\n    \"knowledge-assistant\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithKnowledge(kb),\n    llmagent.WithKnowledgeFilter(map[string]interface{}{\n        \"category\": \"documentation\",\n        \"topic\":    \"programming\",\n    }),\n)\n</code></pre>"},{"location":"knowledge/#runner-level-filters","title":"Runner-level Filters","text":"<p>Dynamically pass filters when calling <code>runner.Run()</code>, suitable for scenarios that require filtering based on different request contexts:</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/agent\"\n\n// Pass filters at runtime\neventCh, err := runner.Run(\n    ctx,\n    userID,\n    sessionID,\n    message,\n    agent.WithKnowledgeFilter(map[string]interface{}{\n        \"user_level\": \"premium\",     // Filter by user level\n        \"region\":     \"china\",       // Filter by region\n        \"language\":   \"zh\",          // Filter by language\n    }),\n)\n</code></pre> <p>Runner-level filters have higher priority than Agent-level filters, and values with the same key will be overridden:</p> <pre><code>// Agent-level filter\nllmAgent := llmagent.New(\n    \"assistant\",\n    llmagent.WithKnowledge(kb),\n    llmagent.WithKnowledgeFilter(map[string]interface{}{\n        \"category\": \"general\",\n        \"source\":   \"internal\",\n    }),\n)\n\n// Runner-level filter will override the same keys\neventCh, err := runner.Run(\n    ctx, userID, sessionID, message,\n    agent.WithKnowledgeFilter(map[string]interface{}{\n        \"source\": \"external\",  // Override Agent-level \"internal\"\n        \"topic\":  \"api\",       // Add new filter condition\n    }),\n)\n\n// Final effective filter:\n// {\n//     \"category\": \"general\",   // From Agent-level\n//     \"source\":   \"external\",  // From Runner-level (overridden)\n//     \"topic\":    \"api\",       // From Runner-level (added)\n// }\n</code></pre>"},{"location":"knowledge/#intelligent-filters-agentic-filter","title":"Intelligent Filters (Agentic Filter)","text":"<p>Intelligent filters are an advanced feature of the Knowledge system that allows LLM Agents to dynamically select appropriate filter conditions based on user queries.</p>"},{"location":"knowledge/#enable-intelligent-filters","title":"Enable Intelligent Filters","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge/source\"\n)\n\n// Get metadata information from all sources\nsourcesMetadata := source.GetAllMetadata(sources)\n\n// Create Agent with intelligent filter support\nllmAgent := llmagent.New(\n    \"knowledge-assistant\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithKnowledge(kb),\n    llmagent.WithEnableKnowledgeAgenticFilter(true),           // Enable intelligent filters\n    llmagent.WithKnowledgeAgenticFilterInfo(sourcesMetadata), // Provide available filter information\n)\n</code></pre>"},{"location":"knowledge/#filter-priority","title":"Filter Priority","text":"<p>The system supports multi-layer filters, merged according to the following priority (later overrides earlier):</p> <ol> <li>Agent-level Filters: Fixed filters set by <code>WithKnowledgeFilter()</code> (lowest priority)</li> <li>Runner-level Filters: Runtime filters passed at execution time (medium priority)</li> <li>Intelligent Filters: Filters dynamically generated by LLM (highest priority)</li> </ol> <pre><code>// Filter merging logic (priority: Agent &lt; Runner &lt; Intelligent Filter)\n// If multiple levels set the same key, higher priority values override lower priority ones\n\n// Agent-level filter (basic filter)\nagentFilter := map[string]interface{}{\n    \"category\": \"documentation\",\n    \"source\":   \"internal\",\n}\n\n// Runner-level filter (runtime filter)\nrunnerFilter := map[string]interface{}{\n    \"source\": \"official\",  // Override Agent-level \"internal\"\n    \"topic\":  \"api\",\n}\n\n// Intelligent filter (LLM dynamically generated)\nintelligentFilter := map[string]interface{}{\n    \"topic\": \"programming\",  // Override Runner-level \"api\"\n    \"level\": \"advanced\",\n}\n\n// Final merged result\nfinalFilter := {\n    \"category\": \"documentation\",  // From Agent-level\n    \"source\":   \"official\",       // From Runner-level (overrode Agent-level)\n    \"topic\":    \"programming\",     // From intelligent filter (overrode Runner-level)\n    \"level\":    \"advanced\",       // From intelligent filter\n}\n</code></pre>"},{"location":"knowledge/#metadata-configuration","title":"Metadata Configuration","text":"<p>To make intelligent filters work properly, you need to add rich metadata when creating document sources:</p>"},{"location":"knowledge/#metadata-acquisition","title":"Metadata Acquisition","text":"<p>The Knowledge system provides utility functions to collect metadata information from sources:</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/knowledge/source\"\n\n// Get all metadata key-value pairs from all sources\n// Returns map[string][]any containing all possible metadata values\nsourcesMetadata := source.GetAllMetadata(sources)\n\n// Get all metadata keys from all sources\n// Returns []string containing all metadata field names\nmetadataKeys := source.GetAllMetadataKeys(sources)\n</code></pre>"},{"location":"knowledge/#source-metadata-configuration","title":"Source Metadata Configuration","text":"<pre><code>sources := []source.Source{\n    // File source metadata configuration\n    filesource.New(\n        []string{\"./docs/api.md\"},\n        filesource.WithName(\"API Documentation\"),\n        filesource.WithMetadataValue(\"category\", \"documentation\"),\n        filesource.WithMetadataValue(\"topic\", \"api\"),\n        filesource.WithMetadataValue(\"service_type\", \"gateway\"),\n        filesource.WithMetadataValue(\"protocol\", \"trpc-go\"),\n        filesource.WithMetadataValue(\"version\", \"v1.0\"),\n    ),\n\n    // Directory source metadata configuration\n    dirsource.New(\n        []string{\"./tutorials\"},\n        dirsource.WithName(\"Tutorials\"),\n        dirsource.WithMetadataValue(\"category\", \"tutorial\"),\n        dirsource.WithMetadataValue(\"difficulty\", \"beginner\"),\n        dirsource.WithMetadataValue(\"topic\", \"programming\"),\n    ),\n\n    // URL source metadata configuration\n    urlsource.New(\n        []string{\"https://example.com/wiki/rpc\"},\n        urlsource.WithName(\"RPC Wiki\"),\n        urlsource.WithMetadataValue(\"category\", \"encyclopedia\"),\n        urlsource.WithMetadataValue(\"source_type\", \"web\"),\n        urlsource.WithMetadataValue(\"topic\", \"rpc\"),\n        urlsource.WithMetadataValue(\"language\", \"zh\"),\n    ),\n}\n</code></pre>"},{"location":"knowledge/#vector-database-filter-support","title":"Vector Database Filter Support","text":"<p>Different vector databases have varying levels of filter support:</p>"},{"location":"knowledge/#postgresql-pgvector","title":"PostgreSQL + pgvector","text":"<ul> <li>\u2705 Supports all metadata field filtering</li> <li>\u2705 Supports complex query conditions</li> <li>\u2705 Supports JSONB field indexing</li> </ul> <pre><code>vectorStore, err := vectorpgvector.New(\n    vectorpgvector.WithHost(\"127.0.0.1\"),\n    vectorpgvector.WithPort(5432),\n    // ... other configurations\n)\n</code></pre>"},{"location":"knowledge/#tcvector","title":"TcVector","text":"<ul> <li>\u2705 Supports predefined field filtering</li> <li>\u26a0\ufe0f Requires pre-establishing filter field indexes</li> </ul> <pre><code>// Get all metadata keys for establishing indexes\nmetadataKeys := source.GetAllMetadataKeys(sources)\n\nvectorStore, err := vectortcvector.New(\n    vectortcvector.WithURL(\"https://your-endpoint\"),\n    vectortcvector.WithFilterIndexFields(metadataKeys), // Establish filter field indexes\n    // ... other configurations\n)\n</code></pre>"},{"location":"knowledge/#in-memory-storage","title":"In-memory Storage","text":"<ul> <li>\u2705 Supports all filter functionality</li> <li>\u26a0\ufe0f Only suitable for development and testing</li> </ul>"},{"location":"knowledge/#knowledge-base-management-functionality","title":"Knowledge Base Management Functionality","text":"<p>The Knowledge system provides powerful knowledge base management functionality, supporting dynamic source management and intelligent synchronization mechanisms.</p>"},{"location":"knowledge/#enable-source-sync-enablesourcesync","title":"Enable Source Sync (enableSourceSync)","text":"<p>By enabling <code>enableSourceSync</code>, the knowledge base will always keep vector storage data consistent with configured sources. If you're not using custom methods to manage the knowledge base, it's recommended to enable this option:</p> <pre><code>kb := knowledge.New(\n    knowledge.WithEmbedder(embedder),\n    knowledge.WithVectorStore(vectorStore),\n    knowledge.WithSources(sources),\n    knowledge.WithEnableSourceSync(true), // Enable incremental sync\n)\n</code></pre> <p>How the synchronization mechanism works:</p> <ol> <li>Pre-loading preparation: Refresh document information cache, establish synchronization state tracking</li> <li>Process tracking: Record processed documents to avoid duplicate processing</li> <li>Post-loading cleanup: Automatically clean up orphaned documents that no longer exist</li> </ol> <p>Advantages of enabling synchronization:</p> <ul> <li>Data consistency: Ensure vector storage is completely synchronized with source configuration</li> <li>Incremental updates: Only process changed documents, improving performance</li> <li>Orphan cleanup: Automatically delete documents from removed sources</li> <li>State tracking: Real-time monitoring of synchronization status and processing progress</li> </ul>"},{"location":"knowledge/#dynamic-source-management","title":"Dynamic Source Management","text":"<p>Knowledge supports runtime dynamic management of knowledge sources, ensuring data in vector storage always stays consistent with user-configured sources:</p> <pre><code>// Add new knowledge source - data will stay consistent with configured sources\nnewSource := filesource.New([]string{\"./new-docs/api.md\"})\nif err := kb.AddSource(ctx, newSource); err != nil {\n    log.Printf(\"Failed to add source: %v\", err)\n}\n\n// Reload specified knowledge source - automatically detect changes and sync\nif err := kb.ReloadSource(ctx, newSource); err != nil {\n    log.Printf(\"Failed to reload source: %v\", err)\n}\n\n// Remove specified knowledge source - precisely delete related documents\nif err := kb.RemoveSource(ctx, \"API Documentation\"); err != nil {\n    log.Printf(\"Failed to remove source: %v\", err)\n}\n</code></pre> <p>Core features of dynamic management:</p> <ul> <li>Data consistency guarantee: Vector storage data always stays consistent with user-configured sources</li> <li>Intelligent incremental sync: Only process changed documents, avoiding duplicate processing</li> <li>Precise source control: Support precise addition/removal/reload by source name</li> <li>Orphan document cleanup: Automatically clean up documents that no longer belong to any configured source</li> <li>Hot update support: Update knowledge base without restarting the application</li> </ul>"},{"location":"knowledge/#knowledge-base-status-monitoring","title":"Knowledge Base Status Monitoring","text":"<p>Knowledge provides rich status monitoring functionality to help users understand the synchronization status of currently configured sources:</p> <pre><code>// Show all document information\ndocInfos, err := kb.ShowDocumentInfo(ctx)\nif err != nil {\n    log.Printf(\"Failed to show document info: %v\", err)\n    return\n}\n\n// Also supports querying specific sources or metadata\n// docInfos, err := kb.ShowDocumentInfo(ctx, \"source_name_1\", \"source_name_2\")\n// This will only return document metadata for the specified source names\n\n// Iterate through document information\nfor _, docInfo := range docInfos {\n    fmt.Printf(\"Document ID: %s\\n\", docInfo.DocumentID)\n    fmt.Printf(\"Source: %s\\n\", docInfo.SourceName)\n    fmt.Printf(\"URI: %s\\n\", docInfo.URI)\n    fmt.Printf(\"Chunk Index: %d\\n\", docInfo.ChunkIndex)\n}\n</code></pre> <p>Status monitoring output example:</p> <pre><code>Document ID: a1b2c3d4e5f6...\nSource: Technical Documentation\nURI: /docs/api/authentication.md\nChunk Index: 0\n\nDocument ID: f6e5d4c3b2a1...\nSource: Technical Documentation\nURI: /docs/api/authentication.md\nChunk Index: 1\n</code></pre>"},{"location":"knowledge/#advanced-features","title":"Advanced Features","text":""},{"location":"knowledge/#queryenhancer","title":"QueryEnhancer","text":"<p>QueryEnhancer is used to preprocess and optimize user queries before searching. Currently, the framework only provides a default implementation:</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge\"\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge/query\"\n)\n\nkb := knowledge.New(\n    knowledge.WithQueryEnhancer(query.NewPassthroughEnhancer()), // Default enhancer, returns query as-is.\n)\n</code></pre> <p>Note: QueryEnhancer is not a required component. If not specified, Knowledge will directly use the original query for search. This option only needs to be configured when custom query preprocessing logic is required.</p>"},{"location":"knowledge/#performance-optimization","title":"Performance Optimization","text":"<p>The Knowledge system provides various performance optimization strategies, including concurrent processing, vector storage optimization, and caching mechanisms:</p> <pre><code>// Adjust concurrency based on system resources.\nkb := knowledge.New(\n    knowledge.WithSources(sources),\n    knowledge.WithSourceConcurrency(runtime.NumCPU()),\n    knowledge.WithDocConcurrency(runtime.NumCPU()*2),\n)\n</code></pre>"},{"location":"knowledge/#complete-example","title":"Complete Example","text":"<p>The following is a complete example showing how to create an Agent with Knowledge access capabilities:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"flag\"\n    \"log\"\n    \"os\"\n    \"strconv\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n\n    // Embedder.\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge/embedder\"\n    geminiembedder \"trpc.group/trpc-go/trpc-agent-go/knowledge/embedder/gemini\"\n    openaiembedder \"trpc.group/trpc-go/trpc-agent-go/knowledge/embedder/openai\"\n\n    // Source.\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge/source\"\n    autosource \"trpc.group/trpc-go/trpc-agent-go/knowledge/source/auto\"\n    dirsource \"trpc.group/trpc-go/trpc-agent-go/knowledge/source/dir\"\n    filesource \"trpc.group/trpc-go/trpc-agent-go/knowledge/source/file\"\n    urlsource \"trpc.group/trpc-go/trpc-agent-go/knowledge/source/url\"\n\n    // Vector Store.\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge/vectorstore\"\n    vectorinmemory \"trpc.group/trpc-go/trpc-agent-go/knowledge/vectorstore/inmemory\"\n    vectorpgvector \"trpc.group/trpc-go/trpc-agent-go/knowledge/vectorstore/pgvector\"\n    vectortcvector \"trpc.group/trpc-go/trpc-agent-go/knowledge/vectorstore/tcvector\"\n)\n\nfunc main() {\n    var (\n        embedderType    = flag.String(\"embedder\", \"openai\", \"embedder type (openai, gemini)\")\n        vectorStoreType = flag.String(\"vectorstore\", \"inmemory\", \"vector store type (inmemory, pgvector, tcvector)\")\n        modelName       = flag.String(\"model\", \"claude-4-sonnet-20250514\", \"Name of the model to use\")\n    )\n\n    flag.Parse()\n\n    ctx := context.Background()\n\n    // 1. Create embedder (select based on environment variables).\n    var embedder embedder.Embedder\n    var err error\n\n    switch *embedderType {\n    case \"gemini\":\n        embedder, err = geminiembedder.New(context.Background())\n        if err != nil {\n            log.Fatalf(\"Failed to create gemini embedder: %v\", err)\n        }\n    default: // openai.\n        embedder = openaiembedder.New(\n            openaiembedder.WithModel(getEnvOrDefault(\"OPENAI_EMBEDDING_MODEL\", \"text-embedding-3-small\")),\n        )\n    }\n\n    // 2. Create vector store (select based on parameters).\n    var vectorStore vectorstore.VectorStore\n\n    switch *vectorStoreType {\n    case \"pgvector\":\n        port, err := strconv.Atoi(getEnvOrDefault(\"PGVECTOR_PORT\", \"5432\"))\n        if err != nil {\n            log.Fatalf(\"Failed to convert PGVECTOR_PORT to int: %v\", err)\n        }\n\n        vectorStore, err = vectorpgvector.New(\n            vectorpgvector.WithHost(getEnvOrDefault(\"PGVECTOR_HOST\", \"127.0.0.1\")),\n            vectorpgvector.WithPort(port),\n            vectorpgvector.WithUser(getEnvOrDefault(\"PGVECTOR_USER\", \"postgres\")),\n            vectorpgvector.WithPassword(getEnvOrDefault(\"PGVECTOR_PASSWORD\", \"\")),\n            vectorpgvector.WithDatabase(getEnvOrDefault(\"PGVECTOR_DATABASE\", \"vectordb\")),\n            vectorpgvector.WithIndexDimension(1536),\n        )\n        if err != nil {\n            log.Fatalf(\"Failed to create pgvector store: %v\", err)\n        }\n    case \"tcvector\":\n        vectorStore, err = vectortcvector.New(\n            vectortcvector.WithURL(getEnvOrDefault(\"TCVECTOR_URL\", \"\")),\n            vectortcvector.WithUsername(getEnvOrDefault(\"TCVECTOR_USERNAME\", \"\")),\n            vectortcvector.WithPassword(getEnvOrDefault(\"TCVECTOR_PASSWORD\", \"\")),\n        )\n        if err != nil {\n            log.Fatalf(\"Failed to create tcvector store: %v\", err)\n        }\n    default: // inmemory.\n        vectorStore = vectorinmemory.New()\n    }\n\n    // 3. Create knowledge sources.\n    sources := []source.Source{\n        // File source: Single file processing.\n        filesource.New(\n            []string{\"./data/llm.md\"},\n            filesource.WithChunkSize(1000),\n            filesource.WithChunkOverlap(200),\n            filesource.WithName(\"LLM Documentation\"),\n            filesource.WithMetadataValue(\"type\", \"documentation\"),\n            filesource.WithMetadataValue(\"category\", \"ai\"),\n        ),\n\n        // Directory source: Batch directory processing.\n        dirsource.New(\n            []string{\"./dir\"},\n            dirsource.WithRecursive(true),\n            dirsource.WithFileExtensions([]string{\".md\", \".txt\"}),\n            dirsource.WithChunkSize(800),\n            dirsource.WithName(\"Documentation\"),\n            dirsource.WithMetadataValue(\"category\", \"docs\"),\n        ),\n\n        // URL source: Get content from web pages.\n        urlsource.New(\n            []string{\"https://en.wikipedia.org/wiki/Artificial_intelligence\"},\n            urlsource.WithName(\"Web Documentation\"),\n            urlsource.WithMetadataValue(\"source\", \"web\"),\n            urlsource.WithMetadataValue(\"category\", \"wikipedia\"),\n            urlsource.WithMetadataValue(\"language\", \"en\"),\n        ),\n\n        // Auto source: Mixed content types.\n        autosource.New(\n            []string{\n                \"Cloud computing is the delivery of computing services over the internet, including servers, storage, databases, networking, software, and analytics. It provides on-demand access to shared computing resources.\",\n                \"Machine learning is a subset of artificial intelligence that enables systems to learn and improve from experience without being explicitly programmed.\",\n                \"./README.md\",\n            },\n            autosource.WithName(\"Mixed Knowledge Sources\"),\n            autosource.WithMetadataValue(\"category\", \"mixed\"),\n            autosource.WithMetadataValue(\"type\", \"custom\"),\n            autosource.WithMetadataValue(\"topics\", []string{\"cloud\", \"ml\", \"ai\"}),\n        ),\n    }\n\n    // 4. Create Knowledge.\n    kb := knowledge.New(\n        knowledge.WithEmbedder(embedder),\n        knowledge.WithVectorStore(vectorStore),\n        knowledge.WithSources(sources),\n    )\n\n    // 5. Load documents (with progress and statistics).\n    log.Println(\"\ud83d\ude80 Starting to load Knowledge ...\")\n    if err := kb.Load(\n        ctx,\n        knowledge.WithShowProgress(true),\n        knowledge.WithProgressStepSize(10),\n        knowledge.WithShowStats(true),\n        knowledge.WithSourceConcurrency(4),\n        knowledge.WithDocConcurrency(64),\n    ); err != nil {\n        log.Fatalf(\"\u274c Knowledge loading failed: %v\", err)\n    }\n    log.Println(\"\u2705 Knowledge loading completed!\")\n\n    // 6. Create LLM model.\n    modelInstance := openai.New(*modelName)\n\n    // Get metadata information from all sources (for intelligent filters).\n    sourcesMetadata := source.GetAllMetadata(sources)\n\n    // 7. Create Agent and integrate Knowledge.\n    llmAgent := llmagent.New(\n        \"knowledge-assistant\",\n        llmagent.WithModel(modelInstance),\n        llmagent.WithDescription(\"Intelligent assistant with Knowledge access capabilities\"),\n        llmagent.WithInstruction(\"Use the knowledge_search or knowledge_search_with_filter tool to retrieve relevant information from Knowledge and answer questions based on retrieved content. Select appropriate filter conditions based on user queries.\"),\n        llmagent.WithKnowledge(kb), // Automatically add knowledge_search tool.\n        llmagent.WithEnableKnowledgeAgenticFilter(true),           // Enable intelligent filters\n        llmagent.WithKnowledgeAgenticFilterInfo(sourcesMetadata), // Provide available filter information\n    )\n\n    // 8. Create Runner.\n    sessionService := inmemory.NewSessionService()\n    appRunner := runner.NewRunner(\n        \"knowledge-chat\",\n        llmAgent,\n        runner.WithSessionService(sessionService),\n    )\n\n    // 9. Execute conversation (Agent will automatically use knowledge_search tool).\n    log.Println(\"\ud83d\udd0d Starting to search knowledge base...\")\n    message := model.NewUserMessage(\"Please tell me about LLM information\")\n    eventChan, err := appRunner.Run(ctx, \"user123\", \"session456\", message)\n    if err != nil {\n        log.Fatalf(\"Failed to run agent: %v\", err)\n    }\n\n    // 10. Handle response ...\n\n    // 11. Demonstrate knowledge base management functionality - view document metadata\n    log.Println(\"\ud83d\udcca Displaying current knowledge base status...\")\n\n    // Query metadata information for all documents, also supports querying specific source or metadata data\n    docInfos, err := kb.ShowDocumentInfo(ctx)\n    if err != nil {\n        log.Printf(\"Failed to show document info: %v\", err)\n    } else {\n        log.Printf(\"Knowledge base contains a total of %d document chunks\", len(docInfos))\n    }\n\n\n    // 12. Demonstrate dynamic source addition - new data will automatically stay consistent with configuration\n    log.Println(\"Demonstrating dynamic source addition...\")\n    newSource := filesource.New(\n        []string{\"./new-docs/changelog.md\"},\n        filesource.WithName(\"Changelog\"),\n        filesource.WithMetadataValue(\"category\", \"changelog\"),\n        filesource.WithMetadataValue(\"type\", \"updates\"),\n    )\n\n    if err := kb.AddSource(ctx, newSource); err != nil {\n        log.Printf(\"Failed to add new source: %v\", err)\n    }\n\n    // 13. Demonstrate source removal (optional, uncomment to test)\n    // if err := kb.RemoveSource(ctx, \"Changelog\"); err != nil {\n    //     log.Printf(\"Failed to remove source: %v\", err)\n    // }\n}\n\n// getEnvOrDefault returns the environment variable value or a default value if not set.\nfunc getEnvOrDefault(key, defaultValue string) string {\n    if value := os.Getenv(key); value != \"\" {\n        return value\n    }\n    return defaultValue\n}\n</code></pre> <p>The environment variable configuration is as follows:</p> <pre><code># OpenAI API configuration (required when using OpenAI embedder, automatically read by OpenAI SDK).\nexport OPENAI_API_KEY=\"your-openai-api-key\"\nexport OPENAI_BASE_URL=\"your-openai-base-url\"\n# OpenAI embedding model configuration (optional, needs manual reading in code).\nexport OPENAI_EMBEDDING_MODEL=\"text-embedding-3-small\"\n\n# Google Gemini API configuration (when using Gemini embedder).\nexport GOOGLE_API_KEY=\"your-google-api-key\"\n\n# PostgreSQL + pgvector configuration (required when using -vectorstore=pgvector)\nexport PGVECTOR_HOST=\"127.0.0.1\"\nexport PGVECTOR_PORT=\"5432\"\nexport PGVECTOR_USER=\"postgres\"\nexport PGVECTOR_PASSWORD=\"your-password\"\nexport PGVECTOR_DATABASE=\"vectordb\"\n\n# TcVector configuration (required when using -vectorstore=tcvector)\nexport TCVECTOR_URL=\"https://your-tcvector-endpoint\"\nexport TCVECTOR_USERNAME=\"your-username\"\nexport TCVECTOR_PASSWORD=\"your-password\"\n\n# Elasticsearch configuration (required when using -vectorstore=elasticsearch)\nexport ELASTICSEARCH_HOSTS=\"http://localhost:9200\"\nexport ELASTICSEARCH_USERNAME=\"\"\nexport ELASTICSEARCH_PASSWORD=\"\"\nexport ELASTICSEARCH_API_KEY=\"\"\nexport ELASTICSEARCH_INDEX_NAME=\"trpc_agent_documents\"\n</code></pre>"},{"location":"knowledge/#command-line-parameters","title":"Command Line Parameters","text":"<pre><code># When running examples, you can select component types through command line parameters.\ngo run main.go -embedder openai -vectorstore inmemory\ngo run main.go -embedder gemini -vectorstore pgvector\ngo run main.go -embedder openai -vectorstore tcvector\ngo run main.go -embedder openai -vectorstore elasticsearch -es-version v9\n\n# Parameter description:\n# -embedder: Select embedder type (openai, gemini), default is openai.\n# -vectorstore: Select vector store type (inmemory, pgvector, tcvector, elasticsearch), default is inmemory.\n# -es-version: Elasticsearch version (v7, v8, v9), only when vectorstore=elasticsearch.\n</code></pre>"},{"location":"knowledge/#troubleshooting","title":"Troubleshooting","text":""},{"location":"knowledge/#common-issues-and-handling-suggestions","title":"Common Issues and Handling Suggestions","text":"<ol> <li> <p>Create embedding failed/HTTP 4xx/5xx</p> <ul> <li>Possible causes: Invalid or missing API Key; Incorrect BaseURL configuration; Network access restrictions; Text too long; The configured BaseURL doesn't provide Embeddings interface or doesn't support the selected embedding model (e.g., returns 404 Not Found).</li> <li>Troubleshooting steps:<ul> <li>Confirm <code>OPENAI_API_KEY</code> is set and available;</li> <li>If using compatible gateway, explicitly set <code>WithBaseURL(os.Getenv(\"OPENAI_BASE_URL\"))</code>;</li> <li>Confirm <code>WithModel(\"text-embedding-3-small\")</code> or the actual embedding model name supported by your service;</li> <li>Use minimal example to call embedding API once to verify connectivity;</li> <li>Use curl to verify if target BaseURL implements <code>/v1/embeddings</code> and model exists:    <pre><code>curl -sS -X POST \"$OPENAI_BASE_URL/embeddings\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"model\":\"text-embedding-3-small\",\"input\":\"ping\"}'\n</code></pre>    If returns 404/model doesn't exist, please switch to BaseURL that supports Embeddings or switch to valid embedding model name provided by that service.</li> <li>Gradually shorten text to confirm it's not caused by overly long input.</li> </ul> </li> <li>Reference code:    <pre><code>embedder := openaiembedder.New(\n    openaiembedder.WithModel(\"text-embedding-3-small\"),\n    openaiembedder.WithAPIKey(os.Getenv(\"OPENAI_API_KEY\")),\n    openaiembedder.WithBaseURL(os.Getenv(\"OPENAI_BASE_URL\")),\n)\nif _, err := embedder.GetEmbedding(ctx, \"ping\"); err != nil {\n    log.Fatalf(\"embed check failed: %v\", err)\n}\n</code></pre></li> </ul> </li> <li> <p>Slow loading speed or high CPU usage</p> <ul> <li>Possible causes: Single-core sequential loading; Inappropriate concurrency settings; Unreasonable large file chunking strategy.</li> <li>Troubleshooting steps:<ul> <li>Set source-level/document-level concurrency: <code>WithSourceConcurrency(N)</code>, <code>WithDocConcurrency(M)</code>;</li> <li>Adjust chunk size to avoid too many small chunks;</li> <li>Temporarily disable statistics output to reduce log overhead: <code>WithShowStats(false)</code>.</li> </ul> </li> <li>Reference code:    <pre><code>err := kb.Load(ctx,\n    knowledge.WithSourceConcurrency(runtime.NumCPU()),\n    knowledge.WithDocConcurrency(runtime.NumCPU()*2),\n    knowledge.WithShowStats(false),\n)\n</code></pre></li> </ul> </li> <li> <p>Storage connection failure (pgvector/TcVector)</p> <ul> <li>Possible causes: Incorrect connection parameters; Network/authentication failure; Service not started or port not accessible.</li> <li>Troubleshooting steps:<ul> <li>Use native client to connect once first (psql/curl);</li> <li>Explicitly print current configuration (host/port/user/db/url);</li> <li>For minimal example, only insert/query one record to verify.</li> </ul> </li> </ul> </li> <li> <p>High memory usage</p> <ul> <li>Possible causes: Loading too many documents at once; Chunk size/overlap too large; Similarity filtering too wide.</li> <li>Troubleshooting steps:<ul> <li>Reduce concurrency and chunk overlap;</li> <li>Load directories in batches.</li> </ul> </li> </ul> </li> <li> <p>Dimension/vector mismatch</p> <ul> <li>Symptoms: Search phase errors or abnormal scores of 0.</li> <li>Troubleshooting:<ul> <li>Confirm embedding model dimension matches existing vectors (<code>text-embedding-3-small</code> is 1536);</li> <li>After replacing embedding model, need to rebuild (clear and reload) vector database.</li> </ul> </li> </ul> </li> <li> <p>Path/format reading failure</p> <ul> <li>Symptoms: Loading logs show 0 documents or specific source errors.</li> <li>Troubleshooting:<ul> <li>Confirm files exist and extensions are supported (.md/.txt/.pdf/.csv/.json/.docx, etc.);</li> <li>Whether directory source needs <code>WithRecursive(true)</code>;</li> <li>Use <code>WithFileExtensions</code> for whitelist filtering.</li> </ul> </li> </ul> </li> </ol>"},{"location":"memory/","title":"Memory Usage Guide","text":""},{"location":"memory/#overview","title":"Overview","text":"<p>Memory is the memory management system in the tRPC-Agent-Go framework. It provides persistent memory and context management for Agents. By integrating the memory service, session management, and memory tools, the Memory system helps Agents remember user information, maintain conversation context, and offer personalized responses across multi-turn dialogs.</p>"},{"location":"memory/#breaking-changes-notice","title":"\u26a0\ufe0f Breaking Changes Notice","text":"<p>Important: The memory integration approach has been updated to provide better separation of concerns and explicit control. This is a breaking change that affects how memory services are integrated with Agents.</p>"},{"location":"memory/#what-changed","title":"What Changed","text":"<ul> <li>Removed: <code>llmagent.WithMemory(memoryService)</code> - automatic memory tool registration</li> <li>Added: Two-step integration approach:<ol> <li><code>llmagent.WithTools(memoryService.Tools())</code> - manual tool registration</li> <li><code>runner.WithMemoryService(memoryService)</code> - service management in runner</li> </ol> </li> </ul>"},{"location":"memory/#migration-guide","title":"Migration Guide","text":"<p>Before (old approach):</p> <pre><code>llmAgent := llmagent.New(\n    \"memory-assistant\",\n    llmagent.WithMemory(memoryService), // \u274c No longer supported\n)\n</code></pre> <p>After (new approach):</p> <pre><code>llmAgent := llmagent.New(\n    \"memory-assistant\",\n    llmagent.WithTools(memoryService.Tools()), // \u2705 Step 1: Register tools\n)\n\nrunner := runner.NewRunner(\n    \"app\",\n    llmAgent,\n    runner.WithMemoryService(memoryService), // \u2705 Step 2: Set service\n)\n</code></pre>"},{"location":"memory/#benefits-of-the-new-approach","title":"Benefits of the New Approach","text":"<ul> <li>Explicit Control: Applications have full control over which tools to register</li> <li>Better Separation: Clear separation between framework and business logic</li> <li>Service Management: Memory service is managed at the appropriate level (runner)</li> <li>No Automatic Injection: Framework doesn't automatically inject tools or prompts, which can be used as needed.</li> </ul>"},{"location":"memory/#usage-pattern","title":"Usage Pattern","text":"<p>The Memory system follows this pattern:</p> <ol> <li>Create the Memory Service: configure the storage backend (in-memory or    Redis).</li> <li>Register memory tools: manually register memory tools with the Agent using    <code>llmagent.WithTools(memoryService.Tools())</code>.</li> <li>Set memory service in runner: configure the memory service in the runner    using <code>runner.WithMemoryService(memoryService)</code>.</li> <li>Agent auto-invocation: the Agent manages memory automatically via registered    memory tools.</li> <li>Session persistence: memory persists across sessions and supports    multi-turn dialogs.</li> </ol> <p>This provides:</p> <ul> <li>Intelligent memory: automatic storage and retrieval based on conversation   context.</li> <li>Multi-turn dialogues: maintain dialog state and memory continuity.</li> <li>Flexible storage: supports multiple backends such as in-memory and Redis.</li> <li>Tool integration: memory management tools are registered manually for explicit control.</li> <li>Session management: supports creating, switching, and resetting sessions.</li> </ul>"},{"location":"memory/#agent-integration","title":"Agent Integration","text":"<p>Memory integrates with Agents as follows:</p> <ul> <li>Manual tool registration: memory tools are explicitly registered using   <code>llmagent.WithTools(memoryService.Tools())</code>.</li> <li>Service management: memory service is managed at the runner level using   <code>runner.WithMemoryService(memoryService)</code>.</li> <li>Tool invocation: the Agent uses memory tools to store, retrieve, and manage   information.</li> <li>Explicit control: applications have full control over which tools to register   and how to use them.</li> </ul>"},{"location":"memory/#quick-start","title":"Quick Start","text":""},{"location":"memory/#requirements","title":"Requirements","text":"<ul> <li>Go 1.21 or later.</li> <li>A valid LLM API key (OpenAI-compatible endpoint).</li> <li>Redis service (optional for production).</li> </ul>"},{"location":"memory/#environment-variables","title":"Environment Variables","text":"<pre><code># OpenAI API configuration\nexport OPENAI_API_KEY=\"your-openai-api-key\"\nexport OPENAI_BASE_URL=\"your-openai-base-url\"\n</code></pre>"},{"location":"memory/#minimal-example","title":"Minimal Example","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n\n    // Core components.\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    memoryinmemory \"trpc.group/trpc-go/trpc-agent-go/memory/inmemory\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    // 1. Create the memory service.\n    memoryService := memoryinmemory.NewMemoryService()\n\n    // 2. Create the LLM model.\n    modelInstance := openai.New(\"deepseek-chat\")\n\n    // 3. Create the Agent and register memory tools.\n    llmAgent := llmagent.New(\n        \"memory-assistant\",\n        llmagent.WithModel(modelInstance),\n        llmagent.WithDescription(\"An assistant with memory capabilities.\"),\n        llmagent.WithInstruction(\n            \"Remember important user info and recall it when needed.\",\n        ),\n        llmagent.WithTools(memoryService.Tools()), // Register memory tools.\n    )\n\n    // 4. Create the Runner with memory service.\n    sessionService := inmemory.NewSessionService()\n    appRunner := runner.NewRunner(\n        \"memory-chat\",\n        llmAgent,\n        runner.WithSessionService(sessionService),\n        runner.WithMemoryService(memoryService), // Set memory service.\n    )\n\n    // 5. Run a dialog (the Agent uses memory tools automatically).\n    log.Println(\"\ud83e\udde0 Starting memory-enabled chat...\")\n    message := model.NewUserMessage(\n        \"Hi, my name is John, and I like programming\",\n    )\n    eventChan, err := appRunner.Run(ctx, \"user123\", \"session456\", message)\n    if err != nil {\n        log.Fatalf(\"Failed to run agent: %v\", err)\n    }\n\n    // 6. Handle responses ...\n    _ = eventChan\n}\n</code></pre>"},{"location":"memory/#core-concepts","title":"Core Concepts","text":"<p>The memory module is the core of tRPC-Agent-Go's memory management. It provides complete memory storage and retrieval capabilities with a modular design that supports multiple storage backends and memory tools.</p> <pre><code>memory/\n\u251c\u2500\u2500 memory.go          # Core interface definitions.\n\u251c\u2500\u2500 inmemory/          # In-memory memory service implementation.\n\u251c\u2500\u2500 redis/             # Redis memory service implementation.\n\u2514\u2500\u2500 tool/              # Memory tools implementation.\n    \u251c\u2500\u2500 tool.go        # Tool interfaces and implementations.\n    \u2514\u2500\u2500 types.go       # Tool type definitions.\n</code></pre>"},{"location":"memory/#usage-guide","title":"Usage Guide","text":""},{"location":"memory/#integrate-with-agent","title":"Integrate with Agent","text":"<p>Use a two-step approach to integrate the Memory Service with an Agent:</p> <ol> <li>Register memory tools with the Agent using <code>llmagent.WithTools(memoryService.Tools())</code></li> <li>Set the memory service in the runner using <code>runner.WithMemoryService(memoryService)</code></li> </ol> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/memory\"\n    memoryinmemory \"trpc.group/trpc-go/trpc-agent-go/memory/inmemory\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n)\n\n// Create the memory service.\nmemoryService := memoryinmemory.NewMemoryService()\n\n// Create the Agent and register memory tools.\nllmAgent := llmagent.New(\n    \"memory-assistant\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"An assistant with memory capabilities.\"),\n    llmagent.WithInstruction(\n        \"Remember important user info and recall it when needed.\",\n    ),\n    llmagent.WithTools(memoryService.Tools()), // Register memory tools.\n)\n\n// Create the runner with memory service.\nappRunner := runner.NewRunner(\n    \"memory-chat\",\n    llmAgent,\n    runner.WithMemoryService(memoryService), // Set memory service.\n)\n</code></pre>"},{"location":"memory/#memory-service","title":"Memory Service","text":"<p>Configure the memory service in code. Two backends are supported: in-memory and Redis.</p>"},{"location":"memory/#configuration-example","title":"Configuration Example","text":"<pre><code>import (\n    memoryinmemory \"trpc.group/trpc-go/trpc-agent-go/memory/inmemory\"\n    memoryredis \"trpc.group/trpc-go/trpc-agent-go/memory/redis\"\n)\n\n// In-memory implementation for development and testing.\nmemService := memoryinmemory.NewMemoryService()\n\n// Redis implementation for production.\nredisService, err := memoryredis.NewService(\n    memoryredis.WithRedisClientURL(\"redis://localhost:6379\"),\n    memoryredis.WithToolEnabled(memory.DeleteToolName, true), // Enable delete.\n)\nif err != nil {\n    // Handle error.\n}\n\n// Register memory tools with the Agent.\nllmAgent := llmagent.New(\n    \"memory-assistant\",\n    llmagent.WithTools(memService.Tools()), // Or use redisService.Tools().\n)\n\n// Set memory service in the Runner.\nrunner := runner.NewRunner(\n    \"app\",\n    llmAgent,\n    runner.WithMemoryService(memService), // Or use redisService.\n)\n</code></pre>"},{"location":"memory/#memory-tool-configuration","title":"Memory Tool Configuration","text":"<p>By default, the following tools are enabled. Others can be toggled via configuration.</p> <pre><code>// Default enabled tools: add, update, search, load.\n// Default disabled tools: delete, clear.\nmemoryService := memoryinmemory.NewMemoryService()\n\n// Enable disabled tools.\nmemoryService := memoryinmemory.NewMemoryService(\n    memoryinmemory.WithToolEnabled(memory.DeleteToolName, true),\n    memoryinmemory.WithToolEnabled(memory.ClearToolName, true),\n)\n\n// Disable enabled tools.\nmemoryService := memoryinmemory.NewMemoryService(\n    memoryinmemory.WithToolEnabled(memory.AddToolName, false),\n)\n</code></pre>"},{"location":"memory/#overwrite-semantics-ids-and-duplicates","title":"Overwrite Semantics (IDs and duplicates)","text":"<ul> <li>Memory IDs are generated from content + topics. Adding the same content and topics   is idempotent and overwrites the existing entry (not append). UpdatedAt is refreshed.</li> <li>If you need append semantics or different duplicate-handling strategies, you can   implement custom tools or extend the service with policy options (e.g. allow/overwrite/ignore).</li> </ul>"},{"location":"memory/#custom-tool-implementation","title":"Custom Tool Implementation","text":"<p>You can override default tools with custom implementations. See <code>memory/tool/tool.go</code> for reference on how to implement custom tools.</p> <pre><code>import (\n    \"context\"\n    \"fmt\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/memory\"\n    memoryinmemory \"trpc.group/trpc-go/trpc-agent-go/memory/inmemory\"\n    toolmemory \"trpc.group/trpc-go/trpc-agent-go/memory/tool\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\n// A custom clear tool with real logic using the invocation context.\nfunc customClearMemoryTool() tool.Tool {\n    clearFunc := func(ctx context.Context, _ *toolmemory.ClearMemoryRequest) (*toolmemory.ClearMemoryResponse, error) {\n        // Get memory service and user info from invocation context.\n        memSvc, err := toolmemory.GetMemoryServiceFromContext(ctx)\n        if err != nil {\n            return nil, fmt.Errorf(\"custom clear tool: %w\", err)\n        }\n        appName, userID, err := toolmemory.GetAppAndUserFromContext(ctx)\n        if err != nil {\n            return nil, fmt.Errorf(\"custom clear tool: %w\", err)\n        }\n\n        if err := memSvc.ClearMemories(ctx, memory.UserKey{AppName: appName, UserID: userID}); err != nil {\n            return nil, fmt.Errorf(\"custom clear tool: failed to clear memories: %w\", err)\n        }\n        return &amp;toolmemory.ClearMemoryResponse{Message: \"\ud83c\udf89 All memories cleared successfully!\"}, nil\n    }\n\n    return function.NewFunctionTool(\n        clearFunc,\n        function.WithName(memory.ClearToolName),\n        function.WithDescription(\"Clear all memories for the user.\"),\n    )\n}\n\n// Register the custom tool with an InMemory service.\nmemoryService := memoryinmemory.NewMemoryService(\n    memoryinmemory.WithCustomTool(memory.ClearToolName, customClearMemoryTool),\n)\n</code></pre>"},{"location":"memory/#full-example","title":"Full Example","text":"<p>Below is a complete example showing how to create an Agent with memory capabilities.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"flag\"\n    \"log\"\n    \"os\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/memory\"\n    memoryinmemory \"trpc.group/trpc-go/trpc-agent-go/memory/inmemory\"\n    memoryredis \"trpc.group/trpc-go/trpc-agent-go/memory/redis\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n)\n\nfunc main() {\n    var (\n        memServiceName = flag.String(\n            \"memory\", \"inmemory\", \"Memory service type (inmemory, redis)\",\n        )\n        redisAddr = flag.String(\n            \"redis-addr\", \"localhost:6379\", \"Redis server address\",\n        )\n        modelName = flag.String(\"model\", \"deepseek-chat\", \"Model name\")\n    )\n\n    flag.Parse()\n\n    ctx := context.Background()\n\n    // 1. Create the memory service (based on flags).\n    var memoryService memory.Service\n    var err error\n\n    switch *memServiceName {\n    case \"redis\":\n        redisURL := fmt.Sprintf(\"redis://%s\", *redisAddr)\n        memoryService, err = memoryredis.NewService(\n            memoryredis.WithRedisClientURL(redisURL),\n            memoryredis.WithToolEnabled(memory.DeleteToolName, true),\n            memoryredis.WithCustomTool(\n                memory.ClearToolName, customClearMemoryTool,\n            ),\n        )\n        if err != nil {\n            log.Fatalf(\"Failed to create redis memory service: %v\", err)\n        }\n    default: // inmemory.\n        memoryService = memoryinmemory.NewMemoryService(\n            memoryinmemory.WithToolEnabled(memory.DeleteToolName, true),\n            memoryinmemory.WithCustomTool(\n                memory.ClearToolName, customClearMemoryTool,\n            ),\n        )\n    }\n\n    // 2. Create the LLM model.\n    modelInstance := openai.New(*modelName)\n\n    // 3. Create the Agent and register memory tools.\n    genConfig := model.GenerationConfig{\n        MaxTokens:   intPtr(2000),\n        Temperature: floatPtr(0.7),\n        Stream:      true,\n    }\n\n    llmAgent := llmagent.New(\n        \"memory-assistant\",\n        llmagent.WithModel(modelInstance),\n        llmagent.WithDescription(\n            \"An assistant with memory. I can remember key info about you \"+\n                \"and recall it when needed.\",\n        ),\n        llmagent.WithGenerationConfig(genConfig),\n        llmagent.WithTools(memoryService.Tools()), // Register memory tools.\n    )\n\n    // 4. Create the Runner with memory service.\n    sessionService := inmemory.NewSessionService()\n    appRunner := runner.NewRunner(\n        \"memory-chat\",\n        llmAgent,\n        runner.WithSessionService(sessionService),\n        runner.WithMemoryService(memoryService), // Set memory service.\n    )\n\n    // 5. Run a dialog (the Agent uses memory tools automatically).\n    log.Println(\"\ud83e\udde0 Starting memory-enabled chat...\")\n    message := model.NewUserMessage(\n        \"Hi, my name is John, and I like programming\",\n    )\n    eventChan, err := appRunner.Run(ctx, \"user123\", \"session456\", message)\n    if err != nil {\n        log.Fatalf(\"Failed to run agent: %v\", err)\n    }\n\n    // 6. Handle responses ...\n    _ = eventChan\n}\n\n// Custom clear tool.\nfunc customClearMemoryTool() tool.Tool {\n    // ... implementation ...\n    return nil\n}\n\n// Helpers.\nfunc intPtr(i int) *int   { return &amp;i }\nfunc floatPtr(f float64) *float64 { return &amp;f }\n</code></pre> <p>The environment variables are configured as follows:</p> <pre><code># OpenAI API configuration\nexport OPENAI_API_KEY=\"your-openai-api-key\"\nexport OPENAI_BASE_URL=\"your-openai-base-url\"\n</code></pre>"},{"location":"memory/#command-line-flags","title":"Command-line Flags","text":"<pre><code># Choose components via flags when running the example.\ngo run main.go -memory inmemory\ngo run main.go -memory redis -redis-addr localhost:6379\n\n# Flags:\n# -memory: memory service type (inmemory, redis), default is inmemory.\n# -redis-addr: Redis server address, default is localhost:6379.\n# -model: model name, default is deepseek-chat.\n</code></pre>"},{"location":"model/","title":"Model Module","text":""},{"location":"model/#overview","title":"Overview","text":"<p>The Model module is the large language model abstraction layer of the tRPC-Agent-Go framework, providing a unified LLM interface design that currently supports OpenAI-compatible API calls. Through standardized interface design, developers can flexibly switch between different model providers, achieving seamless model integration and invocation. This module has been verified to be compatible with most OpenAI-like interfaces both inside and outside the company.</p> <p>The Model module has the following core features:</p> <ul> <li>Unified Interface Abstraction: Provides standardized <code>Model</code> interface, shielding differences between model providers</li> <li>Streaming Response Support: Native support for streaming output, enabling real-time interactive experience</li> <li>Multimodal Capabilities: Supports text, image, audio, and other multimodal content processing</li> <li>Complete Error Handling: Provides dual-layer error handling mechanism, distinguishing between system errors and API errors</li> <li>Extensible Configuration: Supports rich custom configuration options to meet different scenario requirements</li> </ul>"},{"location":"model/#quick-start","title":"Quick Start","text":""},{"location":"model/#using-model-in-agent","title":"Using Model in Agent","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n)\n\nfunc main() {\n    // 1. Create model instance.\n    modelInstance := openai.New(\"deepseek-chat\",\n        openai.WithExtraFields(map[string]interface{}{\n            \"tool_choice\": \"auto\", // Automatically select tools.\n        }),\n    )\n\n    // 2. Configure generation parameters.\n    genConfig := model.GenerationConfig{\n        MaxTokens:   intPtr(2000),\n        Temperature: floatPtr(0.7),\n        Stream:      true, // Enable streaming output.\n    }\n\n    // 3. Create Agent and integrate model.\n    agent := llmagent.New(\n        \"chat-assistant\",\n        llmagent.WithModel(modelInstance),\n        llmagent.WithDescription(\"A helpful assistant\"),\n        llmagent.WithInstruction(\"You are an intelligent assistant, use tools when needed.\"),\n        llmagent.WithGenerationConfig(genConfig),\n        llmagent.WithTools([]tool.Tool{calculatorTool, timeTool}),\n    )\n\n    // 4. Create Runner and run.\n    r := runner.NewRunner(\"app-name\", agent)\n    eventChan, err := r.Run(ctx, userID, sessionID, model.NewUserMessage(\"Hello\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // 5. Handle response events.\n    for event := range eventChan {\n        // Handle streaming responses, tool calls, etc.\n    }\n}\n</code></pre> <p>Example code is located at examples/runner</p>"},{"location":"model/#usage-methods-and-platform-integration-guide","title":"Usage Methods and Platform Integration Guide","text":"<p>The Model module supports multiple usage methods and platform integration. The following are common usage scenarios based on Runner examples:</p>"},{"location":"model/#quick-start_1","title":"Quick Start","text":"<pre><code># Basic usage: Configure through environment variables, run directly.\ncd examples/runner\nexport OPENAI_BASE_URL=\"https://api.deepseek.com/v1\"\nexport OPENAI_API_KEY=\"your-api-key\"\ngo run main.go -model deepseek-chat\n</code></pre>"},{"location":"model/#platform-integration-configuration","title":"Platform Integration Configuration","text":"<p>All platform integration methods follow the same pattern, only requiring configuration of different environment variables or direct setting in code:</p> <p>Environment Variable Method (Recommended):</p> <pre><code>export OPENAI_BASE_URL=\"Platform API address\"\nexport OPENAI_API_KEY=\"API key\"\n</code></pre> <p>Code Method:</p> <pre><code>model := openai.New(\"Model name\",\n    openai.WithBaseURL(\"Platform API address\"),\n    openai.WithAPIKey(\"API key\"),\n)\n</code></pre>"},{"location":"model/#supported-platforms-and-their-configuration","title":"Supported Platforms and Their Configuration","text":"<p>The following are configuration examples for each platform, divided into environment variable configuration and code configuration methods:</p> <p>Environment Variable Configuration</p> <p>The runner example supports specifying model names through command line parameters (-model), which is actually passing the model name when calling <code>openai.New()</code>.</p> <pre><code># OpenAI platform.\nexport OPENAI_API_KEY=\"sk-...\"\ncd examples/runner\ngo run main.go -model gpt-4o-mini\n\n# OpenAI API compatible.\nexport OPENAI_BASE_URL=\"https://api.deepseek.com/v1\"\nexport OPENAI_API_KEY=\"your-api-key\"\ncd examples/runner\ngo run main.go -model deepseek-chat\n</code></pre> <p>Code Configuration Method</p> <p>Configuration method when directly using Model in your own code:</p> <pre><code>model := openai.New(\"deepseek-chat\",\n    openai.WithBaseURL(\"https://api.deepseek.com/v1\"),\n    openai.WithAPIKey(\"your-api-key\"),\n)\n\n// Other platform configurations are similar, only need to modify model name, BaseURL and APIKey, no additional fields needed.\n</code></pre>"},{"location":"model/#core-interface-design","title":"Core Interface Design","text":""},{"location":"model/#model-interface","title":"Model Interface","text":"<pre><code>// Model is the interface that all language models must implement.\ntype Model interface {\n    // Generate content, supports streaming response.\n    GenerateContent(ctx context.Context, request *Request) (&lt;-chan *Response, error)\n\n    // Return basic model information.\n    Info() Info\n}\n\n// Model information structure.\ntype Info struct {\n    Name string // Model name.\n}\n</code></pre>"},{"location":"model/#request-structure","title":"Request Structure","text":"<pre><code>// Request represents the request sent to the model.\ntype Request struct {\n    // Message list, containing system instructions, user input and assistant replies.\n    Messages []Message `json:\"messages\"`\n\n    // Generation configuration (inlined into request).\n    GenerationConfig `json:\",inline\"`\n\n    // Tool list.\n    Tools map[string]tool.Tool `json:\"-\"`\n}\n\n// GenerationConfig contains generation parameter configuration.\ntype GenerationConfig struct {\n    // Whether to use streaming response.\n    Stream bool `json:\"stream\"`\n\n    // Temperature parameter (0.0-2.0).\n    Temperature *float64 `json:\"temperature,omitempty\"`\n\n    // Maximum generation token count.\n    MaxTokens *int `json:\"max_tokens,omitempty\"`\n\n    // Top-P sampling parameter.\n    TopP *float64 `json:\"top_p,omitempty\"`\n\n    // Stop generation markers.\n    Stop []string `json:\"stop,omitempty\"`\n\n    // Frequency penalty.\n    FrequencyPenalty *float64 `json:\"frequency_penalty,omitempty\"`\n\n    // Presence penalty.\n    PresencePenalty *float64 `json:\"presence_penalty,omitempty\"`\n\n    // Reasoning effort level (\"low\", \"medium\", \"high\").\n    ReasoningEffort *string `json:\"reasoning_effort,omitempty\"`\n\n    // Whether to enable thinking mode.\n    ThinkingEnabled *bool `json:\"-\"`\n\n    // Maximum token count for thinking mode.\n    ThinkingTokens *int `json:\"-\"`\n}\n</code></pre>"},{"location":"model/#response-structure","title":"Response Structure","text":"<pre><code>// Response represents the response returned by the model.\ntype Response struct {\n    // OpenAI compatible fields.\n    ID                string   `json:\"id,omitempty\"`\n    Object            string   `json:\"object,omitempty\"`\n    Created           int64    `json:\"created,omitempty\"`\n    Model             string   `json:\"model,omitempty\"`\n    SystemFingerprint *string  `json:\"system_fingerprint,omitempty\"`\n    Choices           []Choice `json:\"choices,omitempty\"`\n    Usage             *Usage   `json:\"usage,omitempty\"`\n\n    // Error information.\n    Error *ResponseError `json:\"error,omitempty\"`\n\n    // Internal fields.\n    Timestamp time.Time `json:\"-\"`\n    Done      bool      `json:\"-\"`\n    IsPartial bool      `json:\"-\"`\n}\n\n// ResponseError represents API-level errors.\ntype ResponseError struct {\n    Message string    `json:\"message\"`\n    Type    ErrorType `json:\"type\"`\n    Param   string    `json:\"param,omitempty\"`\n    Code    string    `json:\"code,omitempty\"`\n}\n</code></pre>"},{"location":"model/#direct-model-usage","title":"Direct Model Usage","text":"<pre><code>import (\n    \"context\"\n    \"fmt\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n)\n\nfunc main() {\n    // Create model instance.\n    llm := openai.New(\"deepseek-chat\")\n\n    // Build request.\n    temperature := 0.7\n    maxTokens := 1000\n\n    request := &amp;model.Request{\n        Messages: []model.Message{\n            model.NewSystemMessage(\"You are a professional AI assistant.\"),\n            model.NewUserMessage(\"Introduce Go language's concurrency features.\"),\n        },\n        GenerationConfig: model.GenerationConfig{\n            Temperature: &amp;temperature,\n            MaxTokens:   &amp;maxTokens,\n            Stream:      false,\n        },\n    }\n\n    // Call model.\n    ctx := context.Background()\n    responseChan, err := llm.GenerateContent(ctx, request)\n    if err != nil {\n        fmt.Printf(\"System error: %v\\n\", err)\n        return\n    }\n\n    // Handle response.\n    for response := range responseChan {\n        if response.Error != nil {\n            fmt.Printf(\"API error: %s\\n\", response.Error.Message)\n            return\n        }\n\n        if len(response.Choices) &gt; 0 {\n            fmt.Printf(\"Reply: %s\\n\", response.Choices[0].Message.Content)\n        }\n\n        if response.Done {\n            break\n        }\n    }\n}\n</code></pre>"},{"location":"model/#streaming-output","title":"Streaming Output","text":"<pre><code>// Streaming request configuration.\nrequest := &amp;model.Request{\n    Messages: []model.Message{\n        model.NewSystemMessage(\"You are a creative story teller.\"),\n        model.NewUserMessage(\"Write a short story about a robot learning to paint.\"),\n    },\n    GenerationConfig: model.GenerationConfig{\n        Stream: true,  // Enable streaming output.\n    },\n}\n\n// Handle streaming response.\nresponseChan, err := llm.GenerateContent(ctx, request)\nif err != nil {\n    return err\n}\n\nfor response := range responseChan {\n    if response.Error != nil {\n        fmt.Printf(\"Error: %s\", response.Error.Message)\n        return\n    }\n\n    if len(response.Choices) &gt; 0 &amp;&amp; response.Choices[0].Delta.Content != \"\" {\n        fmt.Print(response.Choices[0].Delta.Content)\n    }\n\n    if response.Done {\n        break\n    }\n}\n</code></pre>"},{"location":"model/#advanced-parameter-configuration","title":"Advanced Parameter Configuration","text":"<pre><code>// Use advanced generation parameters.\ntemperature := 0.3\nmaxTokens := 2000\ntopP := 0.9\npresencePenalty := 0.2\nfrequencyPenalty := 0.5\nreasoningEffort := \"high\"\n\nrequest := &amp;model.Request{\n    Messages: []model.Message{\n        model.NewSystemMessage(\"You are a professional technical documentation writer.\"),\n        model.NewUserMessage(\"Explain the advantages and disadvantages of microservice architecture.\"),\n    },\n    GenerationConfig: model.GenerationConfig{\n        Temperature:      &amp;temperature,\n        MaxTokens:        &amp;maxTokens,\n        TopP:             &amp;topP,\n        PresencePenalty:  &amp;presencePenalty,\n        FrequencyPenalty: &amp;frequencyPenalty,\n        ReasoningEffort:  &amp;reasoningEffort,\n        Stream:           true,\n    },\n}\n</code></pre>"},{"location":"model/#multimodal-content","title":"Multimodal Content","text":"<pre><code>// Read image file.\nimageData, _ := os.ReadFile(\"image.jpg\")\n\n// Create multimodal message.\nrequest := &amp;model.Request{\n    Messages: []model.Message{\n        model.NewSystemMessage(\"You are an image analysis expert.\"),\n        {\n            Role: model.RoleUser,\n            ContentParts: []model.ContentPart{\n                {\n                    Type: model.ContentTypeText,\n                    Text: stringPtr(\"What's in this image?\"),\n                },\n                {\n                    Type: model.ContentTypeImage,\n                    Image: &amp;model.Image{\n                        Data:   imageData,\n                        Format: \"jpeg\",\n                    },\n                },\n            },\n        },\n    },\n}\n</code></pre>"},{"location":"model/#advanced-features","title":"Advanced Features","text":""},{"location":"model/#1-callback-functions","title":"1. Callback Functions","text":"<pre><code>// Set pre-request callback function.\nmodel := openai.New(\"deepseek-chat\",\n    openai.WithChatRequestCallback(func(ctx context.Context, req *openai.ChatCompletionNewParams) {\n        // Called before request is sent.\n        log.Printf(\"Sending request: model=%s, message count=%d\", req.Model, len(req.Messages))\n    }),\n\n    // Set response callback function (non-streaming).\n    openai.WithChatResponseCallback(func(ctx context.Context,\n        req *openai.ChatCompletionNewParams,\n        resp *openai.ChatCompletion) {\n        // Called when complete response is received.\n        log.Printf(\"Received response: ID=%s, tokens used=%d\",\n            resp.ID, resp.Usage.TotalTokens)\n    }),\n\n    // Set streaming response callback function.\n    openai.WithChatChunkCallback(func(ctx context.Context,\n        req *openai.ChatCompletionNewParams,\n        chunk *openai.ChatCompletionChunk) {\n        // Called when each streaming response chunk is received.\n        log.Printf(\"Received streaming chunk: ID=%s\", chunk.ID)\n    }),\n\n    // Set streaming completion callback function.\n    openai.WithChatStreamCompleteCallback(func(ctx context.Context,\n        req *openai.ChatCompletionNewParams,\n        acc *openai.ChatCompletionAccumulator,\n        streamErr error) {\n        // Called when streaming is completely finished (success or error).\n        if streamErr != nil {\n            log.Printf(\"Streaming failed: %v\", streamErr)\n        } else {\n            log.Printf(\"Streaming completed: reason=%s\", \n                acc.Choices[0].FinishReason)\n        }\n    }),\n)\n</code></pre>"},{"location":"multiagent/","title":"Multi-Agent System","text":"<p>The Multi-Agent System is one of the core features of the trpc-agent-go framework, allowing you to create complex systems composed of multiple specialized Agents. These Agents can collaborate in different ways to implement various application scenarios from simple to complex.</p>"},{"location":"multiagent/#overview","title":"Overview","text":"<p>The Multi-Agent System is built on the SubAgent concept, implementing various collaboration patterns through the <code>WithSubAgents</code> option:</p>"},{"location":"multiagent/#basic-concepts","title":"Basic Concepts","text":"<ul> <li>SubAgent - Specialized Agents configured through the <code>WithSubAgents</code> option, serving as the foundation for building complex collaboration patterns</li> </ul>"},{"location":"multiagent/#core-collaboration-patterns","title":"Core Collaboration Patterns","text":"<ol> <li>Chain Agent (ChainAgent) - Uses SubAgents to execute sequentially, forming processing pipelines</li> <li>Parallel Agent (ParallelAgent) - Uses SubAgents to process different aspects of the same input simultaneously</li> <li>Cycle Agent (CycleAgent) - Uses SubAgents to iterate in loops until specific conditions are met</li> </ol>"},{"location":"multiagent/#auxiliary-functions","title":"Auxiliary Functions","text":"<ul> <li>Agent Tool (AgentTool) - Wraps Agents as tools for other Agents to call</li> <li>Agent Transfer - Implements task delegation between Agents through the <code>transfer_to_agent</code> tool</li> </ul>"},{"location":"multiagent/#subagent-basics","title":"SubAgent Basics","text":"<p>SubAgent is the core concept of the Multi-Agent System, implemented through the <code>WithSubAgents</code> option. It allows you to combine multiple specialized Agents to build complex collaboration patterns.</p>"},{"location":"multiagent/#role-of-subagent","title":"Role of SubAgent","text":"<ul> <li>Specialized Division of Labor: Each SubAgent focuses on specific domains or task types</li> <li>Modular Design: Decomposes complex systems into manageable components</li> <li>Flexible Combination: Can combine different SubAgents as needed</li> <li>Unified Interface: All collaboration patterns are based on the same <code>WithSubAgents</code> mechanism</li> </ul>"},{"location":"multiagent/#basic-usage","title":"Basic Usage","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n)\n\n// Create SubAgent.\nmathAgent := llmagent.New(\n    \"math-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"Handles mathematical calculations and numerical problems\"),\n    llmagent.WithInstruction(\"You are a mathematics expert, focusing on mathematical operations and numerical reasoning...\"),\n)\n\nweatherAgent := llmagent.New(\n    \"weather-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"Provides weather information and suggestions\"),\n    llmagent.WithInstruction(\"You are a weather expert, providing weather analysis and activity suggestions...\"),\n)\n\n// Use WithSubAgents option to configure SubAgent.\nmainAgent := llmagent.New(\n    \"coordinator-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"Coordinator Agent responsible for task delegation\"),\n    llmagent.WithInstruction(\"You are a coordinator, analyzing user requests and delegating to appropriate experts...\"),\n    llmagent.WithSubAgents([]agent.Agent{mathAgent, weatherAgent}),\n)\n</code></pre>"},{"location":"multiagent/#core-collaboration-patterns_1","title":"Core Collaboration Patterns","text":"<p>All collaboration patterns are based on the SubAgent concept, implemented through different execution strategies:</p>"},{"location":"multiagent/#chain-agent-chainagent","title":"Chain Agent (ChainAgent)","text":"<p>Chain Agent uses SubAgents connected sequentially to form processing pipelines. Each SubAgent focuses on specific tasks and passes results to the next SubAgent.</p>"},{"location":"multiagent/#use-cases","title":"Use Cases","text":"<ul> <li>Content Creation Workflow: Planning \u2192 Research \u2192 Writing</li> <li>Problem Solving Workflow: Analysis \u2192 Design \u2192 Implementation</li> <li>Data Processing Workflow: Collection \u2192 Cleaning \u2192 Analysis</li> </ul>"},{"location":"multiagent/#basic-usage_1","title":"Basic Usage","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/chainagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n)\n\n// Create SubAgent.\nplanningAgent := llmagent.New(\"planning-agent\", ...)\nresearchAgent := llmagent.New(\"research-agent\", ...)\nwritingAgent := llmagent.New(\"writing-agent\", ...)\n\n// Create chain Agent, use WithSubAgents to configure SubAgent.\nchainAgent := chainagent.New(\n    \"multi-agent-chain\",\n    chainagent.WithSubAgents([]agent.Agent{\n        planningAgent, \n        researchAgent, \n        writingAgent,\n    }),\n)\n</code></pre>"},{"location":"multiagent/#example-session","title":"Example Session","text":"<pre><code>\ud83d\udd17 Multi-Agent Chain Demo\nChain Flow: Planning \u2192 Research \u2192 Writing\n==================================================\n\n\ud83d\udc64 User: Explain the benefits of renewable energy\n\n\ud83d\udccb Planning Agent: I will create a structured analysis plan...\n\n\ud83d\udd0d Research Agent:\n\ud83d\udd27 Using tools:\n   \u2022 web_search (ID: call_123)\n\ud83d\udd04 Executing...\n\u2705 Tool result: Latest renewable energy data...\n\n\u270d\ufe0f Writing Agent: Based on planning and research:\n[Structured comprehensive response]\n</code></pre>"},{"location":"multiagent/#parallel-agent-parallelagent","title":"Parallel Agent (ParallelAgent)","text":"<p>Parallel Agent uses SubAgents to process different aspects of the same input simultaneously, providing multi-perspective analysis.</p>"},{"location":"multiagent/#use-cases_1","title":"Use Cases","text":"<ul> <li>Business Decision Analysis: Market analysis, technical assessment, risk evaluation, opportunity analysis</li> <li>Multi-dimensional Evaluation: Different experts simultaneously evaluating the same problem</li> <li>Fast Parallel Processing: Scenarios requiring multiple perspectives simultaneously</li> </ul>"},{"location":"multiagent/#basic-usage_2","title":"Basic Usage","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/parallelagent\"\n)\n\n// Create SubAgent.\nmarketAgent := llmagent.New(\"market-analysis\", ...)\ntechnicalAgent := llmagent.New(\"technical-assessment\", ...)\nriskAgent := llmagent.New(\"risk-evaluation\", ...)\nopportunityAgent := llmagent.New(\"opportunity-analysis\", ...)\n\n// Create parallel Agent, use WithSubAgents to configure SubAgent.\nparallelAgent := parallelagent.New(\n    \"parallel-demo\",\n    parallelagent.WithSubAgents([]agent.Agent{\n        marketAgent,\n        technicalAgent, \n        riskAgent,\n        opportunityAgent,\n    }),\n)\n</code></pre>"},{"location":"multiagent/#example-session_1","title":"Example Session","text":"<pre><code>\u26a1 Parallel Multi-Agent Demo\nAgents: Market \ud83d\udcca | Technical \u2699\ufe0f | Risk \u26a0\ufe0f | Opportunity \ud83d\ude80\n==================================================\n\n\ud83d\udcac User: Should we implement blockchain for supply chain tracking?\n\n\ud83d\ude80 Starting parallel analysis: \"Should we implement blockchain for supply chain tracking?\"\n\ud83d\udcca Agents analyzing different perspectives...\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\ud83d\udcca [market-analysis] Starting analysis...\n\u2699\ufe0f [technical-assessment] Starting analysis...\n\u26a0\ufe0f [risk-evaluation] Starting analysis...\n\ud83d\ude80 [opportunity-analysis] Starting analysis...\n\n\ud83d\udcca [market-analysis]: Blockchain supply chain market is experiencing strong growth with 67% CAGR...\n\n\u2699\ufe0f [technical-assessment]: Implementation requires distributed ledger infrastructure and consensus mechanisms...\n\n\u26a0\ufe0f [risk-evaluation]: Main risks include 40% target market regulatory uncertainty...\n\n\ud83d\ude80 [opportunity-analysis]: Strategic advantages include enhanced transparency, leading to 15-20% cost reduction...\n\n\ud83c\udfaf All parallel analysis completed successfully!\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u2705 Multi-perspective analysis completed in 4.1 seconds\n</code></pre>"},{"location":"multiagent/#cycle-agent-cycleagent","title":"Cycle Agent (CycleAgent)","text":"<p>Cycle Agent uses SubAgents to run in iterative loops until specific conditions are met (such as quality thresholds or maximum iterations).</p>"},{"location":"multiagent/#use-cases_2","title":"Use Cases","text":"<ul> <li>Content Optimization: Generate \u2192 Evaluate \u2192 Improve \u2192 Repeat</li> <li>Problem Solving: Propose \u2192 Evaluate \u2192 Enhance \u2192 Repeat</li> <li>Quality Assurance: Draft \u2192 Review \u2192 Revise \u2192 Repeat</li> </ul>"},{"location":"multiagent/#basic-usage_3","title":"Basic Usage","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/cycleagent\"\n)\n\n// Create SubAgent.\ngenerateAgent := llmagent.New(\"generate-agent\", ...)\ncriticAgent := llmagent.New(\"critic-agent\", ...)\n\n// Create cycle Agent, use WithSubAgents to configure SubAgent.\ncycleAgent := cycleagent.New(\n    \"cycle-demo\",\n    cycleagent.WithSubAgents([]agent.Agent{\n        generateAgent,\n        criticAgent,\n    }),\n    cycleagent.WithMaxIterations(3),\n    cycleagent.WithEscalationFunc(qualityEscalationFunc),\n)\n</code></pre>"},{"location":"multiagent/#example-session_2","title":"Example Session","text":"<pre><code>\ud83d\udd04 Multi-Agent Cycle Demo\nMax iterations: 3\nCycle: Generate \u2192 Evaluate \u2192 Improve \u2192 Repeat\n==================================================\n\n\ud83d\udc64 User: Write a short joke\n\n\ud83e\udd16 Cycle Response:\n\n\ud83e\udd16 Generate Agent: Why don't skeletons fight each other?\nBecause they don't have the guts!\n\n\ud83d\udc40 Evaluate Agent:\n\ud83d\udd27 Using tools:\n   \u2022 record_score (ID: call_123)\n\ud83d\udd04 Executing...\n\u2705 Quality score: 75/100\n\u26a0\ufe0f Needs improvement - continue iteration\n\n\ud83d\udd04 **2nd Iteration**\n\n\ud83e\udd16 Generate Agent: This is an improved version with a new twist:\n**Why do skeletons never win arguments?**\nBecause they always lose their backbone halfway through!\n\n\ud83d\udc40 Evaluate Agent:\n\ud83d\udd27 Using tools:\n   \u2022 record_score (ID: call_456)\n\ud83d\udd04 Executing...\n\u2705 Quality score: 85/100\n\ud83c\udf89 Quality threshold reached - cycle completed\n\n\ud83c\udfc1 Cycle completed after 2 iterations\n</code></pre>"},{"location":"multiagent/#auxiliary-functions_1","title":"Auxiliary Functions","text":""},{"location":"multiagent/#agent-tool-agenttool","title":"Agent Tool (AgentTool)","text":"<p>Agent Tool is an important foundational function for building complex multi-agent systems. It allows you to wrap any Agent as a callable tool for use by other Agents or applications.</p>"},{"location":"multiagent/#use-cases_3","title":"Use Cases","text":"<ul> <li>Specialized Delegation: Different Agents handle specific types of tasks</li> <li>Tool Integration: Agents can be integrated as tools into larger systems</li> <li>Modular Design: Reusable Agent components can be combined together</li> <li>Complex Workflows: Complex workflows involving multiple specialized Agents</li> </ul>"},{"location":"multiagent/#basic-usage_4","title":"Basic Usage","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n    agenttool \"trpc.group/trpc-go/trpc-agent-go/tool/agent\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\n// Create specialized Agent.\nmathAgent := llmagent.New(\n    \"math-specialist\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"Agent specialized in mathematical operations\"),\n    llmagent.WithInstruction(\"You are a mathematics expert, focusing on mathematical operations, calculations and numerical reasoning...\"),\n    llmagent.WithTools([]tool.Tool{calculatorTool}),\n)\n\n// Wrap Agent as tool.\nagentTool := agenttool.NewTool(\n    mathAgent,\n    // Default skip summarization=true: end the turn after tool.response\n    agenttool.WithSkipSummarization(true),\n    // Enable inner forwarding: stream child Agent events inline to the parent\n    agenttool.WithStreamInner(true),\n)\n\n// Use Agent tool in main Agent.\nmainAgent := llmagent.New(\n    \"chat-assistant\",\n    llmagent.WithTools([]tool.Tool{timeTool, agentTool}),\n)\n</code></pre>"},{"location":"multiagent/#agent-tool-architecture","title":"Agent Tool Architecture","text":"<pre><code>Chat Assistant (Main Agent)\n\u251c\u2500\u2500 Time Tool (Function)\n\u2514\u2500\u2500 Math Specialist Agent Tool (Agent)\n    \u2514\u2500\u2500 Math Specialist Agent (Specialized Agent)\n        \u2514\u2500\u2500 Calculator Tool (Function)\n</code></pre>"},{"location":"multiagent/#example-session_3","title":"Example Session","text":"<pre><code>\ud83d\ude80 Agent Tool Example\nModel: deepseek-chat\nAvailable tools: current_time, math-specialist\n==================================================\n\n\ud83d\udc64 User: Calculate 923476 * 273472354\n\n\ud83e\udd16 Assistant: I will use the math specialist Agent to calculate this result.\n\n\ud83d\udd27 Tool call initiated:\n   \u2022 math-specialist (ID: call_0_e53a77e9-c994-4421-bfc3-f63fe85678a1)\n     Parameters: {\"request\":\"Calculate 923476 multiplied by 273472354\"}\n\n\ud83d\udd04 Executing tool...\n\u2705 Tool response (ID: call_0_e53a77e9-c994-4421-bfc3-f63fe85678a1):\n\"The result of calculating 923,476 multiplied by 273,472,354 is:\n\n\\[\n923,\\!476 \\times 273,\\!472,\\!354 = 252,\\!545,\\!155,\\!582,\\!504\n\\]\"\n\n\u2705 Tool execution completed.\n</code></pre>"},{"location":"multiagent/#streaming-inner-forwarding-streaminner","title":"Streaming Inner Forwarding (StreamInner)","text":"<p>When <code>WithStreamInner(true)</code> is enabled for the Agent tool:</p> <ul> <li>Child Agent events are forwarded as streaming <code>event.Event</code> items; you can directly display <code>choice.Delta.Content</code></li> <li>To avoid duplicates, the child Agent\u2019s final full text is not forwarded again; it is aggregated into the final <code>tool.response</code> that follows tool_calls (satisfying provider requirements)</li> <li>UI recommendations:<ul> <li>Show forwarded child deltas as they stream</li> <li>By default, don\u2019t reprint the final aggregated tool response text unless debugging</li> </ul> </li> </ul> <p>Example: Distinguish outer assistant, child Agent (forwarded), and tool responses in your event loop</p> <pre><code>// Child Agent forwarded delta (author != parent)\nif ev.Author != parentName &amp;&amp; ev.Response != nil &amp;&amp; len(ev.Response.Choices) &gt; 0 {\n    if delta := ev.Response.Choices[0].Delta.Content; delta != \"\" {\n        fmt.Print(delta)\n    }\n    return\n}\n\n// Tool response (aggregated content), skip by default to avoid duplicates\nif ev.Response != nil &amp;&amp; ev.Object == model.ObjectTypeToolResponse {\n    // ...show on demand or skip\n    return\n}\n</code></pre>"},{"location":"multiagent/#option-matrix","title":"Option Matrix","text":"<ul> <li><code>WithSkipSummarization(true)</code>: Don\u2019t run an extra outer summarization after the tool response (recommended default)</li> <li><code>WithSkipSummarization(false)</code>: Allow one more summarization LLM call after the tool</li> <li><code>WithStreamInner(true)</code>: Forward child Agent events (use <code>Stream: true</code> on both parent and child Agents)</li> <li><code>WithStreamInner(false)</code>: Treat as a callable-only tool, without inner forwarding</li> </ul>"},{"location":"multiagent/#agent-transfer","title":"Agent Transfer","text":"<p>Agent Transfer implements task delegation between Agents through the <code>transfer_to_agent</code> tool, allowing the main Agent to automatically select appropriate SubAgents based on task type.</p>"},{"location":"multiagent/#use-cases_4","title":"Use Cases","text":"<ul> <li>Task Classification: Automatically select appropriate SubAgents based on user requests</li> <li>Intelligent Routing: Route complex tasks to the most suitable handlers</li> <li>Specialized Processing: Each SubAgent focuses on specific domains</li> <li>Seamless Switching: Seamlessly switch between SubAgents while maintaining conversation continuity</li> </ul>"},{"location":"multiagent/#basic-usage_5","title":"Basic Usage","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\n// Create SubAgent.\nmathAgent := llmagent.New(\n    \"math-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"Handles mathematical calculations and numerical problems\"),\n    llmagent.WithInstruction(\"You are a mathematics expert, focusing on mathematical operations and numerical reasoning...\"),\n    llmagent.WithTools([]tool.Tool{calculatorTool}),\n)\n\nweatherAgent := llmagent.New(\n    \"weather-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"Provides weather information and suggestions\"),\n    llmagent.WithInstruction(\"You are a weather expert, providing weather analysis and activity suggestions...\"),\n    llmagent.WithTools([]tool.Tool{weatherTool}),\n)\n\n// Create coordinator Agent, use WithSubAgents to configure SubAgent.\ncoordinatorAgent := llmagent.New(\n    \"coordinator-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"Coordinator Agent responsible for task delegation\"),\n    llmagent.WithInstruction(\"You are a coordinator, analyzing user requests and delegating to appropriate experts...\"),\n    llmagent.WithSubAgents([]agent.Agent{mathAgent, weatherAgent}),\n)\n</code></pre>"},{"location":"multiagent/#agent-transfer-architecture","title":"Agent Transfer Architecture","text":"<pre><code>Coordinator Agent (Main Entry)\n\u251c\u2500\u2500 Analyze user requests\n\u251c\u2500\u2500 Select appropriate SubAgent\n\u2514\u2500\u2500 Use transfer_to_agent tool to delegate tasks\n    \u251c\u2500\u2500 Math SubAgent (Mathematical calculations)\n    \u251c\u2500\u2500 Weather SubAgent (Weather information)\n    \u2514\u2500\u2500 Research SubAgent (Information search)\n</code></pre>"},{"location":"multiagent/#example-session_4","title":"Example Session","text":"<pre><code>\ud83d\udd04 Agent Transfer Demo\nAvailable SubAgents: math-agent, weather-agent, research-agent\n==================================================\n\n\ud83d\udc64 User: Calculate compound interest, principal $5000, annual rate 6%, term 8 years\n\n\ud83c\udfaf Coordinator: I will delegate this task to our mathematics expert for accurate calculation.\n\ud83d\udd04 Initiating delegation...\n\ud83d\udd04 Transfer event: Transferring control to Agent: math-agent\n\n\ud83e\uddee Math Expert: I will help you calculate compound interest step by step.\n\ud83d\udd27 \ud83e\uddee Executing tool:\n   \u2022 calculate ({\"operation\":\"power\",\"a\":1.06,\"b\":8})\n   \u2705 Tool completed\n\ud83d\udd27 \ud83e\uddee Executing tool:\n   \u2022 calculate ({\"operation\":\"multiply\",\"a\":5000,\"b\":1.593})\n   \u2705 Tool completed\n\nCompound Interest Calculation Result:\n- Principal: $5,000\n- Annual Rate: 6%\n- Term: 8 years\n- Result: $7,969.24 (interest approximately $2,969.24)\n</code></pre>"},{"location":"multiagent/#environment-variable-configuration","title":"Environment Variable Configuration","text":"<p>All multi-agent examples require the following environment variables:</p> Variable Name Required Default Value Description <code>OPENAI_API_KEY</code> Yes - OpenAI API key <code>OPENAI_BASE_URL</code> No <code>https://api.openai.com/v1</code> OpenAI API base URL"},{"location":"multiagent/#running-examples","title":"Running Examples","text":"<p>All example code is located at examples</p>"},{"location":"multiagent/#core-collaboration-pattern-examples","title":"Core Collaboration Pattern Examples","text":""},{"location":"multiagent/#chain-agent-example","title":"Chain Agent Example","text":"<pre><code>cd examples/multiagent/chain\nexport OPENAI_API_KEY=\"your-api-key\"\ngo run main.go -model deepseek-chat\n</code></pre>"},{"location":"multiagent/#parallel-agent-example","title":"Parallel Agent Example","text":"<pre><code>cd examples/multiagent/parallel\nexport OPENAI_API_KEY=\"your-api-key\"\ngo run main.go -model deepseek-chat\n</code></pre>"},{"location":"multiagent/#cycle-agent-example","title":"Cycle Agent Example","text":"<pre><code>cd examples/multiagent/cycle\nexport OPENAI_API_KEY=\"your-api-key\"\ngo run main.go -model deepseek-chat -max-iterations 5\n</code></pre>"},{"location":"multiagent/#auxiliary-function-examples","title":"Auxiliary Function Examples","text":""},{"location":"multiagent/#agent-tool-example","title":"Agent Tool Example","text":"<pre><code>cd examples/agenttool\nexport OPENAI_API_KEY=\"your-api-key\"\ngo run main.go -model deepseek-chat\n</code></pre>"},{"location":"multiagent/#agent-transfer-example","title":"Agent Transfer Example","text":"<pre><code>cd examples/transfer\nexport OPENAI_API_KEY=\"your-api-key\"\ngo run main.go -model deepseek-chat\n</code></pre>"},{"location":"multiagent/#customization-and-extension","title":"Customization and Extension","text":""},{"location":"multiagent/#adding-new-agents","title":"Adding New Agents","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/chainagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n)\n\n// Create custom Agent.\ncustomAgent := llmagent.New(\n    \"custom-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"Custom Agent description\"),\n    llmagent.WithInstruction(\"Custom instruction\"),\n    llmagent.WithTools([]tool.Tool{customTool}),\n)\n\n// Integrate into multi-agent system.\nchainAgent := chainagent.New(\n    \"custom-chain\",\n    chainagent.WithSubAgents([]agent.Agent{\n        existingAgent,\n        customAgent,  // Add custom Agent.\n    }),\n)\n</code></pre>"},{"location":"multiagent/#configuring-tools","title":"Configuring Tools","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\n// Create custom tool.\ncustomTool := function.NewFunctionTool(\n    customFunction,\n    function.WithName(\"custom_tool\"),\n    function.WithDescription(\"Custom tool description\"),\n)\n\n// Assign tools to Agent.\nagent := llmagent.New(\n    \"tool-agent\",\n    llmagent.WithTools([]tool.Tool{customTool}),\n)\n</code></pre>"},{"location":"multiagent/#adjusting-parameters","title":"Adjusting Parameters","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n)\n\n// Configure generation parameters.\ngenConfig := model.GenerationConfig{\n    MaxTokens:   intPtr(500),\n    Temperature: floatPtr(0.7),\n    Stream:      true,\n}\n\n// Apply to Agent.\nagent := llmagent.New(\n    \"configured-agent\",\n    llmagent.WithGenerationConfig(genConfig),\n)\n</code></pre>"},{"location":"observability/","title":"Observability Features","text":""},{"location":"observability/#overview","title":"Overview","text":"<p>tRPC-Agent-Go provides comprehensive observability features built on the OpenTelemetry standard, offering powerful observability capabilities for Agent applications. With observability enabled, developers can achieve end-to-end monitoring of Agent runtime status, including tracing, performance metrics collection, and logging.</p>"},{"location":"observability/#key-features","title":"\ud83c\udfaf Key Features","text":"<ul> <li>Tracing: Fully records call chains during Agent execution.</li> <li>Metrics: Collects key runtime performance data for Agents.</li> <li>Logging: Unified log collection and management.</li> <li>Multi-platform Support: Supports mainstream monitoring platforms such as Jaeger, Prometheus, Galileo, and ZhiYan Monitoring Bao.</li> <li>Flexible Configuration: Supports multiple configuration methods and custom extensions.</li> </ul>"},{"location":"observability/#integration-with-different-monitoring-platforms","title":"Integration with Different Monitoring Platforms","text":""},{"location":"observability/#langfuse-integration","title":"Langfuse Integration","text":"<p>Langfuse is an observability platform designed for LLM applications and supports collecting tracing data via the OpenTelemetry protocol. tRPC-Agent-Go can export Trace data to Langfuse via OpenTelemetry.</p>"},{"location":"observability/#1-deploy-langfuse","title":"1. Deploy Langfuse","text":"<p>Refer to the Langfuse self-hosting guide for local or cloud deployment. For a quick start, see the Docker Compose deployment guide.</p>"},{"location":"observability/#2-go-code-integration-example","title":"2. Go Code Integration Example","text":"<pre><code>export LANGFUSE_PUBLIC_KEY=\"your-public-key\"\nexport LANGFUSE_SECRET_KEY=\"your-secret-key\"\nexport LANGFUSE_HOST=\"your-langfuse-host\"\nexport LANGFUSE_INSECURE=\"true\" # for insecure connections (development only)\n</code></pre> <pre><code>import (\n    \"context\"\n    \"log\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/telemetry/langfuse\"\n)\n\nfunc main() {\n    // Start trace with Langfuse integration using environment variables\n    clean, err := langfuse.Start(context.Background())\n    if err != nil {\n        log.Fatalf(\"Failed to start trace telemetry: %v\", err)\n    }\n    defer func() {\n        if err := clean(context.Background()); err != nil {\n            log.Printf(\"Failed to clean up trace telemetry: %v\", err)\n        }\n    }()\n</code></pre> <p>See the complete example at examples/telemetry/langfuse.</p> <p>Run the example:</p> <pre><code>go run .\n</code></pre> <p>You can view tracing data in the Langfuse console.</p>"},{"location":"observability/#integration-code-description","title":"Integration Code Description","text":"<p>Langfuse supports receiving Trace data via the <code>/api/public/otel</code> (OTLP) endpoint, supporting HTTP/protobuf only, not gRPC. The above code integrates with Langfuse by setting <code>OTEL_EXPORTER_OTLP_HEADERS</code> and <code>OTEL_EXPORTER_OTLP_TRACES_ENDPOINT</code>.</p> <pre><code># EU data region\nOTEL_EXPORTER_OTLP_ENDPOINT=\"https://cloud.langfuse.com/api/public/otel\"\n# US data region\n# OTEL_EXPORTER_OTLP_ENDPOINT=\"https://us.cloud.langfuse.com/api/public/otel\"\n# Local deployment (&gt;= v3.22.0)\n# OTEL_EXPORTER_OTLP_ENDPOINT=\"http://localhost:3000/api/public/otel\"\n\n# Set Basic Auth authentication\nOTEL_EXPORTER_OTLP_HEADERS=\"Authorization=Basic ${AUTH_STRING}\"\n</code></pre> <p><code>AUTH_STRING</code> is the base64 encoding of <code>public_key:secret_key</code>, which can be generated using the following command:</p> <pre><code>echo -n \"pk-lf-xxxx:sk-lf-xxxx\" | base64\n# On GNU systems, add -w 0 to avoid line breaks\n</code></pre> <p>To specify the endpoint for traces only, set:</p> <pre><code>OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=\"http://localhost:3000/api/public/otel/v1/traces\"\n</code></pre>"},{"location":"observability/#jaeger-prometheus-and-other-open-source-monitoring-platforms","title":"Jaeger, Prometheus, and Other Open-Source Monitoring Platforms","text":"<p>Refer to code examples in examples/telemetry.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n\n    ametric \"trpc.group/trpc-go/trpc-agent-go/telemetry/metric\"\n    atrace \"trpc.group/trpc-go/trpc-agent-go/telemetry/trace\"\n)\n\nfunc main() {\n    // Start metrics collection.\n    metricClean, err := ametric.Start(\n        context.Background(),\n        ametric.WithEndpoint(\"localhost:4317\"), // Metric export address.\n    )\n    if err != nil {\n        log.Fatalf(\"Failed to start metric telemetry: %v\", err)\n    }\n    defer metricClean()\n\n    // Start tracing.\n    traceClean, err := atrace.Start(\n        context.Background(),\n        atrace.WithEndpoint(\"localhost:4317\"), // Trace export address.\n    )\n    if err != nil {\n        log.Fatalf(\"Failed to start trace telemetry: %v\", err)\n    }\n    defer traceClean()\n\n    // Your Agent application code.\n    // ...\n    // You can add custom traces and metrics.\n}\n</code></pre>"},{"location":"observability/#jaeger-trace-example","title":"Jaeger trace example","text":""},{"location":"observability/#prometheus-metrics-example","title":"Prometheus metrics example","text":""},{"location":"observability/#practical-application-examples","title":"Practical Application Examples","text":""},{"location":"observability/#basic-metrics-and-tracing","title":"Basic Metrics and Tracing","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n\n    ametric \"trpc.group/trpc-go/trpc-agent-go/telemetry/metric\"\n    atrace \"trpc.group/trpc-go/trpc-agent-go/telemetry/trace\"\n    \"go.opentelemetry.io/otel/attribute\"\n    \"go.opentelemetry.io/otel/metric\"\n    \"go.opentelemetry.io/otel/trace\"\n)\n\nfunc processAgentRequest(ctx context.Context) error {\n    // Create tracing span.\n    ctx, span := atrace.Tracer.Start(\n        ctx,\n        \"process-agent-request\",\n        trace.WithAttributes(\n            attribute.String(\"agent.type\", \"chat\"),\n            attribute.String(\"user.id\", \"user123\"),\n        ),\n    )\n    defer span.End()\n\n    // Create metrics counter.\n    requestCounter, err := ametric.Meter.Int64Counter(\n        \"agent.requests.total\",\n        metric.WithDescription(\"Total number of agent requests\"),\n    )\n    if err != nil {\n        return err\n    }\n\n    // Record request.\n    requestCounter.Add(ctx, 1, metric.WithAttributes(\n        attribute.String(\"agent.type\", \"chat\"),\n        attribute.String(\"status\", \"success\"),\n    ))\n\n    // Simulate processing.\n    time.Sleep(100 * time.Millisecond)\n\n    return nil\n}\n</code></pre>"},{"location":"observability/#agent-execution-tracing","title":"Agent Execution Tracing","text":"<p>The framework automatically instruments key components of Agents:</p> <pre><code>// Agent execution will automatically generate the following observability data:\n// \n// Traces:\n// - agent.execution: Overall Agent execution process.\n// - tool.invocation: Tool invocation process.  \n// - model.api_call: Model API call process.\n</code></pre>"},{"location":"observability/#telemetry-data-analysis","title":"Telemetry Data Analysis","text":""},{"location":"observability/#trace-analysis","title":"Trace Analysis","text":"<p>A typical Agent execution trace structure:</p> <pre><code>Agent Request\n\u251c\u2500\u2500 Planning Phase\n\u2502   \u251c\u2500\u2500 Model API Call (DeepSeek)\n\u2502   \u2514\u2500\u2500 Response Processing\n\u251c\u2500\u2500 Tool Execution Phase  \n\u2502   \u251c\u2500\u2500 Tool: web_search\n\u2502   \u251c\u2500\u2500 Tool: knowledge_base\n\u2502   \u2514\u2500\u2500 Result Processing\n\u2514\u2500\u2500 Response Generation Phase\n    \u251c\u2500\u2500 Model API Call (DeepSeek)\n    \u2514\u2500\u2500 Final Response Formatting\n</code></pre> <p>Trace data can be used to analyze:</p> <ul> <li>Performance Bottlenecks: Identify the most time-consuming operations.</li> <li>Error Localization: Quickly locate the exact failing step.</li> <li>Dependencies: Understand relationships between components.</li> <li>Concurrency Analysis: Observe the effects of concurrent execution.</li> </ul>"},{"location":"observability/#advanced-features","title":"Advanced Features","text":""},{"location":"observability/#custom-exporter","title":"Custom Exporter","text":"<p>If you need to send observability data to a custom monitoring system:</p> <pre><code>import (\n    \"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp\"\n    \"go.opentelemetry.io/otel/sdk/trace\"\n)\n\nfunc setupCustomExporter() error {\n    exporter, err := otlptracehttp.New(\n        context.Background(),\n        otlptracehttp.WithEndpoint(\"https://your-custom-endpoint.com\"),\n        otlptracehttp.WithHeaders(map[string]string{\n            \"Authorization\": \"Bearer your-token\",\n        }),\n    )\n    if err != nil {\n        return err\n    }\n\n    tp := trace.NewTracerProvider(\n        trace.WithBatcher(exporter),\n    )\n\n    // Set as the global TracerProvider.\n    otel.SetTracerProvider(tp)\n\n    return nil\n}\n</code></pre>"},{"location":"observability/#references","title":"References","text":"<ul> <li>OpenTelemetry documentation.</li> <li>tRPC-Agent-Go telemetry examples.</li> </ul> <p>By using observability features properly, you can establish a complete monitoring system for Agent applications, discover and resolve issues in time, and continuously optimize system performance.</p>"},{"location":"planner/","title":"Planner Usage Guide","text":"<p>Planner is a component for implementing planning capabilities for Agents. It allows an Agent to formulate a plan before executing tasks, thereby improving execution efficiency and accuracy.</p> <p>The framework provides two Planner implementations, each suited for different types of models:</p> <ul> <li>BuiltinPlanner: Suitable for models that support native reasoning/thinking.</li> <li>ReActPlanner: Suitable for models that do not support native reasoning, guiding the model to output in a fixed, labeled format to provide a structured reasoning process.</li> </ul>"},{"location":"planner/#planner-interface","title":"Planner Interface","text":"<p>The Planner interface defines the methods that all planners must implement:</p> <pre><code>type Planner interface {\n    // BuildPlanningInstruction applies necessary configurations to the LLM request and constructs the system instruction to be attached for planning.\n    // Return an empty string if no instruction is needed.\n    BuildPlanningInstruction(\n        ctx context.Context,\n        invocation *agent.Invocation,\n        llmRequest *model.Request,\n    ) string\n\n    // ProcessPlanningResponse processes the LLM's planning response and returns the processed response.\n    // Return nil if no processing is needed.\n    ProcessPlanningResponse(\n        ctx context.Context,\n        invocation *agent.Invocation,\n        response *model.Response,\n    ) *model.Response\n}\n</code></pre> <p>Planner workflow:</p> <ol> <li>Request processing phase: Before the LLM request is sent, the Planner adds planning instructions or configurations via <code>BuildPlanningInstruction</code>.</li> <li>Response processing phase: The Planner processes the LLM response and organizes the content structure via <code>ProcessPlanningResponse</code>.</li> </ol>"},{"location":"planner/#builtinplanner","title":"BuiltinPlanner","text":"<p>BuiltinPlanner is suitable for models that support native reasoning. It does not generate explicit planning instructions, but instead configures the model to use its internal reasoning mechanisms to implement planning.</p> <p>Model configuration:</p> <pre><code>type Options struct {\n    // ReasoningEffort limits the reasoning effort of the reasoning model.\n    // Supported values: \"low\", \"medium\", \"high\".\n    // Only effective for OpenAI o-series models.\n    ReasoningEffort *string\n    // ThinkingEnabled enables thinking mode for models that support it.\n    // Only effective for Claude and Gemini models via OpenAI API.\n    ThinkingEnabled *bool\n    // ThinkingTokens controls the length of thinking.\n    // Only effective for Claude and Gemini models via OpenAI API.\n    ThinkingTokens *int\n}\n</code></pre> <p>Implementation details for BuiltinPlanner:</p> <ul> <li><code>BuildPlanningInstruction</code>: Injects reasoning parameters into the LLM request. Since the model supports native thinking, no planning tags are required, so it returns an empty string.</li> <li><code>ProcessPlanningResponse</code>: Since the model's response already contains the planning process, it directly returns nil.</li> </ul> <p>Example:</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/planner/builtin\"\n)\n\n// Create model instance.\nmodelInstance := openai.New(\"gpt-4o-mini\")\n\n// Create BuiltinPlanner.\nreasoningEffort := \"high\"\nplanner := builtin.New(builtin.Options{\n    ReasoningEffort: &amp;reasoningEffort,\n})\n\n// Create LLMAgent and configure Planner.\nllmAgent := llmagent.New(\n    \"demo-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"A helpful AI assistant with built-in planning\"),\n    llmagent.WithInstruction(\"Be helpful and think through problems carefully\"),\n    llmagent.WithPlanner(planner), // Configure Planner.\n)\n</code></pre>"},{"location":"planner/#reactplanner","title":"ReActPlanner","text":"<p>ReActPlanner is suitable for models that do not support native reasoning. It guides the LLM to follow a specific format and uses specific tags to structure planning, reasoning, actions, and the final answer, thus enabling a structured reasoning process.</p> <p>ReActPlanner uses the following specific tags to organize response content:</p> <ol> <li>Planning phase (<code>/*PLANNING*/</code>): Create a clear plan to answer the user's question.</li> <li>Reasoning phase (<code>/*REASONING*/</code>): Provide reasoning between tool executions.</li> <li>Action phase (<code>/*ACTION*/</code>): Execute tools according to the plan.</li> <li>Replanning (<code>/*REPLANNING*/</code>): Revise the plan as needed based on results.</li> <li>Final answer (<code>/*FINAL_ANSWER*/</code>): Provide a comprehensive answer.</li> </ol> <p>Implementation details for ReActPlanner:</p> <ul> <li><code>BuildPlanningInstruction</code>: Returns a comprehensive instruction that includes high-level guidance, planning requirements, reasoning requirements, etc., guiding the model to output using labeled format.</li> <li><code>ProcessPlanningResponse</code>: Filters tool calls with empty names. If the content contains the <code>/*FINAL_ANSWER*/</code> tag, only the final answer part is retained; otherwise, the original content is returned, separating planning content from the final answer.</li> </ul> <p>Usage example:</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/planner/react\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\n// Create model instance.\nmodelInstance := openai.New(\"gpt-4o-mini\")\n\n// Create tool.\nsearchTool := function.NewFunctionTool(\n    searchFunction,\n    function.WithName(\"search\"),\n    function.WithDescription(\"Search for information on a given topic\"),\n)\n\n// Create ReActPlanner.\nplanner := react.New()\n\n// Create LLMAgent and configure Planner.\nllmAgent := llmagent.New(\n    \"react-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"An AI assistant that uses structured planning\"),\n    llmagent.WithInstruction(\"Follow a structured approach to solve problems\"),\n    llmagent.WithPlanner(planner), // Configure Planner.\n    llmagent.WithTools([]tool.Tool{searchTool}), // Configure tools.\n)\n</code></pre> <p>See the complete example at examples/react.</p>"},{"location":"planner/#custom-planner","title":"Custom Planner","text":"<p>In addition to the two Planner implementations provided by the framework, you can also create a custom Planner by implementing the <code>Planner</code> interface to meet specific needs:</p> <pre><code>type customPlanner struct {\n    // Custom configuration.\n}\n\nfunc (p *customPlanner) BuildPlanningInstruction(\n    ctx context.Context,\n    invocation *agent.Invocation,\n    llmRequest *model.Request,\n) string {\n    // Return custom planning instruction.\n    return \"Your custom planning instruction\"\n}\n\nfunc (p *customPlanner) ProcessPlanningResponse(\n    ctx context.Context,\n    invocation *agent.Invocation,\n    response *model.Response,\n) *model.Response {\n    // Process response.\n    return response\n}\n\n// Create LLMAgent and configure custom Planner.\nllmAgent := llmagent.New(\n    \"react-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"An AI assistant that uses structured planning\"),\n    llmagent.WithInstruction(\"Follow a structured approach to solve problems\"),\n    llmagent.WithPlanner(&amp;customPlanner{}),      // Configure Planner.\n    llmagent.WithTools([]tool.Tool{searchTool}), // Configure tools.\n)\n</code></pre>"},{"location":"runner/","title":"Runner Component User Guide","text":""},{"location":"runner/#overview","title":"Overview","text":"<p>Runner provides the interface to run Agents, responsible for session management and event stream processing. The core responsibilities of Runner are: obtain or create sessions, generate an Invocation ID, call Agent.Run, process the returned event stream, and append non-partial response events to the session.</p>"},{"location":"runner/#key-features","title":"\ud83c\udfaf Key Features","text":"<ul> <li>\ud83d\udcbe Session Management: Obtain/create sessions via sessionService, using inmemory.NewSessionService() by default.</li> <li>\ud83d\udd04 Event Handling: Receive Agent event streams and append non-partial response events to the session.</li> <li>\ud83c\udd94 ID Generation: Automatically generate Invocation IDs and event IDs.</li> <li>\ud83d\udcca Observability Integration: Integrates telemetry/trace to automatically record spans.</li> <li>\u2705 Completion Event: Generates a runner-completion event after the Agent event stream ends.</li> </ul>"},{"location":"runner/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       Runner        \u2502  - Session management.\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  - Event stream processing.\n          \u2502\n          \u2502 r.agent.Run(ctx, invocation)\n          \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       Agent         \u2502  - Receives Invocation.\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  - Returns &lt;-chan *event.Event.\n          \u2502\n          \u2502 Implementation is determined by the Agent.\n          \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Agent Impl       \u2502  e.g., LLMAgent, ChainAgent.\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"runner/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"runner/#requirements","title":"\ud83d\udccb Requirements","text":"<ul> <li>Go 1.21 or later.</li> <li>Valid LLM API key (OpenAI-compatible interface).</li> <li>Redis (optional, for distributed session management).</li> </ul>"},{"location":"runner/#minimal-example","title":"\ud83d\udca1 Minimal Example","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n)\n\nfunc main() {\n    // 1. Create model.\n    llmModel := openai.New(\"DeepSeek-V3-Online-64K\")\n\n    // 2. Create Agent.\n    agent := llmagent.New(\"assistant\",\n        llmagent.WithModel(llmModel),\n        llmagent.WithInstruction(\"You are a helpful AI assistant.\"),\n        llmagent.WithGenerationConfig(model.GenerationConfig{Stream: true}), // Enable streaming output.\n    )\n\n    // 3. Create Runner.\n    r := runner.NewRunner(\"my-app\", agent)\n\n    // 4. Run conversation.\n    ctx := context.Background()\n    userMessage := model.NewUserMessage(\"Hello!\")\n\n    eventChan, err := r.Run(ctx, \"user1\", \"session1\", userMessage)\n    if err != nil {\n        panic(err)\n    }\n\n    // 5. Handle responses.\n    for event := range eventChan {\n        if event.Error != nil {\n            fmt.Printf(\"Error: %s\\n\", event.Error.Message)\n            continue\n        }\n\n        if len(event.Choices) &gt; 0 {\n            fmt.Print(event.Choices[0].Delta.Content)\n        }\n    }\n}\n</code></pre>"},{"location":"runner/#run-the-example","title":"\ud83d\ude80 Run the Example","text":"<pre><code># Enter the example directory.\ncd examples/runner\n\n# Set API key.\nexport OPENAI_API_KEY=\"your-api-key\"\n\n# Basic run.\ngo run main.go\n\n# Use Redis session.\ndocker run -d -p 6379:6379 redis:alpine\ngo run main.go -session redis\n\n# Custom model.\ngo run main.go -model \"gpt-4o-mini\"\n</code></pre>"},{"location":"runner/#interactive-features","title":"\ud83d\udcac Interactive Features","text":"<p>After running the example, the following special commands are supported:</p> <ul> <li><code>/history</code> - Ask AI to show conversation history.</li> <li><code>/new</code> - Start a new session (reset conversation context).</li> <li><code>/exit</code> - End the conversation.</li> </ul> <p>When the AI uses tools, detailed invocation processes will be displayed:</p> <pre><code>\ud83d\udd27 Tool Call:\n   \u2022 calculator (ID: call_abc123)\n     Params: {\"operation\":\"multiply\",\"a\":25,\"b\":4}\n\n\ud83d\udd04 Executing...\n\u2705 Tool Response (ID: call_abc123): {\"operation\":\"multiply\",\"a\":25,\"b\":4,\"result\":100}\n\n\ud83e\udd16 Assistant: I calculated 25 \u00d7 4 = 100 for you.\n</code></pre>"},{"location":"runner/#core-api","title":"\ud83d\udd27 Core API","text":""},{"location":"runner/#create-runner","title":"Create Runner","text":"<pre><code>// Basic creation.\nr := runner.NewRunner(appName, agent, options...)\n\n// Common options.\nr := runner.NewRunner(\"my-app\", agent,\n    runner.WithSessionService(sessionService),  // Session service.\n)\n</code></pre>"},{"location":"runner/#run-conversation","title":"Run Conversation","text":"<pre><code>// Execute a single conversation.\neventChan, err := r.Run(ctx, userID, sessionID, message, options...)\n\n// With run options (currently RunOptions is an empty struct, reserved for future use).\neventChan, err := r.Run(ctx, userID, sessionID, message)\n</code></pre>"},{"location":"runner/#provide-conversation-history-auto-seed-session-reuse","title":"Provide Conversation History (auto-seed + session reuse)","text":"<p>If your upstream service maintains the conversation and you want the agent to see that context, you can pass a full history (<code>[]model.Message</code>) directly. The runner will seed an empty session with that history automatically and then merge in new session events.</p> <p>Option A: Use the convenience helper <code>runner.RunWithMessages</code></p> <pre><code>msgs := []model.Message{\n    model.NewSystemMessage(\"You are a helpful assistant.\"),\n    model.NewUserMessage(\"First user input\"),\n    model.NewAssistantMessage(\"Previous assistant reply\"),\n    model.NewUserMessage(\"What\u2019s the next step?\"),\n}\n\nch, err := runner.RunWithMessages(ctx, r, userID, sessionID, msgs)\n</code></pre> <p>Example: <code>examples/runwithmessages</code> (uses <code>RunWithMessages</code>; runner auto-seeds and continues reusing the session)</p> <p>Option B: Pass via RunOption explicitly (same philosophy as ADK Python)</p> <pre><code>msgs := []model.Message{ /* as above */ }\nch, err := r.Run(ctx, userID, sessionID, model.Message{}, agent.WithMessages(msgs))\n</code></pre> <p>When <code>[]model.Message</code> is provided, the runner persists that history into the session on first use (if empty). The content processor does not read this option; it only derives messages from session events (or falls back to the single <code>invocation.Message</code> if the session has no events). <code>RunWithMessages</code> still sets <code>invocation.Message</code> to the latest user turn so graph/flow agents that inspect it continue to work.</p>"},{"location":"runner/#session-management","title":"\ud83d\udcbe Session Management","text":""},{"location":"runner/#in-memory-session-default","title":"In-memory Session (Default)","text":"<pre><code>import \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n\nsessionService := inmemory.NewSessionService()\nr := runner.NewRunner(\"app\", agent,\n    runner.WithSessionService(sessionService))\n</code></pre>"},{"location":"runner/#redis-session-distributed","title":"Redis Session (Distributed)","text":"<pre><code>import \"trpc.group/trpc-go/trpc-agent-go/session/redis\"\n\n// Create Redis session service.\nsessionService, err := redis.NewService(\n    redis.WithRedisClientURL(\"redis://localhost:6379\"))\n\nr := runner.NewRunner(\"app\", agent,\n    runner.WithSessionService(sessionService))\n</code></pre>"},{"location":"runner/#session-configuration","title":"Session Configuration","text":"<pre><code>// Configuration options supported by Redis.\nsessionService, err := redis.NewService(\n    redis.WithRedisClientURL(\"redis://localhost:6379\"),\n    redis.WithSessionEventLimit(1000),         // Limit number of session events.\n    // redis.WithRedisInstance(\"redis-instance\"), // Or use an instance name.\n)\n</code></pre>"},{"location":"runner/#agent-configuration","title":"\ud83e\udd16 Agent Configuration","text":"<p>Runner's core responsibility is to manage the Agent execution flow. A created Agent needs to be executed via Runner.</p>"},{"location":"runner/#basic-agent-creation","title":"Basic Agent Creation","text":"<pre><code>// Create a basic Agent (see agent.md for detailed configuration).\nagent := llmagent.New(\"assistant\",\n    llmagent.WithModel(model),\n    llmagent.WithInstruction(\"You are a helpful AI assistant.\"))\n\n// Execute Agent with Runner.\nr := runner.NewRunner(\"my-app\", agent)\n</code></pre>"},{"location":"runner/#generation-configuration","title":"Generation Configuration","text":"<p>Runner passes generation configuration to the Agent:</p> <pre><code>// Helper functions.\nfunc intPtr(i int) *int           { return &amp;i }\nfunc floatPtr(f float64) *float64 { return &amp;f }\n\ngenConfig := model.GenerationConfig{\n    MaxTokens:   intPtr(2000),\n    Temperature: floatPtr(0.7),\n    Stream:      true,  // Enable streaming output.\n}\n\nagent := llmagent.New(\"assistant\",\n    llmagent.WithModel(model),\n    llmagent.WithGenerationConfig(genConfig))\n</code></pre>"},{"location":"runner/#tool-integration","title":"Tool Integration","text":"<p>Tool configuration is done inside the Agent, while Runner is responsible for running the Agent with tools:</p> <pre><code>// Create tools (see tool.md for detailed configuration).\ntools := []tool.Tool{\n    function.NewFunctionTool(myFunction, function.WithName(\"my_tool\")),\n    // More tools...\n}\n\n// Add tools to the Agent.\nagent := llmagent.New(\"assistant\",\n    llmagent.WithModel(model),\n    llmagent.WithTools(tools))\n\n// Runner runs the Agent configured with tools.\nr := runner.NewRunner(\"my-app\", agent)\n</code></pre> <p>Tool invocation flow: Runner itself does not directly handle tool invocation. The flow is as follows:</p> <ol> <li>Pass tools: Runner passes context to the Agent via Invocation.</li> <li>Agent processing: Agent.Run handles the tool invocation logic.</li> <li>Event forwarding: Runner receives the event stream returned by the Agent and forwards it.</li> <li>Session recording: Append non-partial response events to the session.</li> </ol>"},{"location":"runner/#multi-agent-support","title":"Multi-Agent Support","text":"<p>Runner can execute complex multi-Agent structures (see multiagent.md for details):</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/agent/chainagent\"\n\n// Create a multi-Agent pipeline.\nmultiAgent := chainagent.New(\"pipeline\",\n    chainagent.WithSubAgents([]agent.Agent{agent1, agent2}))\n\n// Execute with the same Runner.\nr := runner.NewRunner(\"multi-app\", multiAgent)\n</code></pre>"},{"location":"runner/#event-processing","title":"\ud83d\udcca Event Processing","text":""},{"location":"runner/#event-types","title":"Event Types","text":"<pre><code>import \"trpc.group/trpc-go/trpc-agent-go/event\"\n\nfor event := range eventChan {\n    // Error event.\n    if event.Error != nil {\n        fmt.Printf(\"Error: %s\\n\", event.Error.Message)\n        continue\n    }\n\n    // Streaming content.\n    if len(event.Choices) &gt; 0 {\n        choice := event.Choices[0]\n        fmt.Print(choice.Delta.Content)\n    }\n\n    // Tool invocation.\n    if len(event.Choices) &gt; 0 &amp;&amp; len(event.Choices[0].Message.ToolCalls) &gt; 0 {\n        for _, toolCall := range event.Choices[0].Message.ToolCalls {\n            fmt.Printf(\"Call tool: %s\\n\", toolCall.Function.Name)\n        }\n    }\n\n    // Completion event.\n    if event.Done {\n        break\n    }\n}\n</code></pre>"},{"location":"runner/#complete-event-handling-example","title":"Complete Event Handling Example","text":"<pre><code>import (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc processEvents(eventChan &lt;-chan *event.Event) error {\n    var fullResponse strings.Builder\n\n    for event := range eventChan {\n        // Handle errors.\n        if event.Error != nil {\n            return fmt.Errorf(\"Event error: %w\", event.Error)\n        }\n\n        // Handle tool calls.\n        if len(event.Choices) &gt; 0 &amp;&amp; len(event.Choices[0].Message.ToolCalls) &gt; 0 {\n            fmt.Println(\"\ud83d\udd27 Tool Call:\")\n            for _, toolCall := range event.Choices[0].Message.ToolCalls {\n                fmt.Printf(\"  \u2022 %s (ID: %s)\\n\",\n                    toolCall.Function.Name, toolCall.ID)\n                fmt.Printf(\"    Params: %s\\n\",\n                    string(toolCall.Function.Arguments))\n            }\n        }\n\n        // Handle tool responses.\n        if event.Response != nil {\n            for _, choice := range event.Response.Choices {\n                if choice.Message.Role == model.RoleTool {\n                    fmt.Printf(\"\u2705 Tool Response (ID: %s): %s\\n\",\n                        choice.Message.ToolID, choice.Message.Content)\n                }\n            }\n        }\n\n        // Handle streaming content.\n        if len(event.Choices) &gt; 0 {\n            content := event.Choices[0].Delta.Content\n            if content != \"\" {\n                fmt.Print(content)\n                fullResponse.WriteString(content)\n            }\n        }\n\n        if event.Done {\n            fmt.Println() // New line.\n            break\n        }\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"runner/#execution-context-management","title":"\ud83d\udd2e Execution Context Management","text":"<p>Runner creates and manages the Invocation structure:</p> <pre><code>// The Invocation created by Runner contains the following fields.\ninvocation := agent.NewInvocation(\n    agent.WithInvocationAgent(r.agent),                               // Agent instance.\n    agent.WithInvocationSession(&amp;session.Session{ID: \"session-001\"}), // Session object.\n    agent.WithInvocationEndInvocation(false),                         // End flag.\n    agent.WithInvocationMessage(model.NewUserMessage(\"User input\")),  // User message.\n    agent.WithInvocationRunOptions(ro),                               // Run options.\n)\n// Note: Invocation also includes other fields such as AgentName, Branch, Model,\n// TransferInfo, AgentCallbacks, ModelCallbacks, ToolCallbacks, etc.,\n// but these fields are used and managed internally by the Agent.\n</code></pre>"},{"location":"runner/#best-practices","title":"\u2705 Best Practices","text":""},{"location":"runner/#error-handling","title":"Error Handling","text":"<pre><code>// Handle errors from Runner.Run.\neventChan, err := r.Run(ctx, userID, sessionID, message)\nif err != nil {\n    log.Printf(\"Runner execution failed: %v\", err)\n    return err\n}\n\n// Handle errors in the event stream.\nfor event := range eventChan {\n    if event.Error != nil {\n        log.Printf(\"Event error: %s\", event.Error.Message)\n        continue\n    }\n    // Handle normal events.\n}\n</code></pre>"},{"location":"runner/#resource-management","title":"Resource Management","text":"<pre><code>// Use context to control lifecycle.\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\n// Ensure all events are consumed.\neventChan, err := r.Run(ctx, userID, sessionID, message)\nif err != nil {\n    return err\n}\n\nfor event := range eventChan {\n    // Process events.\n    if event.Done {\n        break\n    }\n}\n</code></pre>"},{"location":"runner/#health-check","title":"Health Check","text":"<pre><code>import (\n    \"context\"\n    \"fmt\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n)\n\n// Check whether Runner works properly.\nfunc checkRunner(r runner.Runner, ctx context.Context) error {\n    testMessage := model.NewUserMessage(\"test\")\n    eventChan, err := r.Run(ctx, \"test-user\", \"test-session\", testMessage)\n    if err != nil {\n        return fmt.Errorf(\"Runner.Run failed: %v\", err)\n    }\n\n    // Check the event stream.\n    for event := range eventChan {\n        if event.Error != nil {\n            return fmt.Errorf(\"Received error event: %s\", event.Error.Message)\n        }\n        if event.Done {\n            break\n        }\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"runner/#summary","title":"\ud83d\udcdd Summary","text":"<p>The Runner component is a core part of the tRPC-Agent-Go framework, providing complete conversation management and Agent orchestration capabilities. By properly using session management, tool integration, and event handling, you can build powerful intelligent conversational applications.</p>"},{"location":"session/","title":"Session Management","text":""},{"location":"session/#overview","title":"Overview","text":"<p>tRPC-Agent-Go provides powerful session (Session) management capabilities to maintain conversation history and context information during interactions between Agents and users. The session management module supports multiple storage backends, including in-memory storage and Redis storage, providing flexible state persistence for Agent applications.</p>"},{"location":"session/#key-features","title":"\ud83c\udfaf Key Features","text":"<ul> <li>Session persistence: Save complete conversation history and context.</li> <li>Multiple storage backends: Support in-memory storage and Redis storage.</li> <li>Event tracking: Fully record all interaction events within a session.</li> <li>Multi-level storage: Support application-level, user-level, and session-level data storage.</li> <li>Concurrency safety: Built-in read-write locks ensure safe concurrent access.</li> <li>Automatic management: After specifying the Session Service in Runner, sessions are automatically created, loaded, and updated.</li> </ul>"},{"location":"session/#core-concepts","title":"Core Concepts","text":""},{"location":"session/#session-hierarchy","title":"Session Hierarchy","text":"<pre><code>Application\n\u251c\u2500\u2500 User Sessions\n\u2502   \u251c\u2500\u2500 Session 1\n\u2502   \u2502   \u251c\u2500\u2500 Session Data\n\u2502   \u2502   \u2514\u2500\u2500 Events\n\u2502   \u2514\u2500\u2500 Session 2\n\u2502       \u251c\u2500\u2500 Session Data\n\u2502       \u2514\u2500\u2500 Events\n\u2514\u2500\u2500 App Data\n</code></pre>"},{"location":"session/#data-levels","title":"Data Levels","text":"<ul> <li>App Data: Global shared data, such as system configuration and feature flags.</li> <li>User Data: User-level data shared across all sessions of the same user, such as user preferences.</li> <li>Session Data: Session-level data storing the context and state of a single conversation.</li> </ul>"},{"location":"session/#usage-examples","title":"Usage Examples","text":""},{"location":"session/#integrate-session-service","title":"Integrate Session Service","text":"<p>Use <code>runner.WithSessionService</code> to provide complete session management for the Agent runner. If not specified, in-memory session management is used by default. Runner automatically handles session creation, loading, and updates, so users do not need additional operations or care about internal details:</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/redis\"\n)\n\n// Choose session service type.\nvar sessionService session.Service\n\n// Option 1: Use in-memory storage (development/testing).\nsessionService = inmemory.NewSessionService()\n\n// Option 2: Use Redis storage (production).\nsessionService, err = redis.NewService(\n    redis.WithRedisClientURL(\"redis://your-username:yourt-password@127.0.0.1:6379\"),\n)\n\n// Create Runner and configure session service.\nrunner := runner.NewRunner(\n    \"my-agent\",\n    llmAgent,\n    runner.WithSessionService(sessionService), // Key configuration.\n)\n\n// Use Runner for multi-turn conversation.\neventChan, err := runner.Run(ctx, userID, sessionID, userMessage)\n</code></pre> <p>After integrating session management, the Agent gains automatic session capabilities, including:</p> <ol> <li>Automatic session persistence: Each AI interaction is automatically saved to the session.</li> <li>Context continuity: Automatically load historical conversation context to enable true multi-turn conversations.</li> <li>State management: Maintain three levels of state data: application, user, and session.</li> <li>Event stream processing: Automatically record all interaction events such as user input, AI responses, and tool calls.</li> </ol>"},{"location":"session/#basic-session-operations","title":"Basic Session Operations","text":"<p>If you need to manually manage existing sessions (e.g., to query statistics of existing Sessions), you can use the APIs provided by the Session Service.</p>"},{"location":"session/#create-and-manage-sessions","title":"Create and Manage Sessions","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n    \"time\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/session\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n    \"trpc.group/trpc-go/trpc-agent-go/event\"\n)\n\nfunc main() {\n    // Create in-memory session service.\n    sessionService := inmemory.NewSessionService()\n\n    // Create session.\n    key := session.Key{\n        AppName:   \"my-agent\",\n        UserID:    \"user123\",\n        SessionID: \"\", // Empty string will auto-generate a UUID.\n    }\n\n    initialState := session.StateMap{\n        \"language\": []byte(\"en-US\"),\n        \"theme\":    []byte(\"dark\"),\n    }\n\n    createdSession, err := sessionService.CreateSession(\n        context.Background(),\n        key,\n        initialState,\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Printf(\"Created session: %s\\n\", createdSession.ID)\n}\n</code></pre>"},{"location":"session/#getsession","title":"GetSession","text":"<pre><code>// GetSession retrieves a specified session by key.\nfunc (s *SessionService) GetSession(\n    ctx context.Context, \n    key session.Key, \n    options ...session.Option,\n) (*Session, error)\n</code></pre> <ul> <li>Function: Retrieve an existing session based on AppName, UserID, and SessionID.</li> <li>Params:<ul> <li><code>key</code>: Session key, must include complete AppName, UserID, and SessionID.</li> <li><code>options</code>: Optional parameters, such as <code>session.WithEventNum(10)</code> to limit the number of returned events.</li> </ul> </li> <li>Returns:<ul> <li>If the session does not exist, returns <code>nil, nil</code>.</li> <li>If the session exists, returns the complete session object (including merged app, user, and session state).</li> </ul> </li> </ul> <p>Usage:</p> <pre><code>// Retrieve full session.\nsession, err := sessionService.GetSession(ctx, session.Key{\n    AppName:   \"my-agent\",\n    UserID:    \"user123\",\n    SessionID: \"session-id-123\",\n})\n\n// Retrieve session with only the latest 10 events.\nsession, err := sessionService.GetSession(ctx, key, \n    session.WithEventNum(10))\n\n// Retrieve events after a specified time.\nsession, err := sessionService.GetSession(ctx, key,\n    session.WithEventTime(time.Now().Add(-1*time.Hour)))\n</code></pre>"},{"location":"session/#deletesession","title":"DeleteSession","text":"<pre><code>// DeleteSession removes the specified session.\nfunc (s *SessionService) DeleteSession(\n    ctx context.Context, \n    key session.Key, \n    options ...session.Option,\n) error\n</code></pre> <ul> <li>Function: Remove the specified session from storage. If the user has no other sessions, the user record is automatically cleaned up.</li> <li>Characteristics:<ul> <li>Deleting a non-existent session does not produce an error.</li> <li>Automatically cleans up empty user-session mappings.</li> <li>Thread-safe operations.</li> </ul> </li> </ul> <p>Usage:</p> <pre><code>// Delete specified session.\nerr := sessionService.DeleteSession(ctx, session.Key{\n    AppName:   \"my-agent\", \n    UserID:    \"user123\",\n    SessionID: \"session-id-123\",\n})\nif err != nil {\n    log.Printf(\"Failed to delete session: %v\", err)\n}\n</code></pre>"},{"location":"session/#listsessions","title":"ListSessions","text":"<pre><code>// List all sessions of a user.\nsessions, err := sessionService.ListSessions(\n    context.Background(),\n    session.UserKey{\n        AppName: \"my-agent\",\n        UserID:  \"user123\",\n    },\n)\n</code></pre>"},{"location":"session/#state-management","title":"State Management","text":"<pre><code>// Update app state.\nappState := session.StateMap{\n    \"version\": []byte(\"1.0.0\"),\n    \"config\":  []byte(`{\"feature_flags\": {\"new_ui\": true}}`),\n}\nerr := sessionService.UpdateAppState(context.Background(), \"my-agent\", appState)\n\n// Update user state.\nuserKey := session.UserKey{\n    AppName: \"my-agent\",\n    UserID:  \"user123\",\n}\nuserState := session.StateMap{\n    \"preferences\": []byte(`{\"notifications\": true}`),\n    \"profile\":     []byte(`{\"name\": \"Alice\"}`),\n}\nerr = sessionService.UpdateUserState(context.Background(), userKey, userState)\n\n// Get session (including merged state).\nretrievedSession, err = sessionService.GetSession(\n    context.Background(),\n    session.Key{\n        AppName:   \"my-agent\",\n        UserID:    \"user123\", \n        SessionID: retrievedSession.ID,\n    },\n)\n</code></pre>"},{"location":"session/#storage-backends","title":"Storage Backends","text":""},{"location":"session/#in-memory-storage","title":"In-memory Storage","text":"<p>Suitable for development environments and small-scale applications:</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n\n// Create in-memory session service.\nsessionService := inmemory.NewSessionService(\n    inmemory.WithSessionEventLimit(200), // Limit to at most 200 events per session.\n)\n</code></pre>"},{"location":"session/#in-memory-configuration-options","title":"In-memory Configuration Options","text":"<ul> <li><code>WithSessionEventLimit(limit int)</code>: Sets the maximum number of events stored per session. Default is 1000. When the limit is exceeded, older events are evicted.</li> <li><code>WithSessionTTL(ttl time.Duration)</code>: Sets the TTL for session state and event list. Default is 0 (no expiration). If set to 0, sessions will not expire automatically.</li> <li><code>WithAppStateTTL(ttl time.Duration)</code>: Sets the TTL for application-level state. Default is 0 (no expiration). If not set, app state will not expire automatically.</li> <li><code>WithUserStateTTL(ttl time.Duration)</code>: Sets the TTL for user-level state. Default is 0 (no expiration). If not set, user state will not expire automatically.</li> <li><code>WithCleanupInterval(interval time.Duration)</code>: Sets the interval for automatic cleanup of expired data. Default is 0 (auto-determined). If set to 0, automatic cleanup will be determined based on TTL configuration. Default cleanup interval is 5 minutes if any TTL is configured.</li> </ul> <p>Example with full configuration:</p> <pre><code>sessionService := inmemory.NewSessionService(\n    inmemory.WithSessionEventLimit(500),\n    inmemory.WithSessionTTL(30*time.Minute),\n    inmemory.WithAppStateTTL(24*time.Hour),\n    inmemory.WithUserStateTTL(7*24*time.Hour),\n    inmemory.WithCleanupInterval(10*time.Minute),\n)\n\n// Configuration effects:\n// - Each session stores up to 500 events, automatically evicting oldest events when exceeded\n// - Session data expires after 30 minutes of inactivity\n// - Application-level state expires after 24 hours\n// - User-level state expires after 7 days\n// - Cleanup operation runs every 10 minutes to remove expired data\n</code></pre> <p>Default configuration example:</p> <pre><code>// Create in-memory session service with default configuration\nsessionService := inmemory.NewSessionService()\n\n// Default configuration effects:\n// - Each session stores up to 1000 events (default value)\n// - All data never expires (TTL is 0)\n// - No automatic cleanup (CleanupInterval is 0)\n// - Suitable for development environments or short-running applications\n</code></pre>"},{"location":"session/#redis-storage","title":"Redis Storage","text":"<p>Suitable for production environments and distributed applications:</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/session/redis\"\n\n// Create using Redis URL.\nsessionService, err := redis.NewService(\n    redis.WithRedisClientURL(\"redis://your-username:yourt-password@127.0.0.1:6379\"),\n    redis.WithSessionEventLimit(500),\n)\n\n// Or use a preconfigured Redis instance.\nsessionService, err := redis.NewService(\n    redis.WithInstanceName(\"my-redis-instance\"),\n)\n</code></pre>"},{"location":"session/#redis-configuration-options","title":"Redis Configuration Options","text":"<ul> <li><code>WithSessionEventLimit(limit int)</code>: Sets the maximum number of events stored per session. Default is 1000. When the limit is exceeded, older events are evicted.</li> <li><code>WithRedisClientURL(url string)</code>: Creates a Redis client from URL. Format: <code>redis://[username:password@]host:port[/database]</code>.</li> <li><code>WithRedisInstance(instanceName string)</code>: Uses a preconfigured Redis instance from storage. Note: <code>WithRedisClientURL</code> has higher priority than <code>WithRedisInstance</code>.</li> <li><code>WithExtraOptions(extraOptions ...interface{})</code>: Sets extra options for the Redis session service. This option is mainly used for customized Redis client builders and will be passed to the builder.</li> <li><code>WithSessionTTL(ttl time.Duration)</code>: Sets the TTL for session state and event list. Default is 0 (no expiration). If set to 0, sessions will not expire.</li> <li><code>WithAppStateTTL(ttl time.Duration)</code>: Sets the TTL for application-level state. Default is 0 (no expiration). If not set, app state will not expire.</li> <li><code>WithUserStateTTL(ttl time.Duration)</code>: Sets the TTL for user-level state. Default is 0 (no expiration). If not set, user state will not expire.</li> </ul> <p>Example with full configuration:</p> <pre><code>sessionService, err := redis.NewService(\n    redis.WithRedisClientURL(\"redis://localhost:6379/0\"),\n    redis.WithSessionEventLimit(1000),\n    redis.WithSessionTTL(30*time.Minute),\n    redis.WithAppStateTTL(24*time.Hour),\n    redis.WithUserStateTTL(7*24*time.Hour),\n)\n\n// Configuration effects:\n// - Connects to local Redis server database 0\n// - Each session stores up to 1000 events, automatically evicting oldest events when exceeded\n// - Session data expires after 30 minutes of inactivity\n// - Application-level state expires after 24 hours\n// - User-level state expires after 7 days\n// - Uses Redis TTL mechanism for automatic cleanup, no manual cleanup needed\n\n**Default configuration example:**\n\n```go\n// Create Redis session service with default configuration (requires pre-configured Redis instance)\nsessionService, err := redis.NewService()\n\n// Default configuration effects:\n// - Each session stores up to 1000 events (default value)\n// - All data never expires (TTL is 0)\n// - Requires pre-registered Redis instance via storage.RegisterRedisInstance\n// - Suitable for scenarios requiring persistence but no automatic expiration\n</code></pre>"},{"location":"session/#configuration-reuse","title":"Configuration Reuse","text":"<p>If multiple components need Redis, you can configure a Redis instance and reuse the configuration across components.</p> <pre><code>    redisURL := fmt.Sprintf(\"redis://%s\", \"127.0.0.1:6379\")\n    storage.RegisterRedisInstance(\"my-redis-instance\", storage.WithClientBuilderURL(redisURL))\n    sessionService, err = redis.NewService(redis.WithRedisInstance(\"my-redis-instance\"))\n</code></pre>"},{"location":"session/#redis-storage-structure","title":"Redis Storage Structure","text":"<pre><code># App data\nappdata:{appName} -&gt; Hash {key: value}\n\n# User data  \nuserdata:{appName}:{userID} -&gt; Hash {key: value}\n\n# Session data\nsession:{appName}:{userID} -&gt; Hash {sessionID: SessionData(JSON)}\n\n# Event records\nevents:{appName}:{userID}:{sessionID} -&gt; SortedSet {score: timestamp, value: Event(JSON)}\n</code></pre>"},{"location":"session/#references","title":"References","text":"<ul> <li>Reference example.</li> </ul> <p>By properly using session management, you can build stateful intelligent Agents that provide continuous and personalized interaction experiences for users.</p>"},{"location":"tool/","title":"Tool Usage Guide","text":"<p>The Tool system is a core component of the tRPC-Agent-Go framework, enabling Agents to interact with external services and functions. The framework supports multiple tool types, including Function Tools and external tools integrated via the MCP (Model Context Protocol) standard.</p>"},{"location":"tool/#overview","title":"Overview","text":""},{"location":"tool/#key-features","title":"\ud83c\udfaf Key Features","text":"<ul> <li>\ud83d\udd27 Multiple Tool Types: Supports Function Tools and MCP standard tools.</li> <li>\ud83c\udf0a Streaming Responses: Supports both real-time streaming responses and normal responses.</li> <li>\u26a1 Parallel Execution: Tool invocations support parallel execution to improve performance.</li> <li>\ud83d\udd04 MCP Protocol: Full support for STDIO, SSE, and Streamable HTTP transports.</li> <li>\ud83d\udee0\ufe0f Configuration Support: Provides configuration options and filter support.</li> </ul>"},{"location":"tool/#core-concepts","title":"Core Concepts","text":""},{"location":"tool/#tool","title":"\ud83d\udd27 Tool","text":"<p>A Tool is an abstraction of a single capability that implements the <code>tool.Tool</code> interface. Each Tool provides specific functionality such as mathematical calculation, search, time query, etc.</p> <pre><code>type Tool interface {\n    Declaration() *Declaration  // Return tool metadata.\n}\n\ntype CallableTool interface {\n    Call(ctx context.Context, jsonArgs []byte) (any, error)\n    Tool\n}\n</code></pre>"},{"location":"tool/#toolset","title":"\ud83d\udce6 ToolSet","text":"<p>A ToolSet is a collection of related tools that implements the <code>tool.ToolSet</code> interface. A ToolSet manages the lifecycle of tools, connections, and resource cleanup.</p> <pre><code>type ToolSet interface {\n    Tools(context.Context) []CallableTool  // Return the list of tools.\n    Close() error                          // Resource cleanup.\n}\n</code></pre> <p>Relationship between Tool and ToolSet:</p> <ul> <li>One Tool = one concrete capability (e.g., calculator).</li> <li>One ToolSet = a group of related Tools (e.g., all tools provided by an MCP server).</li> <li>An Agent can use multiple Tools and multiple ToolSets simultaneously.</li> </ul>"},{"location":"tool/#streaming-tool-support","title":"\ud83c\udf0a Streaming Tool Support","text":"<p>The framework supports streaming tools to provide real-time responses:</p> <pre><code>// Streaming tool interface.\ntype StreamableTool interface {\n    StreamableCall(ctx context.Context, jsonArgs []byte) (*StreamReader, error)\n    Tool\n}\n\n// Streaming data unit.\ntype StreamChunk struct {\n    Content  any      `json:\"content\"`\n    Metadata Metadata `json:\"metadata,omitempty\"`\n}\n</code></pre> <p>Streaming tool characteristics:</p> <ul> <li>\ud83d\ude80 Real-time responses: Data is returned progressively without waiting for the complete result.</li> <li>\ud83d\udcca Large data handling: Suitable for scenarios such as log queries and data analysis.</li> <li>\u26a1 User experience: Provides instant feedback and progress display.</li> </ul>"},{"location":"tool/#tool-types","title":"Tool Types","text":"Tool Type Definition Integration Method Function Tools Tools implemented by directly calling Go functions <code>Tool</code> interface, in-process calls Agent Tool (AgentTool) Wrap any Agent as a callable tool <code>Tool</code> interface, supports streaming inner forwarding DuckDuckGo Tool Search tool based on DuckDuckGo API <code>Tool</code> interface, HTTP API MCP ToolSet External toolset based on MCP protocol <code>ToolSet</code> interface, multiple transports <p>\ud83d\udcd6 Related docs: For Agent Tool and Transfer Tool used in multi-Agent collaboration, see the Multi-Agent System document.</p>"},{"location":"tool/#function-tools","title":"Function Tools","text":"<p>Function Tools implement tool logic directly via Go functions and are the simplest tool type.</p>"},{"location":"tool/#basic-usage","title":"Basic Usage","text":"<pre><code>import \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n\n// 1. Define a tool function.\nfunc calculator(ctx context.Context, req struct {\n    Operation string  `json:\"operation\"`\n    A         float64 `json:\"a\"`\n    B         float64 `json:\"b\"`\n}) (map[string]interface{}, error) {\n    switch req.Operation {\n    case \"add\":\n        return map[string]interface{}{\"result\": req.A + req.B}, nil\n    case \"multiply\":\n        return map[string]interface{}{\"result\": req.A * req.B}, nil\n    default:\n        return nil, fmt.Errorf(\"unsupported operation: %s\", req.Operation)\n    }\n}\n\n// 2. Create the tool.\ncalculatorTool := function.NewFunctionTool(\n    calculator,\n    function.WithName(\"calculator\"),\n    function.WithDescription(\"Perform mathematical operations.\"),\n)\n\n// 3. Integrate into an Agent.\nagent := llmagent.New(\"math-assistant\",\n    llmagent.WithModel(model),\n    llmagent.WithTools([]tool.Tool{calculatorTool}))\n</code></pre>"},{"location":"tool/#streaming-tool-example","title":"Streaming Tool Example","text":"<pre><code>// 1. Define input and output structures.\ntype weatherInput struct {\n    Location string `json:\"location\"`\n}\n\ntype weatherOutput struct {\n    Weather string `json:\"weather\"`\n}\n\n// 2. Implement the streaming tool function.\nfunc getStreamableWeather(input weatherInput) *tool.StreamReader {\n    stream := tool.NewStream(10)\n    go func() {\n        defer stream.Writer.Close()\n\n        // Simulate progressively returning weather data.\n        result := \"Sunny, 25\u00b0C in \" + input.Location\n        for i := 0; i &lt; len(result); i++ {\n            chunk := tool.StreamChunk{\n                Content: weatherOutput{\n                    Weather: result[i : i+1],\n                },\n                Metadata: tool.Metadata{CreatedAt: time.Now()},\n            }\n\n            if closed := stream.Writer.Send(chunk, nil); closed {\n                break\n            }\n            time.Sleep(10 * time.Millisecond) // Simulate latency.\n        }\n    }()\n\n    return stream.Reader\n}\n\n// 3. Create the streaming tool.\nweatherStreamTool := function.NewStreamableFunctionTool[weatherInput, weatherOutput](\n    getStreamableWeather,\n    function.WithName(\"get_weather_stream\"),\n    function.WithDescription(\"Get weather information as a stream.\"),\n)\n\n// 4. Use the streaming tool.\nreader, err := weatherStreamTool.StreamableCall(ctx, jsonArgs)\nif err != nil {\n    return err\n}\n\n// Receive streaming data.\nfor {\n    chunk, err := reader.Recv()\n    if err == io.EOF {\n        break // End of stream.\n    }\n    if err != nil {\n        return err\n    }\n\n    // Process each chunk.\n    fmt.Printf(\"Received: %v\\n\", chunk.Content)\n}\nreader.Close()\n</code></pre>"},{"location":"tool/#built-in-tools","title":"Built-in Tools","text":""},{"location":"tool/#duckduckgo-search-tool","title":"DuckDuckGo Search Tool","text":"<p>The DuckDuckGo tool is based on the DuckDuckGo Instant Answer API and provides factual and encyclopedia-style information search capabilities.</p>"},{"location":"tool/#basic-usage_1","title":"Basic Usage","text":"<pre><code>import \"trpc.group/trpc-go/trpc-agent-go/tool/duckduckgo\"\n\n// Create a DuckDuckGo search tool.\nsearchTool := duckduckgo.NewTool()\n\n// Integrate into an Agent.\nsearchAgent := llmagent.New(\"search-assistant\",\n    llmagent.WithModel(model),\n    llmagent.WithTools([]tool.Tool{searchTool}))\n</code></pre>"},{"location":"tool/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>import (\n    \"net/http\"\n    \"time\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/duckduckgo\"\n)\n\n// Custom configuration.\nsearchTool := duckduckgo.NewTool(\n    duckduckgo.WithBaseURL(\"https://api.duckduckgo.com\"),\n    duckduckgo.WithUserAgent(\"my-app/1.0\"),\n    duckduckgo.WithHTTPClient(&amp;http.Client{\n        Timeout: 15 * time.Second,\n    }),\n)\n</code></pre>"},{"location":"tool/#mcp-tools","title":"MCP Tools","text":"<p>MCP (Model Context Protocol) is an open protocol that standardizes how applications provide context to LLMs. MCP tools are based on JSON-RPC 2.0 and provide standardized integration with external services for Agents.</p> <p>MCP ToolSet Features:</p> <ul> <li>\ud83d\udd17 Unified interface: All MCP tools are created via <code>mcp.NewMCPToolSet()</code>.</li> <li>\ud83d\ude80 Multiple transports: Supports STDIO, SSE, and Streamable HTTP.</li> <li>\ud83d\udd27 Tool filters: Supports including/excluding specific tools.</li> </ul>"},{"location":"tool/#basic-usage_2","title":"Basic Usage","text":"<pre><code>import \"trpc.group/trpc-go/trpc-agent-go/tool/mcp\"\n\n// Create an MCP ToolSet (STDIO example).\nmcpToolSet := mcp.NewMCPToolSet(\n    mcp.ConnectionConfig{\n        Transport: \"stdio\",           // Transport method.\n        Command:   \"go\",              // Command to execute.\n        Args:      []string{\"run\", \"./stdio_server/main.go\"},\n        Timeout:   10 * time.Second,\n    },\n    mcp.WithToolFilter(mcp.NewIncludeFilter(\"echo\", \"add\")), // Optional: tool filter.\n)\n\n// Integrate into an Agent.\nagent := llmagent.New(\"mcp-assistant\",\n    llmagent.WithModel(model),\n    llmagent.WithToolSets([]tool.ToolSet{mcpToolSet}))\n</code></pre>"},{"location":"tool/#transport-configuration","title":"Transport Configuration","text":"<p>MCP ToolSet supports three transports via the <code>Transport</code> field:</p>"},{"location":"tool/#1-stdio-transport","title":"1. STDIO Transport","text":"<p>Communicates with external processes via standard input/output. Suitable for local scripts and CLI tools.</p> <pre><code>mcpToolSet := mcp.NewMCPToolSet(\n    mcp.ConnectionConfig{\n        Transport: \"stdio\",\n        Command:   \"python\",\n        Args:      []string{\"-m\", \"my_mcp_server\"},\n        Timeout:   10 * time.Second,\n    },\n)\n</code></pre>"},{"location":"tool/#2-sse-transport","title":"2. SSE Transport","text":"<p>Uses Server-Sent Events for communication, supporting real-time data push and streaming responses.</p> <pre><code>mcpToolSet := mcp.NewMCPToolSet(\n    mcp.ConnectionConfig{\n        Transport: \"sse\",\n        ServerURL: \"http://localhost:8080/sse\",\n        Timeout:   10 * time.Second,\n        Headers: map[string]string{\n            \"Authorization\": \"Bearer your-token\",\n        },\n    },\n)\n</code></pre>"},{"location":"tool/#3-streamable-http-transport","title":"3. Streamable HTTP Transport","text":"<p>Uses standard HTTP for communication, supporting both regular HTTP and streaming responses.</p> <pre><code>mcpToolSet := mcp.NewMCPToolSet(\n    mcp.ConnectionConfig{\n        Transport: \"streamable_http\",  // Use the full name.\n        ServerURL: \"http://localhost:3000/mcp\",\n        Timeout:   10 * time.Second,\n    },\n)\n</code></pre>"},{"location":"tool/#agent-tool-agenttool","title":"Agent Tool (AgentTool)","text":"<p>AgentTool lets you expose an existing Agent as a tool to be used by a parent Agent. Compared with a plain function tool, AgentTool provides:</p> <ul> <li>\u2705 Reuse: Wrap complex Agent capabilities as a standard tool</li> <li>\ud83c\udf0a Streaming: Optionally forward the child Agent\u2019s streaming events inline to the parent flow</li> <li>\ud83e\udded Control: Options to skip post-tool summarization and to enable/disable inner forwarding</li> </ul>"},{"location":"tool/#basic-usage_3","title":"Basic Usage","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n    agenttool \"trpc.group/trpc-go/trpc-agent-go/tool/agent\"\n)\n\n// 1) Define a reusable child Agent (streaming recommended)\nmathAgent := llmagent.New(\n    \"math-specialist\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithInstruction(\"You are a math specialist...\"),\n    llmagent.WithGenerationConfig(model.GenerationConfig{Stream: true}),\n)\n\n// 2) Wrap as an Agent tool\nmathTool := agenttool.NewTool(\n    mathAgent,\n    agenttool.WithSkipSummarization(true), // default true: no extra outer summarization after tool.response\n    agenttool.WithStreamInner(true),       // forward child Agent streaming events to parent flow\n)\n\n// 3) Use in parent Agent\nparent := llmagent.New(\n    \"assistant\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithGenerationConfig(model.GenerationConfig{Stream: true}),\n    llmagent.WithTools([]tool.Tool{mathTool}),\n)\n</code></pre>"},{"location":"tool/#streaming-inner-forwarding","title":"Streaming Inner Forwarding","text":"<p>When <code>WithStreamInner(true)</code> is enabled, AgentTool forwards child Agent events to the parent flow as they happen:</p> <ul> <li>Forwarded items are actual <code>event.Event</code> instances, carrying incremental text in <code>choice.Delta.Content</code></li> <li>To avoid duplication, the child Agent\u2019s final full message is not forwarded again; it is aggregated into the final <code>tool.response</code> content for the next LLM turn (to satisfy providers requiring tool messages)</li> <li>UI guidance: show forwarded child deltas; avoid printing the aggregated final <code>tool.response</code> content unless debugging</li> </ul> <p>Example: Only show tool fragments when needed to avoid duplicates</p> <pre><code>if ev.Response != nil &amp;&amp; ev.Object == model.ObjectTypeToolResponse {\n    // Tool response contains aggregated content; skip printing by default to avoid duplicates\n}\n\n// Child Agent forwarded deltas (author != parent)\nif ev.Author != parentName &amp;&amp; len(ev.Choices) &gt; 0 {\n    if delta := ev.Choices[0].Delta.Content; delta != \"\" {\n        fmt.Print(delta)\n    }\n}\n</code></pre>"},{"location":"tool/#options","title":"Options","text":"<ul> <li>WithSkipSummarization(bool):<ul> <li>true (default): The outer flow does not run an extra summarization LLM call after <code>tool.response</code></li> <li>false: Allow an additional summarization/answer call after the tool result</li> </ul> </li> </ul> <ul> <li>WithStreamInner(bool):<ul> <li>true: Forward child Agent events to the parent flow (recommended: enable <code>GenerationConfig{Stream: true}</code> for both parent and child Agents)</li> <li>false: Treat as a callable-only tool, without inner event forwarding</li> </ul> </li> </ul>"},{"location":"tool/#notes","title":"Notes","text":"<ul> <li>Completion signaling: Tool response events are marked <code>RequiresCompletion=true</code>; Runner sends completion automatically</li> <li>De-duplication: When inner deltas are forwarded, avoid printing the aggregated final <code>tool.response</code> text again by default</li> <li>Model compatibility: Some providers require a tool message after tool_calls; AgentTool automatically supplies the aggregated content</li> </ul>"},{"location":"tool/#tool-integration-and-usage","title":"Tool Integration and Usage","text":""},{"location":"tool/#create-an-agent-and-integrate-tools","title":"Create an Agent and Integrate Tools","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/duckduckgo\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/mcp\"\n)\n\n// Create function tools.\ncalculatorTool := function.NewFunctionTool(calculator,\n    function.WithName(\"calculator\"),\n    function.WithDescription(\"Perform basic mathematical operations.\"))\n\ntimeTool := function.NewFunctionTool(getCurrentTime,\n    function.WithName(\"current_time\"), \n    function.WithDescription(\"Get the current time.\"))\n\n// Create a built-in tool.\nsearchTool := duckduckgo.NewTool()\n\n// Create MCP ToolSets (examples for different transports).\nstdioToolSet := mcp.NewMCPToolSet(\n    mcp.ConnectionConfig{\n        Transport: \"stdio\",\n        Command:   \"python\",\n        Args:      []string{\"-m\", \"my_mcp_server\"},\n        Timeout:   10 * time.Second,\n    },\n)\n\nsseToolSet := mcp.NewMCPToolSet(\n    mcp.ConnectionConfig{\n        Transport: \"sse\",\n        ServerURL: \"http://localhost:8080/sse\",\n        Timeout:   10 * time.Second,\n    },\n)\n\nstreamableToolSet := mcp.NewMCPToolSet(\n    mcp.ConnectionConfig{\n        Transport: \"streamable_http\",\n        ServerURL: \"http://localhost:3000/mcp\",\n        Timeout:   10 * time.Second,\n    },\n)\n\n// Create an Agent and integrate all tools.\nagent := llmagent.New(\"ai-assistant\",\n    llmagent.WithModel(model),\n    llmagent.WithInstruction(\"You are a helpful AI assistant that can use various tools to help users.\"),\n    // Add single tools (Tool interface).\n    llmagent.WithTools([]tool.Tool{\n        calculatorTool, timeTool, searchTool,\n    }),\n    // Add ToolSets (ToolSet interface).\n    llmagent.WithToolSets([]tool.ToolSet{stdioToolSet, sseToolSet, streamableToolSet}),\n)\n</code></pre>"},{"location":"tool/#tool-filters","title":"Tool Filters","text":"<pre><code>// Include filter: only allow specified tools.\nincludeFilter := mcp.NewIncludeFilter(\"get_weather\", \"get_news\", \"calculator\")\n\n// Exclude filter: exclude specified tools.\nexcludeFilter := mcp.NewExcludeFilter(\"deprecated_tool\", \"slow_tool\")\n\n// Combined filters.\ncombinedToolSet := mcp.NewMCPToolSet(\n    connectionConfig,\n    mcp.WithToolFilter(includeFilter),\n)\n</code></pre>"},{"location":"tool/#parallel-tool-execution","title":"Parallel Tool Execution","text":"<pre><code>// Enable parallel tool execution (optional, for performance optimization).\nagent := llmagent.New(\"ai-assistant\",\n    llmagent.WithModel(model),\n    llmagent.WithTools(tools),\n    llmagent.WithToolSets(toolSets),\n    llmagent.WithEnableParallelTools(true), // Enable parallel execution.\n)\n</code></pre> <p>Parallel execution effect:</p> <pre><code># Parallel execution (enabled).\nTool 1: get_weather     [====] 50ms\nTool 2: get_population  [====] 50ms  \nTool 3: get_time       [====] 50ms\nTotal time: ~50ms (executed simultaneously)\n\n# Serial execution (default).\nTool 1: get_weather     [====] 50ms\nTool 2: get_population       [====] 50ms\nTool 3: get_time                  [====] 50ms  \nTotal time: ~150ms (executed sequentially)\n</code></pre>"},{"location":"tool/#quick-start","title":"Quick Start","text":""},{"location":"tool/#environment-setup","title":"Environment Setup","text":"<pre><code># Set API key.\nexport OPENAI_API_KEY=\"your-api-key\"\n</code></pre>"},{"location":"tool/#simple-example","title":"Simple Example","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\nfunc main() {\n    // 1. Create a simple tool.\n    calculatorTool := function.NewFunctionTool(\n        func(ctx context.Context, req struct {\n            Operation string  `json:\"operation\"`\n            A         float64 `json:\"a\"`\n            B         float64 `json:\"b\"`\n        }) (map[string]interface{}, error) {\n            var result float64\n            switch req.Operation {\n            case \"add\":\n                result = req.A + req.B\n            case \"multiply\":\n                result = req.A * req.B\n            default:\n                return nil, fmt.Errorf(\"unsupported operation\")\n            }\n            return map[string]interface{}{\"result\": result}, nil\n        },\n        function.WithName(\"calculator\"),\n        function.WithDescription(\"Simple calculator.\"),\n    )\n\n    // 2. Create model and Agent.\n    llmModel := openai.New(\"DeepSeek-V3-Online-64K\")\n    agent := llmagent.New(\"calculator-assistant\",\n        llmagent.WithModel(llmModel),\n        llmagent.WithInstruction(\"You are a math assistant.\"),\n        llmagent.WithTools([]tool.Tool{calculatorTool}),\n        llmagent.WithGenerationConfig(model.GenerationConfig{Stream: true}), // Enable streaming output.\n    )\n\n    // 3. Create Runner and execute.\n    r := runner.NewRunner(\"math-app\", agent)\n\n    ctx := context.Background()\n    userMessage := model.NewUserMessage(\"Please calculate 25 times 4.\")\n\n    eventChan, err := r.Run(ctx, \"user1\", \"session1\", userMessage)\n    if err != nil {\n        panic(err)\n    }\n\n    // 4. Handle responses.\n    for event := range eventChan {\n        if event.Error != nil {\n            fmt.Printf(\"Error: %s\\n\", event.Error.Message)\n            continue\n        }\n\n        // Display tool calls.\n        if len(event.Choices) &gt; 0 &amp;&amp; len(event.Choices[0].Message.ToolCalls) &gt; 0 {\n            for _, toolCall := range event.Choices[0].Message.ToolCalls {\n                fmt.Printf(\"\ud83d\udd27 Call tool: %s\\n\", toolCall.Function.Name)\n                fmt.Printf(\"   Params: %s\\n\", string(toolCall.Function.Arguments))\n            }\n        }\n\n        // Display streaming content.\n        if len(event.Choices) &gt; 0 {\n            fmt.Print(event.Choices[0].Delta.Content)\n        }\n\n        if event.Done {\n            break\n        }\n    }\n}\n</code></pre>"},{"location":"tool/#run-the-examples","title":"Run the Examples","text":"<pre><code># Enter the tool example directory.\ncd examples/tool\ngo run .\n\n# Enter the MCP tool example directory.  \ncd examples/mcp_tool\n\n# Start the external server.\ncd streamalbe_server &amp;&amp; go run main.go &amp;\n\n# Run the main program.\ngo run main.go -model=\"deepseek-chat\"\n</code></pre>"},{"location":"tool/#summary","title":"Summary","text":"<p>The Tool system provides rich extensibility for tRPC-Agent-Go, supporting Function Tools, the DuckDuckGo Search Tool, and MCP protocol tools.</p>"},{"location":"zh/","title":"tRPC-Agent-Go\uff1a\u8ba9 Go \u5f00\u53d1\u8005\u8f7b\u677e\u6784\u5efa\u667a\u80fd AI \u5e94\u7528","text":""},{"location":"zh/#1","title":"1\u3001\u9879\u76ee\u7b80\u4ecb","text":"<p>tRPC \u56e2\u961f\u4e4b\u524d\u5f00\u6e90\u4e86 A2A \u5f00\u53d1\u6846\u67b6 tRPC-A2A-Go \u548c MCP \u5f00\u53d1\u6846\u67b6 tRPC-MCP-Go\uff0c\u5c24\u5176\u662f tRPC-A2A-Go\uff0c\u5728\u56fd\u5185\u5916\u90fd\u6709\u4e0d\u5c11\u7528\u6237\u8fdb\u884c\u5e94\u7528\u548c\u8d21\u732e\u3002 \u73b0\u5728\u6211\u4eec\u63a8\u51fa tRPC-Agent-Go \u5f00\u53d1\u6846\u67b6\uff0c\u5b9e\u73b0 Go \u8bed\u8a00 AI \u751f\u6001\u5f00\u53d1\u6846\u67b6\u7684\u95ed\u73af\u3002</p> <p>\u5f53\u524d\u4e3b\u6d41 Agent \u6846\u67b6\uff08AutoGen\u3001CrewAI \u3001Agno\u3001ADK \u7b49\uff09\u5927\u90e8\u5206\u90fd\u662f\u57fa\u4e8e Python\uff0c\u800c  Go \u5728\u5fae\u670d\u52a1\u3001\u5e76\u53d1\u4e0e\u90e8\u7f72\u65b9\u9762\u6709\u5929\u7136\u4f18\u52bf\uff0cGo \u5728\u817e\u8baf\u5185\u90e8\u4e5f\u6709\u5927\u89c4\u6a21\u5e94\u7528\uff0c\u4e1a\u754c\u57fa\u4e8e Go \u8bed\u8a00\u7684 Agent \u6846\u67b6\u8f83\u5c11\uff0c\u5927\u90e8\u5206\u90fd\u662f\u7f16\u6392\u5f0f\u7684 workflow \u6846\u67b6\uff0c\u7f3a\u5c11\u771f\u6b63\u7684\u201c\u53bb\u4e2d\u5fc3\u5316\u3001\u53ef\u534f\u4f5c\u3001\u80fd\u6d8c\u73b0\u201d\u7684\u81ea\u4e3b\u591a Agent \u80fd\u529b\u3002tRPC-Agent-Go \u76f4\u63a5\u5229\u7528 Go \u7684\u9ad8\u5e76\u53d1\u4e0e tRPC \u751f\u6001\uff0c\u628a LLM \u7684\u63a8\u7406\u3001\u534f\u5546\u548c\u81ea\u9002\u5e94\u6027\u5e26\u5230 Go \u573a\u666f\uff0c\u6ee1\u8db3\u590d\u6742\u4e1a\u52a1\u5bf9\u201c\u667a\u80fd+\u6027\u80fd\u201d\u7684\u53cc\u91cd\u9700\u6c42\u3002</p>"},{"location":"zh/#2","title":"2\u3001\u67b6\u6784\u8bbe\u8ba1","text":"<p>tRPC-Agent-Go \u91c7\u7528\u6a21\u5757\u5316\u67b6\u6784\u8bbe\u8ba1\uff0c\u7531\u591a\u4e2a\u6838\u5fc3\u7ec4\u4ef6\u7ec4\u6210\uff0c\u7ec4\u4ef6\u90fd\u53ef\u63d2\u62d4\uff0c\u901a\u8fc7\u4e8b\u4ef6\u9a71\u52a8\u673a\u5236\u5b9e\u73b0\u7ec4\u4ef6\u95f4\u7684\u89e3\u8026\u901a\u4fe1\uff0c\u652f\u6301callback\u63d2\u5165\u81ea\u5b9a\u4e49\u903b\u8f91\uff1a</p> <ul> <li>Agent: \u6838\u5fc3\u6267\u884c\u5355\u5143\uff0c\u8d1f\u8d23\u5904\u7406\u7528\u6237\u8f93\u5165\u5e76\u751f\u6210\u54cd\u5e94</li> <li>Runner: Agent \u7684\u6267\u884c\u5668\uff0c\u8d1f\u8d23\u7ba1\u7406\u6267\u884c\u6d41\u7a0b\uff0c\u4e32\u8054 Session/Memory Service \u7b49\u80fd\u529b</li> <li>Model: \u652f\u6301\u591a\u79cd LLM \u6a21\u578b\uff08OpenAI\u3001DeepSeek \u7b49\uff09</li> <li>Tool: \u63d0\u4f9b\u5404\u79cd\u5de5\u5177\u80fd\u529b\uff08Function\u3001MCP\u3001DuckDuckGo \u7b49\uff09</li> <li>Session: \u7ba1\u7406\u7528\u6237\u4f1a\u8bdd\u72b6\u6001\u548c\u4e8b\u4ef6</li> <li>Memory: \u8bb0\u5f55\u7528\u6237\u7684\u957f\u671f\u8bb0\u5fc6\u548c\u4e2a\u6027\u5316\u4fe1\u606f</li> <li>Knowledge: \u5b9e\u73b0 RAG \u77e5\u8bc6\u68c0\u7d22\u80fd\u529b</li> <li>Planner: \u63d0\u4f9b Agent \u7684\u8ba1\u5212\u548c\u63a8\u7406\u80fd\u529b</li> </ul> <p>\u4ee5\u4e0b\u662f\u5404\u4e2a\u7ec4\u4ef6\u7684\u67b6\u6784\u56fe</p> <p></p> <p>\u4e0b\u9762\u5c55\u793a\u4e00\u4e2a\u5b8c\u6574\u7684\u7528\u6237\u548c Agent \u5bf9\u8bdd\u7684\u5b8c\u6574\u65f6\u5e8f\u56fe</p> <p></p>"},{"location":"zh/#3","title":"3\u3001\u6838\u5fc3\u7279\u70b9","text":"<p>\u591a\u6837\u5316 Agent \u7cfb\u7edf</p> <ul> <li>LLMAgent: \u57fa\u4e8e\u5927\u8bed\u8a00\u6a21\u578b\uff0c\u652f\u6301\u5de5\u5177\u8c03\u7528\u548c\u63a8\u7406</li> <li>ChainAgent: \u94fe\u5f0f\u6267\u884c\uff0c\u652f\u6301\u591a\u6b65\u9aa4\u4efb\u52a1\u5206\u89e3</li> <li>ParallelAgent: \u5e76\u884c\u5904\u7406\uff0c\u652f\u6301\u591a\u4e13\u5bb6\u534f\u4f5c</li> <li>CycleAgent: \u5faa\u73af\u8fed\u4ee3\uff0c\u652f\u6301\u81ea\u6211\u4f18\u5316</li> <li>GraphAgent: \u56fe\u5de5\u4f5c\u6d41\uff0c\u517c\u5bb9\u73b0\u6709\u7f16\u6392\u4e60\u60ef</li> </ul> <p>\u4e30\u5bcc\u5de5\u5177\u751f\u6001</p> <ul> <li>\u5185\u7f6e\u5e38\u7528\u5de5\u5177</li> <li>\u652f\u6301 Function\u3001MCP \u534f\u8bae\u7b49\u591a\u79cd\u6269\u5c55\u65b9\u5f0f</li> <li>\u7075\u6d3b\u7684\u5de5\u5177\u7ec4\u5408\u548c\u8c03\u7528\u7b56\u7565</li> </ul> <p>\u667a\u80fd\u4f1a\u8bdd\u7ba1\u7406</p> <ul> <li>\u652f\u6301 Redis \u548c\u5185\u5b58\u5b58\u50a8\u7684\u4f1a\u8bdd\u6301\u4e45\u5316</li> <li>\u957f\u671f\u8bb0\u5fc6\u548c\u4e2a\u6027\u5316\u4fe1\u606f\u4fdd\u6301</li> <li>RAG \u68c0\u7d22\u589e\u5f3a\u751f\u6210\u80fd\u529b</li> <li>\u5b9e\u65f6\u4e8b\u4ef6\u9a71\u52a8\u67b6\u6784</li> </ul> <p>\u5168\u94fe\u8def\u53ef\u89c2\u6d4b\u6027</p> <ul> <li>OpenTelemetry \u5168\u94fe\u8def\u8ffd\u8e2a\u548c\u6027\u80fd\u76d1\u63a7</li> <li>\u53ef\u89c6\u5316\u8c03\u8bd5\u754c\u9762\u548c\u5b9e\u65f6\u76d1\u63a7</li> <li>\u7ed3\u6784\u5316\u65e5\u5fd7\u548c\u9519\u8bef\u8ffd\u8e2a</li> </ul>"},{"location":"zh/#4","title":"4\u3001\u5feb\u901f\u5f00\u59cb","text":""},{"location":"zh/#_1","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\nfunc main() {\n    // \u521b\u5efa\u6a21\u578b\n    modelInstance := openai.New(\"deepseek-chat\")\n\n    // \u521b\u5efa\u5de5\u5177\n    calculatorTool := function.NewFunctionTool(\n        calculator,\n        function.WithName(\"calculator\"),\n        function.WithDescription(\"\u6267\u884c\u52a0\u51cf\u4e58\u9664\u3002\u53c2\u6570\uff1aa\u3001b \u4e3a\u6570\u503c\uff0cop \u53d6\u503c add/sub/mul/div\uff1b\u8fd4\u56de result \u4e3a\u8ba1\u7b97\u7ed3\u679c\u3002\"),\n    )\n\n    // \u542f\u7528\u6d41\u5f0f\u8f93\u51fa\n    genConfig := model.GenerationConfig{\n        Stream: true,\n    }\n\n    // \u521b\u5efa Agent\n    agent := llmagent.New(\"assistant\",\n        llmagent.WithModel(modelInstance),\n        llmagent.WithTools([]tool.Tool{calculatorTool}),\n        llmagent.WithGenerationConfig(genConfig),\n    )\n\n    // \u521b\u5efa Runner\n    runner := runner.NewRunner(\"calculator-app\", agent)\n\n    // \u6267\u884c\u5bf9\u8bdd\n    ctx := context.Background()\n    events, err := runner.Run(ctx,\n        \"user-001\",\n        \"session-001\",\n        model.NewUserMessage(\"\u8ba1\u7b97 2+3 \u7b49\u4e8e\u591a\u5c11\"),\n    )\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // \u5904\u7406\u4e8b\u4ef6\u6d41\n    for event := range events {\n        if event.Object == \"chat.completion.chunk\" {\n            fmt.Print(event.Choices[0].Delta.Content)\n        }\n    }\n    fmt.Println()\n}\n\nfunc calculator(ctx context.Context, req calculatorReq) (calculatorRsp, error) {\n    var result float64\n    switch req.Op {\n    case \"add\", \"+\":\n        result = req.A + req.B\n    case \"sub\", \"-\":\n        result = req.A - req.B\n    case \"mul\", \"*\":\n        result = req.A * req.B\n    case \"div\", \"/\":\n        result = req.A / req.B\n    }\n    return calculatorRsp{Result: result}, nil\n}\n\ntype calculatorReq struct {\n    A  float64 `json:\"a\"`\n    B  float64 `json:\"b\"`\n    Op string  `json:\"op\"`\n}\n\ntype calculatorRsp struct {\n    Result float64 `json:\"result\"`\n}\n</code></pre>"},{"location":"zh/#agent","title":"\u591a Agent \u534f\u52a9\u4f8b\u5b50","text":"<pre><code>// \u521b\u5efa\u94fe\u5f0f Agent\nchainAgent := chainagent.New(\"problem-solver\",\n    chainagent.WithSubAgents([]agent.Agent{\n        analysisAgent,   // \u5206\u6790 Agent\n        executionAgent,  // \u6267\u884c Agent\n    }))\n\n// \u4f7f\u7528 Runner \u6267\u884c\nrunner := runner.NewRunner(\"multi-agent-app\", chainAgent)\nevents, _ := runner.Run(ctx, userID, sessionID, message)\n</code></pre>"},{"location":"zh/#5","title":"5\u3001\u81f4\u8c22","text":"<p>\u611f\u8c22\u817e\u8baf\u5185\u90e8\u4e1a\u52a1\u5982\u817e\u8baf\u5143\u5b9d\uff0c\u817e\u8baf\u89c6\u9891\uff0c\u817e\u8baf\u65b0\u95fb\uff0cIMA\u3001QQ \u97f3\u4e50\u7b49\u7b49\u4e1a\u52a1\u7684\u652f\u6301\uff0c\u4e1a\u52a1\u7684\u573a\u666f\u6253\u78e8\u662f\u5bf9\u6846\u67b6\u6700\u597d\u7684\u9a8c\u8bc1\u3002</p> <p>\u611f\u8c22 ADK\uff0cAgno\uff0cCrewAI\uff0cAutoGen \u7b49\u4f18\u79c0\u5f00\u6e90\u6846\u67b6\u7684\u542f\u53d1\uff0c\u4e3a tRPC-Agent-Go \u5f00\u53d1\u63d0\u4f9b\u7075\u611f\u3002</p>"},{"location":"zh/#6","title":"6\u3001\u9879\u76ee\u5730\u5740","text":"<p>github\uff1atRPC-Agent-Go</p>"},{"location":"zh/a2a/","title":"tRPC-Agent-Go A2A \u96c6\u6210\u6307\u5357","text":""},{"location":"zh/a2a/#_1","title":"\u6982\u8ff0","text":"<p>tRPC-Agent-Go \u63d0\u4f9b\u4e86\u5b8c\u6574\u7684 A2A (Agent-to-Agent) \u89e3\u51b3\u65b9\u6848\uff0c\u5305\u542b\u4e24\u4e2a\u6838\u5fc3\u7ec4\u4ef6\uff1a</p> <ul> <li>A2A Server: \u5c06\u672c\u5730 Agent \u66b4\u9732\u4e3a A2A \u670d\u52a1\uff0c\u4f9b\u5176\u4ed6 Agent \u8c03\u7528</li> <li>A2A Agent: \u8c03\u7528\u8fdc\u7a0b A2A \u670d\u52a1\u7684\u5ba2\u6237\u7aef\u4ee3\u7406\uff0c\u50cf\u4f7f\u7528\u672c\u5730 Agent \u4e00\u6837\u4f7f\u7528\u8fdc\u7a0b Agent</li> </ul>"},{"location":"zh/a2a/#_2","title":"\u6838\u5fc3\u80fd\u529b","text":"<ul> <li>\u96f6\u534f\u8bae\u611f\u77e5: \u5f00\u53d1\u8005\u53ea\u9700\u5173\u6ce8 Agent \u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u65e0\u9700\u4e86\u89e3 A2A \u534f\u8bae\u7ec6\u8282</li> <li>\u81ea\u52a8\u9002\u914d: \u6846\u67b6\u81ea\u52a8\u5c06 Agent \u4fe1\u606f\u8f6c\u6362\u4e3a A2A AgentCard</li> <li>\u6d88\u606f\u8f6c\u6362: \u81ea\u52a8\u5904\u7406 A2A \u534f\u8bae\u6d88\u606f\u4e0e Agent \u6d88\u606f\u683c\u5f0f\u7684\u8f6c\u6362</li> </ul>"},{"location":"zh/a2a/#a2a-server-agent","title":"A2A Server\uff1a\u66b4\u9732 Agent \u4e3a\u670d\u52a1","text":""},{"location":"zh/a2a/#_3","title":"\u6982\u5ff5\u4ecb\u7ecd","text":"<p>A2A Server \u662f tRPC-Agent-Go \u63d0\u4f9b\u7684\u670d\u52a1\u7aef\u7ec4\u4ef6\uff0c\u7528\u4e8e\u5c06\u4efb\u4f55\u672c\u5730 Agent \u5feb\u901f\u8f6c\u6362\u4e3a\u7b26\u5408 A2A \u534f\u8bae\u7684\u7f51\u7edc\u670d\u52a1\u3002</p>"},{"location":"zh/a2a/#_4","title":"\u6838\u5fc3\u7279\u6027","text":"<ul> <li>\u4e00\u952e\u8f6c\u6362: \u901a\u8fc7\u7b80\u5355\u914d\u7f6e\u5c06 Agent \u66b4\u9732\u4e3a A2A \u670d\u52a1</li> <li>\u81ea\u52a8\u534f\u8bae\u9002\u914d: \u81ea\u52a8\u5904\u7406 A2A \u534f\u8bae\u4e0e Agent \u63a5\u53e3\u7684\u8f6c\u6362</li> <li>AgentCard \u751f\u6210: \u81ea\u52a8\u751f\u6210\u670d\u52a1\u53d1\u73b0\u6240\u9700\u7684 AgentCard</li> <li>\u6d41\u5f0f\u652f\u6301: \u652f\u6301\u6d41\u5f0f\u548c\u975e\u6d41\u5f0f\u4e24\u79cd\u54cd\u5e94\u6a21\u5f0f</li> </ul>"},{"location":"zh/a2a/#agent-a2a","title":"Agent \u5230 A2A \u7684\u81ea\u52a8\u8f6c\u6362","text":"<p>tRPC-Agent-Go \u901a\u8fc7 <code>server/a2a</code> \u5305\u5b9e\u73b0\u4e86\u4ece Agent \u5230 A2A \u670d\u52a1\u7684\u65e0\u7f1d\u8f6c\u6362\uff1a</p> <pre><code>func New(opts ...Option) (*a2a.A2AServer, error) {}\n</code></pre>"},{"location":"zh/a2a/#agentcard","title":"AgentCard \u81ea\u52a8\u751f\u6210","text":"<p>\u6846\u67b6\u4f1a\u81ea\u52a8\u63d0\u53d6 Agent \u7684\u5143\u6570\u636e\uff08\u540d\u79f0\u3001\u63cf\u8ff0\u3001\u5de5\u5177\u7b49\uff09\uff0c\u751f\u6210\u7b26\u5408 A2A \u534f\u8bae\u7684 AgentCard\uff0c\u5305\u62ec\uff1a - Agent \u57fa\u672c\u4fe1\u606f\uff08\u540d\u79f0\u3001\u63cf\u8ff0\u3001URL\uff09 - \u80fd\u529b\u58f0\u660e\uff08\u662f\u5426\u652f\u6301\u6d41\u5f0f\uff09 - \u6280\u80fd\u5217\u8868\uff08\u57fa\u4e8e Agent \u7684\u5de5\u5177\u81ea\u52a8\u751f\u6210\uff09</p>"},{"location":"zh/a2a/#_5","title":"\u6d88\u606f\u534f\u8bae\u8f6c\u6362","text":"<p>\u6846\u67b6\u5185\u7f6e <code>messageProcessor</code> \u5b9e\u73b0 A2A \u534f\u8bae\u6d88\u606f\u4e0e Agent \u6d88\u606f\u683c\u5f0f\u7684\u53cc\u5411\u8f6c\u6362\uff0c\u7528\u6237\u65e0\u9700\u5173\u5fc3\u6d88\u606f\u683c\u5f0f\u8f6c\u6362\u7684\u7ec6\u8282\u3002</p>"},{"location":"zh/a2a/#a2a-server","title":"A2A Server \u5feb\u901f\u5f00\u59cb","text":""},{"location":"zh/a2a/#a2a-server-agent_1","title":"\u4f7f\u7528 A2A Server \u66b4\u9732 Agent \u670d\u52a1","text":"<p>\u53ea\u9700\u51e0\u884c\u4ee3\u7801\uff0c\u5c31\u53ef\u4ee5\u5c06\u4efb\u610f Agent \u8f6c\u6362\u4e3a A2A \u670d\u52a1\uff1a</p>"},{"location":"zh/a2a/#a2a-server_1","title":"\u57fa\u7840\u793a\u4f8b\uff1a\u521b\u5efa A2A Server","text":"<pre><code>package main\n\nimport (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    a2aserver \"trpc.group/trpc-go/trpc-agent-go/server/a2a\"\n)\n\nfunc main() {\n    // 1. \u521b\u5efa\u4e00\u4e2a\u666e\u901a\u7684 Agent\n    model := openai.New(\"gpt-4o-mini\")\n    agent := llmagent.New(\"MyAgent\",\n        llmagent.WithModel(model),\n        llmagent.WithDescription(\"\u4e00\u4e2a\u667a\u80fd\u52a9\u624b\"),\n    )\n\n    // 2. \u4e00\u952e\u8f6c\u6362\u4e3a A2A \u670d\u52a1\n    server, _ := a2aserver.New(\n        a2aserver.WithHost(\"localhost:8080\"),\n        a2aserver.WithAgent(agent), // \u4f20\u5165\u4efb\u610f Agent\n    )\n\n    // 3. \u542f\u52a8\u670d\u52a1\uff0c\u5373\u53ef\u63a5\u53d7 A2A \u8bf7\u6c42\n    server.Start(\":8080\")\n}\n</code></pre>"},{"location":"zh/a2a/#a2a","title":"\u76f4\u63a5\u4f7f\u7528 A2A \u534f\u8bae\u5ba2\u6237\u7aef\u8c03\u7528","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-a2a-go/client\"\n    \"trpc.group/trpc-go/trpc-a2a-go/protocol\"\n)\n\nfunc main() {\n    // \u8fde\u63a5\u5230 A2A \u670d\u52a1\n    client, _ := client.NewA2AClient(\"http://localhost:8080/\")\n\n    // \u53d1\u9001\u6d88\u606f\u7ed9 Agent\n    message := protocol.NewMessage(\n        protocol.MessageRoleUser,\n        []protocol.Part{protocol.NewTextPart(\"\u4f60\u597d\uff0c\u8bf7\u5e2e\u6211\u5206\u6790\u8fd9\u6bb5\u4ee3\u7801\")},\n    )\n\n    // Agent \u4f1a\u81ea\u52a8\u5904\u7406\u5e76\u8fd4\u56de\u7ed3\u679c\n    response, _ := client.SendMessage(context.Background(),\n        protocol.SendMessageParams{Message: message})\n}\n</code></pre>"},{"location":"zh/a2a/#a2aagent-a2a","title":"A2AAgent\uff1a\u8c03\u7528\u8fdc\u7a0b A2A \u670d\u52a1","text":"<p>\u4e0e A2A Server \u76f8\u5bf9\u5e94\uff0ctRPC-Agent-Go \u8fd8\u63d0\u4f9b\u4e86 <code>A2AAgent</code>\uff0c\u7528\u4e8e\u8c03\u7528\u8fdc\u7a0b\u7684 A2A \u670d\u52a1\uff0c\u5b9e\u73b0 Agent \u95f4\u7684\u901a\u4fe1\u3002</p>"},{"location":"zh/a2a/#_6","title":"\u6982\u5ff5\u4ecb\u7ecd","text":"<p><code>A2AAgent</code> \u662f\u4e00\u4e2a\u7279\u6b8a\u7684 Agent \u5b9e\u73b0\uff0c\u5b83\u4e0d\u76f4\u63a5\u5904\u7406\u7528\u6237\u8bf7\u6c42\uff0c\u800c\u662f\u5c06\u8bf7\u6c42\u8f6c\u53d1\u7ed9\u8fdc\u7a0b\u7684 A2A \u670d\u52a1\u3002\u4ece\u4f7f\u7528\u8005\u89d2\u5ea6\u770b\uff0c<code>A2AAgent</code> \u5c31\u50cf\u4e00\u4e2a\u666e\u901a\u7684 Agent\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b83\u662f\u8fdc\u7a0b Agent \u7684\u672c\u5730\u4ee3\u7406\u3002</p> <p>\u7b80\u5355\u7406\u89e3\uff1a - A2A Server: \u6211\u6709\u4e00\u4e2a Agent\uff0c\u60f3\u8ba9\u522b\u4eba\u8c03\u7528 \u2192 \u66b4\u9732\u4e3a A2A \u670d\u52a1 - A2AAgent: \u6211\u60f3\u8c03\u7528\u522b\u4eba\u7684 Agent \u2192 \u901a\u8fc7 A2AAgent \u4ee3\u7406\u8c03\u7528</p>"},{"location":"zh/a2a/#_7","title":"\u6838\u5fc3\u7279\u6027","text":"<ul> <li>\u900f\u660e\u4ee3\u7406: \u50cf\u4f7f\u7528\u672c\u5730 Agent \u4e00\u6837\u4f7f\u7528\u8fdc\u7a0b Agent</li> <li>\u81ea\u52a8\u53d1\u73b0: \u901a\u8fc7 AgentCard \u81ea\u52a8\u53d1\u73b0\u8fdc\u7a0b Agent \u7684\u80fd\u529b</li> <li>\u534f\u8bae\u8f6c\u6362: \u81ea\u52a8\u5904\u7406\u672c\u5730\u6d88\u606f\u683c\u5f0f\u4e0e A2A \u534f\u8bae\u7684\u8f6c\u6362</li> <li>\u6d41\u5f0f\u652f\u6301: \u652f\u6301\u6d41\u5f0f\u548c\u975e\u6d41\u5f0f\u4e24\u79cd\u901a\u4fe1\u6a21\u5f0f</li> <li>\u72b6\u6001\u4f20\u9012: \u652f\u6301\u5c06\u672c\u5730\u72b6\u6001\u4f20\u9012\u7ed9\u8fdc\u7a0b Agent</li> <li>\u9519\u8bef\u5904\u7406: \u5b8c\u5584\u7684\u9519\u8bef\u5904\u7406\u548c\u91cd\u8bd5\u673a\u5236</li> </ul>"},{"location":"zh/a2a/#_8","title":"\u4f7f\u7528\u573a\u666f","text":"<ol> <li>\u5206\u5e03\u5f0f Agent \u7cfb\u7edf: \u5728\u5fae\u670d\u52a1\u67b6\u6784\u4e2d\u8c03\u7528\u5176\u4ed6\u670d\u52a1\u7684 Agent</li> <li>Agent \u7f16\u6392: \u5c06\u591a\u4e2a\u4e13\u4e1a Agent \u7ec4\u5408\u6210\u590d\u6742\u7684\u5de5\u4f5c\u6d41</li> <li>\u8de8\u56e2\u961f\u534f\u4f5c: \u8c03\u7528\u5176\u4ed6\u56e2\u961f\u63d0\u4f9b\u7684 Agent \u670d\u52a1</li> </ol>"},{"location":"zh/a2a/#a2aagent","title":"A2AAgent \u5feb\u901f\u5f00\u59cb","text":""},{"location":"zh/a2a/#_9","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/a2aagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n)\n\nfunc main() {\n    // 1. \u521b\u5efa A2AAgent\uff0c\u6307\u5411\u8fdc\u7a0b A2A \u670d\u52a1\n    a2aAgent, err := a2aagent.New(\n        a2aagent.WithAgentCardURL(\"http://localhost:8888\"),\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    // 2. \u50cf\u4f7f\u7528\u666e\u901a Agent \u4e00\u6837\u4f7f\u7528\n    sessionService := inmemory.NewSessionService()\n    runner := runner.NewRunner(\"test\", a2aAgent, \n        runner.WithSessionService(sessionService))\n\n    // 3. \u53d1\u9001\u6d88\u606f\n    events, err := runner.Run(\n        context.Background(),\n        \"user1\",\n        \"session1\", \n        model.NewUserMessage(\"\u8bf7\u5e2e\u6211\u8bb2\u4e2a\u7b11\u8bdd\"),\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    // 4. \u5904\u7406\u54cd\u5e94\n    for event := range events {\n        if event.Response != nil &amp;&amp; len(event.Response.Choices) &gt; 0 {\n            fmt.Print(event.Response.Choices[0].Message.Content)\n        }\n    }\n}\n</code></pre>"},{"location":"zh/a2a/#_10","title":"\u9ad8\u7ea7\u914d\u7f6e","text":"<pre><code>// \u521b\u5efa\u5e26\u6709\u9ad8\u7ea7\u914d\u7f6e\u7684 A2AAgent\na2aAgent, err := a2aagent.New(\n    // \u6307\u5b9a\u8fdc\u7a0b\u670d\u52a1\u5730\u5740\n    a2aagent.WithAgentCardURL(\"http://remote-agent:8888\"),\n\n    // \u8bbe\u7f6e\u6d41\u5f0f\u7f13\u51b2\u533a\u5927\u5c0f\n    a2aagent.WithStreamingChannelBufSize(2048),\n\n    // \u81ea\u5b9a\u4e49\u534f\u8bae\u8f6c\u6362\n    a2aagent.WithCustomEventConverter(curtomEventConverter),\n\n    a2aagent.WithCustomA2AConverter(cursomA2AConverter)\n\n)\n</code></pre>"},{"location":"zh/a2a/#a2a-server-a2aagent","title":"\u5b8c\u6574\u793a\u4f8b\uff1aA2A Server + A2AAgent \u7efc\u5408\u4f7f\u7528","text":"<p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u793a\u4f8b\uff0c\u5c55\u793a\u4e86\u5982\u4f55\u5728\u540c\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u540c\u65f6\u8fd0\u884c A2A Server\uff08\u66b4\u9732\u672c\u5730 Agent\uff09\u548c A2AAgent\uff08\u8c03\u7528\u8fdc\u7a0b\u670d\u52a1\uff09\uff1a</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/a2aagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/server/a2a\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n)\n\nfunc main() {\n    // 1. \u521b\u5efa\u5e76\u542f\u52a8\u8fdc\u7a0b Agent \u670d\u52a1\n    remoteAgent := createRemoteAgent()\n    startA2AServer(remoteAgent, \"localhost:8888\")\n\n    time.Sleep(1 * time.Second) // \u7b49\u5f85\u670d\u52a1\u542f\u52a8\n\n    // 2. \u521b\u5efa A2AAgent \u8fde\u63a5\u5230\u8fdc\u7a0b\u670d\u52a1\n    a2aAgent, err := a2aagent.New(\n        a2aagent.WithAgentCardURL(\"http://localhost:8888\"),\n        a2aagent.WithTransferStateKey(\"user_context\"),\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    // 3. \u521b\u5efa\u672c\u5730 Agent\n    localAgent := createLocalAgent()\n\n    // 4. \u5bf9\u6bd4\u672c\u5730\u548c\u8fdc\u7a0b Agent \u7684\u54cd\u5e94\n    compareAgents(localAgent, a2aAgent)\n}\n\nfunc createRemoteAgent() agent.Agent {\n    model := openai.New(\"gpt-4o-mini\")\n    return llmagent.New(\"JokeAgent\",\n        llmagent.WithModel(model),\n        llmagent.WithDescription(\"I am a joke-telling agent\"),\n        llmagent.WithInstruction(\"Always respond with a funny joke\"),\n    )\n}\n\nfunc createLocalAgent() agent.Agent {\n    model := openai.New(\"gpt-4o-mini\") \n    return llmagent.New(\"LocalAgent\",\n        llmagent.WithModel(model),\n        llmagent.WithDescription(\"I am a local assistant\"),\n    )\n}\n\nfunc startA2AServer(agent agent.Agent, host string) {\n    server, err := a2a.New(\n        a2a.WithHost(host),\n        a2a.WithAgent(agent, true), // \u542f\u7528\u6d41\u5f0f\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    go func() {\n        server.Start(host)\n    }()\n}\n\nfunc compareAgents(localAgent, remoteAgent agent.Agent) {\n    sessionService := inmemory.NewSessionService()\n\n    localRunner := runner.NewRunner(\"local\", localAgent,\n        runner.WithSessionService(sessionService))\n    remoteRunner := runner.NewRunner(\"remote\", remoteAgent,\n        runner.WithSessionService(sessionService))\n\n    userMessage := \"\u8bf7\u5e2e\u6211\u8bb2\u4e2a\u7b11\u8bdd\"\n\n    // \u8c03\u7528\u672c\u5730 Agent\n    fmt.Println(\"=== Local Agent Response ===\")\n    processAgent(localRunner, userMessage)\n\n    // \u8c03\u7528\u8fdc\u7a0b Agent (\u901a\u8fc7 A2AAgent)\n    fmt.Println(\"\\n=== Remote Agent Response (via A2AAgent) ===\")\n    processAgent(remoteRunner, userMessage)\n}\n\nfunc processAgent(runner runner.Runner, message string) {\n    events, err := runner.Run(\n        context.Background(),\n        \"user1\",\n        \"session1\",\n        model.NewUserMessage(message),\n        agent.WithRuntimeState(map[string]any{\n            \"user_context\": \"test_context\",\n        }),\n    )\n    if err != nil {\n        fmt.Printf(\"Error: %v\\n\", err)\n        return\n    }\n\n    for event := range events {\n        if event.Response != nil &amp;&amp; len(event.Response.Choices) &gt; 0 {\n            content := event.Response.Choices[0].Message.Content\n            if content == \"\" {\n                content = event.Response.Choices[0].Delta.Content\n            }\n            if content != \"\" {\n                fmt.Print(content)\n            }\n        }\n    }\n    fmt.Println()\n}\n</code></pre>"},{"location":"zh/a2a/#agentcard_1","title":"AgentCard \u81ea\u52a8\u53d1\u73b0","text":"<p><code>A2AAgent</code> \u652f\u6301\u901a\u8fc7\u6807\u51c6\u7684 AgentCard \u53d1\u73b0\u673a\u5236\u81ea\u52a8\u83b7\u53d6\u8fdc\u7a0b Agent \u7684\u4fe1\u606f\uff1a</p> <pre><code>// A2AAgent \u4f1a\u81ea\u52a8\u4ece\u4ee5\u4e0b\u8def\u5f84\u83b7\u53d6 AgentCard\n// http://remote-agent:8888/.well-known/agent.json\n\ntype AgentCard struct {\n    Name         string                 `json:\"name\"`\n    Description  string                 `json:\"description\"`\n    URL          string                 `json:\"url\"`\n    Capabilities AgentCardCapabilities  `json:\"capabilities\"`\n}\n\ntype AgentCardCapabilities struct {\n    Streaming *bool `json:\"streaming,omitempty\"`\n}\n</code></pre>"},{"location":"zh/a2a/#_11","title":"\u72b6\u6001\u4f20\u9012","text":"<p><code>A2AAgent</code> \u652f\u6301\u5c06\u672c\u5730\u8fd0\u884c\u65f6\u72b6\u6001\u4f20\u9012\u7ed9\u8fdc\u7a0b Agent\uff1a</p> <pre><code>a2aAgent, _ := a2aagent.New(\n    a2aagent.WithAgentCardURL(\"http://remote-agent:8888\"),\n    // \u6307\u5b9a\u8981\u4f20\u9012\u7684\u72b6\u6001\u952e\n    a2aagent.WithTransferStateKey(\"user_id\", \"session_context\", \"preferences\"),\n)\n\n// \u8fd0\u884c\u65f6\u72b6\u6001\u4f1a\u901a\u8fc7 A2A \u534f\u8bae\u7684 metadata \u5b57\u6bb5\u4f20\u9012\u7ed9\u8fdc\u7a0b Agent\nevents, _ := runner.Run(ctx, userID, sessionID, message,\n    agent.WithRuntimeState(map[string]any{\n        \"user_id\":         \"12345\",\n        \"session_context\": \"shopping_cart\",\n        \"preferences\":     map[string]string{\"language\": \"zh\"},\n    }),\n)\n</code></pre>"},{"location":"zh/a2a/#_12","title":"\u81ea\u5b9a\u4e49\u8f6c\u6362\u5668","text":"<p>\u5bf9\u4e8e\u7279\u6b8a\u9700\u6c42\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6d88\u606f\u548c\u4e8b\u4ef6\u8f6c\u6362\u5668\uff1a</p> <pre><code>// \u81ea\u5b9a\u4e49 A2A \u6d88\u606f\u8f6c\u6362\u5668\ntype CustomA2AConverter struct{}\n\nfunc (c *CustomA2AConverter) ConvertToA2AMessage(\n    isStream bool, \n    agentName string, \n    invocation *agent.Invocation,\n) (*protocol.Message, error) {\n    // \u81ea\u5b9a\u4e49\u6d88\u606f\u8f6c\u6362\u903b\u8f91\n    return &amp;protocol.Message{\n        MessageID: invocation.InvocationID,\n        Role:      protocol.MessageRoleUser,\n        Parts:     []protocol.Part{/* \u81ea\u5b9a\u4e49\u5185\u5bb9 */},\n    }, nil\n}\n\n// \u81ea\u5b9a\u4e49\u4e8b\u4ef6\u8f6c\u6362\u5668  \ntype CustomEventConverter struct{}\n\nfunc (c *CustomEventConverter) ConvertToEvent(\n    result protocol.MessageResult,\n    agentName string,\n    invocation *agent.Invocation,\n) (*event.Event, error) {\n    // \u81ea\u5b9a\u4e49\u4e8b\u4ef6\u8f6c\u6362\u903b\u8f91\n    return event.New(invocation.InvocationID, agentName), nil\n}\n\n// \u4f7f\u7528\u81ea\u5b9a\u4e49\u8f6c\u6362\u5668\na2aAgent, _ := a2aagent.New(\n    a2aagent.WithAgentCardURL(\"http://remote-agent:8888\"),\n    a2aagent.WithA2AMessageConverter(&amp;CustomA2AConverter{}),\n    a2aagent.WithEventConverter(&amp;CustomEventConverter{}),\n)\n</code></pre>"},{"location":"zh/a2a/#a2a-server-vs-a2aagent","title":"\u603b\u7ed3\uff1aA2A Server vs A2AAgent","text":"\u7ec4\u4ef6 \u804c\u8d23 \u4f7f\u7528\u573a\u666f \u6838\u5fc3\u529f\u80fd A2A Server \u670d\u52a1\u63d0\u4f9b\u8005 \u5c06\u672c\u5730 Agent \u66b4\u9732\u7ed9\u5176\u4ed6\u7cfb\u7edf\u8c03\u7528 \u2022 \u534f\u8bae\u8f6c\u6362\u2022 AgentCard \u751f\u6210\u2022 \u6d88\u606f\u8def\u7531\u2022 \u6d41\u5f0f\u652f\u6301 A2AAgent \u670d\u52a1\u6d88\u8d39\u8005 \u8c03\u7528\u8fdc\u7a0b A2A \u670d\u52a1 \u2022 \u900f\u660e\u4ee3\u7406\u2022 \u81ea\u52a8\u53d1\u73b0\u2022 \u72b6\u6001\u4f20\u9012\u2022 \u534f\u8bae\u9002\u914d"},{"location":"zh/a2a/#_13","title":"\u5178\u578b\u67b6\u6784\u6a21\u5f0f","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 A2A protocol  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Client    \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2502 A2A Server    |\n\u2502 (A2AAgent)  \u2502               \u2502 (local Agent) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2191                              \u2191\n      \u2502                              \u2502\n   \u8c03\u7528\u8fdc\u7a0b                       \u66b4\u9732\u672c\u5730\n   Agent\u670d\u52a1                     Agent\u670d\u52a1\n</code></pre> <p>\u901a\u8fc7 A2A Server \u548c A2AAgent \u7684\u914d\u5408\u4f7f\u7528\uff0c\u53ef\u4ee5\u6bd4\u8f83\u65b9\u4fbf\u7684\u6784\u5efa\u7684\u8fdc\u7a0b\u7684 Agent \u7cfb\u7edf\u3002</p>"},{"location":"zh/agent/","title":"Agent \u4f7f\u7528\u6587\u6863","text":"<p>Agent \u662f tRPC-Agent-Go \u6846\u67b6\u7684\u6838\u5fc3\u6267\u884c\u5355\u5143\uff0c\u8d1f\u8d23\u5904\u7406\u7528\u6237\u8f93\u5165\u5e76\u751f\u6210\u76f8\u5e94\u7684\u54cd\u5e94\u3002\u6bcf\u4e2a Agent \u90fd\u5b9e\u73b0\u4e86\u7edf\u4e00\u7684\u63a5\u53e3\uff0c\u652f\u6301\u6d41\u5f0f\u8f93\u51fa\u548c\u56de\u8c03\u673a\u5236\u3002</p> <p>\u6846\u67b6\u63d0\u4f9b\u4e86\u591a\u79cd\u7c7b\u578b\u7684 Agent\uff0c\u5305\u62ec LLMAgent\u3001ChainAgent\u3001ParallelAgent\u3001CycleAgent \u548c GraphAgent\u3002\u672c\u6587\u91cd\u70b9\u4ecb\u7ecd LLMAgent\uff0c\u5176\u4ed6 Agent \u7c7b\u578b\u4ee5\u53ca\u591a Agent \u7cfb\u7edf\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u8003 Multi-Agent\u3002</p>"},{"location":"zh/agent/#_1","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>\u63a8\u8350\u4f7f\u7528\u65b9\u5f0f\uff1aRunner</p> <p>\u6211\u4eec\u5f3a\u70c8\u63a8\u8350\u4f7f\u7528 Runner \u6765\u6267\u884c Agent\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u8c03\u7528 Agent \u63a5\u53e3\u3002Runner \u63d0\u4f9b\u4e86\u66f4\u53cb\u597d\u7684\u63a5\u53e3\uff0c\u96c6\u6210\u4e86 Session\u3001Memory \u7b49\u670d\u52a1\uff0c\u8ba9\u4f7f\u7528\u66f4\u52a0\u7b80\u5355\u3002</p> <p>\ud83d\udcd6 \u4e86\u89e3\u66f4\u591a\uff1a \u8be6\u7ec6\u7684\u4f7f\u7528\u65b9\u6cd5\u8bf7\u53c2\u8003 Runner</p> <p>\u672c\u793a\u4f8b\u4f7f\u7528 OpenAI \u7684 GPT-4o-mini \u6a21\u578b\u3002\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u51c6\u5907\u597d\u76f8\u5e94\u7684 <code>OPENAI_API_KEY</code> \u5e76\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u5bfc\u51fa\uff1a</p> <pre><code>export OPENAI_API_KEY=\"your_api_key\"\n</code></pre> <p>\u6b64\u5916\uff0c\u6846\u67b6\u8fd8\u652f\u6301\u517c\u5bb9 OpenAI API \u7684\u6a21\u578b\uff0c\u53ef\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8fdb\u884c\u914d\u7f6e\uff1a</p> <pre><code>export OPENAI_BASE_URL=\"your_api_base_url\"\nexport OPENAI_API_KEY=\"your_api_key\"\n</code></pre>"},{"location":"zh/agent/#_2","title":"\u521b\u5efa\u6a21\u578b\u5b9e\u4f8b","text":"<p>\u9996\u5148\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u6a21\u578b\u5b9e\u4f8b\uff0c\u8fd9\u91cc\u4f7f\u7528 OpenAI \u7684 GPT-4o-mini \u6a21\u578b\uff1a</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n\nmodelName := flag.String(\"model\", \"gpt-4o-mini\", \"Name of the model to use\")\nflag.Parse()\n// \u521b\u5efa OpenAI \u6a21\u578b\u5b9e\u4f8b\nmodelInstance := openai.New(*modelName, openai.Options{})\n</code></pre>"},{"location":"zh/agent/#_3","title":"\u914d\u7f6e\u751f\u6210\u53c2\u6570","text":"<p>\u8bbe\u7f6e\u6a21\u578b\u7684\u751f\u6210\u53c2\u6570\uff0c\u5305\u62ec\u6700\u5927 token \u6570\u3001\u6e29\u5ea6\u4ee5\u53ca\u662f\u5426\u4f7f\u7528\u6d41\u5f0f\u8f93\u51fa\u7b49\uff1a</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/model\"\n\nmaxTokens := 1000\ntemperature := 0.7\ngenConfig := model.GenerationConfig{\n    MaxTokens:   &amp;maxTokens,   // \u6700\u5927\u751f\u6210 token \u6570\n    Temperature: &amp;temperature, // \u6e29\u5ea6\u53c2\u6570\uff0c\u63a7\u5236\u8f93\u51fa\u7684\u968f\u673a\u6027\n    Stream:      true,         // \u542f\u7528\u6d41\u5f0f\u8f93\u51fa\n}\n</code></pre>"},{"location":"zh/agent/#llmagent","title":"\u521b\u5efa LLMAgent","text":"<p>\u4f7f\u7528\u6a21\u578b\u5b9e\u4f8b\u548c\u914d\u7f6e\u521b\u5efa LLMAgent\uff0c\u540c\u65f6\u8bbe\u7f6e Agent \u7684 Description \u4e0e Instruction\u3002</p> <p>Description \u7528\u4e8e\u63cf\u8ff0 Agent \u7684\u57fa\u672c\u529f\u80fd\u548c\u7279\u6027\uff0cInstruction \u5219\u5b9a\u4e49\u4e86 Agent \u5728\u6267\u884c\u4efb\u52a1\u65f6\u5e94\u9075\u5faa\u7684\u5177\u4f53\u6307\u4ee4\u548c\u884c\u4e3a\u51c6\u5219\u3002</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n\nllmAgent := llmagent.New(\n    \"demo-agent\",                      // Agent \u540d\u79f0\n    llmagent.WithModel(modelInstance), // \u8bbe\u7f6e\u6a21\u578b\n    llmagent.WithDescription(\"A helpful AI assistant for demonstrations\"),              // \u8bbe\u7f6e\u63cf\u8ff0\n    llmagent.WithInstruction(\"Be helpful, concise, and informative in your responses\"), // \u8bbe\u7f6e\u6307\u4ee4\n    llmagent.WithGenerationConfig(genConfig),                                           // \u8bbe\u7f6e\u751f\u6210\u53c2\u6570\n)\n</code></pre>"},{"location":"zh/agent/#_4","title":"\u5360\u4f4d\u7b26\u53d8\u91cf\uff08\u4f1a\u8bdd\u72b6\u6001\u6ce8\u5165\uff09","text":"<p>LLMAgent \u4f1a\u81ea\u52a8\u5728 <code>Instruction</code> \u548c\u53ef\u9009\u7684 <code>SystemPrompt</code> \u4e2d\u6ce8\u5165\u4f1a\u8bdd\u72b6\u6001\u3002\u652f\u6301\u7684\u5360\u4f4d\u7b26\u8bed\u6cd5\uff1a</p> <ul> <li><code>{key}</code>\uff1a\u66ff\u6362\u4e3a <code>session.State[\"key\"]</code> \u7684\u5b57\u7b26\u4e32\u503c</li> <li><code>{key?}</code>\uff1a\u53ef\u9009\uff1b\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32</li> <li><code>{user:subkey}</code> / <code>{app:subkey}</code> / <code>{temp:subkey}</code>\uff1a\u8bbf\u95ee\u7528\u6237/\u5e94\u7528/\u4e34\u65f6\u547d\u540d\u7a7a\u95f4\uff08SessionService \u4f1a\u628a app/user \u4f5c\u7528\u57df\u7684\u72b6\u6001\u5408\u5e76\u8fdb session\uff0c\u5e76\u5e26\u4e0a\u524d\u7f00\uff09</li> </ul> <p>\u6ce8\u610f\uff1a</p> <ul> <li>\u5bf9\u4e8e\u975e\u53ef\u9009\u7684 <code>{key}</code>\uff0c\u82e5\u627e\u4e0d\u5230\u5219\u4fdd\u7559\u539f\u6837\uff08\u4fbf\u4e8e LLM \u611f\u77e5\u7f3a\u5931\u4e0a\u4e0b\u6587\uff09</li> <li>\u503c\u8bfb\u53d6\u81ea <code>invocation.Session.State</code>\uff08Runner + SessionService \u4f1a\u81ea\u52a8\u8bbe\u7f6e/\u5408\u5e76\uff09</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>llm := llmagent.New(\n  \"research-agent\",\n  llmagent.WithModel(modelInstance),\n  llmagent.WithInstruction(\n    \"You are a research assistant. Focus: {research_topics}. \" +\n    \"User interests: {user:topics?}. App banner: {app:banner?}.\",\n  ),\n)\n\n// \u901a\u8fc7 SessionService \u521d\u59cb\u5316\u72b6\u6001\uff08\u7528\u6237\u6001/\u5e94\u7528\u6001 + \u4f1a\u8bdd\u672c\u5730\u952e\uff09\n_ = sessionService.UpdateUserState(ctx, session.UserKey{AppName: app, UserID: user}, session.StateMap{\n  \"topics\": []byte(\"quantum computing, cryptography\"),\n})\n_ = sessionService.UpdateAppState(ctx, app, session.StateMap{\n  \"banner\": []byte(\"Research Mode\"),\n})\n// \u65e0\u524d\u7f00\u952e\u76f4\u63a5\u5b58\u5230 session.State\n_, _ = sessionService.CreateSession(ctx, session.Key{AppName: app, UserID: user, SessionID: sid}, session.StateMap{\n  \"research_topics\": []byte(\"AI, ML, DL\"),\n})\n</code></pre> <p>\u8fdb\u4e00\u6b65\u9605\u8bfb\uff1a</p> <ul> <li>\u793a\u4f8b\uff1a<code>examples/placeholder</code>\u3001<code>examples/outputkey</code></li> <li>Session API\uff1a<code>docs/mkdocs/zh/session.md</code></li> </ul>"},{"location":"zh/agent/#runner-agent","title":"\u4f7f\u7528 Runner \u6267\u884c Agent","text":"<p>\u4f7f\u7528 Runner \u6765\u6267\u884c Agent\uff0c\u8fd9\u662f\u63a8\u8350\u7684\u4f7f\u7528\u65b9\u5f0f\uff1a</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/runner\"\n\n// \u521b\u5efa Runner\nrunner := runner.NewRunner(\"demo-app\", llmAgent)\n\n// \u76f4\u63a5\u53d1\u9001\u6d88\u606f\uff0c\u65e0\u9700\u521b\u5efa\u590d\u6742\u7684 Invocation\nmessage := model.NewUserMessage(\"Hello! Can you tell me about yourself?\")\neventChan, err := runner.Run(ctx, \"user-001\", \"session-001\", message)\nif err != nil {\n    log.Fatalf(\"\u6267\u884c Agent \u5931\u8d25: %v\", err)\n}\n</code></pre>"},{"location":"zh/agent/#_5","title":"\u5904\u7406\u4e8b\u4ef6\u6d41","text":"<p>\u901a\u8fc7\u4e8b\u4ef6\u901a\u9053\u63a5\u6536\u6267\u884c\u7ed3\u679c\uff1a</p> <pre><code>import \"context\"\n\nctx := context.Background()\n// \u5904\u7406 Event\nfor event := range eventChan {\n    // \u68c0\u67e5\u9519\u8bef\n    if event.Error != nil {\n        log.Printf(\"err: %s\", event.Error.Message)\n        continue\n    }\n    // \u5904\u7406\u5185\u5bb9\n    if len(event.Choices) &gt; 0 {\n        choice := event.Choices[0]\n        if choice.Delta.Content != \"\" {\n            // \u6d41\u5f0f\u8f93\u51fa\n            fmt.Print(choice.Delta.Content)\n        }\n    }\n    // \u68c0\u67e5\u662f\u5426\u5b8c\u6210\n    if event.Done {\n        break\n    }\n}\n</code></pre>"},{"location":"zh/agent/#_6","title":"\u5904\u7406\u4e8b\u4ef6\u6d41","text":"<p>\u901a\u8fc7\u4e8b\u4ef6\u901a\u9053\u63a5\u6536\u6267\u884c\u7ed3\u679c\uff1a</p> <pre><code>// \u5904\u7406 Event\nfor event := range eventChan {\n    // \u68c0\u67e5\u9519\u8bef\n    if event.Error != nil {\n        log.Printf(\"err: %s\", event.Error.Message)\n        continue\n    }\n    // \u5904\u7406\u5185\u5bb9\n    if len(event.Choices) &gt; 0 {\n        choice := event.Choices[0]\n        if choice.Delta.Content != \"\" {\n            // \u6d41\u5f0f\u8f93\u51fa\n            fmt.Print(choice.Delta.Content)\n        }\n    }\n    // \u68c0\u67e5\u662f\u5426\u5b8c\u6210\n    if event.Done {\n        break\n    }\n}\n</code></pre> <p>\u8be5\u793a\u4f8b\u7684\u5b8c\u6574\u4ee3\u7801\u53ef\u89c1 examples/runner</p> <p>\u4e3a\u4ec0\u4e48\u63a8\u8350\u4f7f\u7528 Runner\uff1f</p> <ol> <li>\u66f4\u7b80\u5355\u7684\u63a5\u53e3\uff1a\u65e0\u9700\u521b\u5efa\u590d\u6742\u7684 Invocation \u5bf9\u8c61</li> <li>\u96c6\u6210\u670d\u52a1\uff1a\u81ea\u52a8\u96c6\u6210 Session\u3001Memory \u7b49\u670d\u52a1</li> <li>\u66f4\u597d\u7684\u7ba1\u7406\uff1a\u7edf\u4e00\u7ba1\u7406 Agent \u7684\u6267\u884c\u6d41\u7a0b</li> <li>\u751f\u4ea7\u5c31\u7eea\uff1a\u9002\u5408\u751f\u4ea7\u73af\u5883\u4f7f\u7528</li> </ol> <p>\ud83d\udca1 \u63d0\u793a\uff1a \u60f3\u4e86\u89e3\u66f4\u591a Runner \u7684\u8be6\u7ec6\u7528\u6cd5\u548c\u9ad8\u7ea7\u529f\u80fd\uff1f\u8bf7\u67e5\u770b Runner</p> <p>\u9ad8\u7ea7\u7528\u6cd5\uff1a\u76f4\u63a5\u4f7f\u7528 Agent</p> <p>\u5982\u679c\u4f60\u9700\u8981\u66f4\u7ec6\u7c92\u5ea6\u7684\u63a7\u5236\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Agent \u63a5\u53e3\uff0c\u4f46\u8fd9\u9700\u8981\u521b\u5efa Invocation \u5bf9\u8c61\uff1a</p>"},{"location":"zh/agent/#_7","title":"\u6838\u5fc3\u6982\u5ff5","text":""},{"location":"zh/agent/#invocation","title":"Invocation\uff08\u9ad8\u7ea7\u7528\u6cd5\uff09","text":"<p>Invocation \u662f Agent \u6267\u884c\u6d41\u7a0b\u7684\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u5305\u542b\u4e86\u5355\u6b21\u8c03\u7528\u6240\u9700\u7684\u6240\u6709\u4fe1\u606f\u3002\u6ce8\u610f\uff1a\u8fd9\u662f\u9ad8\u7ea7\u7528\u6cd5\uff0c\u63a8\u8350\u4f7f\u7528 Runner \u6765\u7b80\u5316\u64cd\u4f5c\u3002</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/agent\"\n\n// \u521b\u5efa Invocation \u5bf9\u8c61\uff08\u9ad8\u7ea7\u7528\u6cd5\uff09\ninvocation := agent.NewInvocation(\n    agent.WithInvocationAgent(r.agent),                               // Agent \u5b9e\u4f8b\n    agent.WithInvocationSession(&amp;session.Session{ID: \"session-001\"}), // Session\n    agent.WithInvocationEndInvocation(false),                         // \u662f\u5426\u7ed3\u675f\u8c03\u7528\n    agent.WithInvocationMessage(model.NewUserMessage(\"User input\")),  // \u7528\u6237\u6d88\u606f\n    agent.WithInvocationModel(modelInstance),                         // \u4f7f\u7528\u7684\u6a21\u578b\n)\n\n// \u76f4\u63a5\u8c03\u7528 Agent\uff08\u9ad8\u7ea7\u7528\u6cd5\uff09\nctx := context.Background()\neventChan, err := llmAgent.Run(ctx, invocation)\nif err != nil {\n    log.Fatalf(\"\u6267\u884c Agent \u5931\u8d25: %v\", err)\n}\n</code></pre> <p>\u4ec0\u4e48\u65f6\u5019\u4f7f\u7528\u76f4\u63a5\u8c03\u7528\uff1f</p> <ul> <li>\u9700\u8981\u5b8c\u5168\u63a7\u5236\u6267\u884c\u6d41\u7a0b</li> <li>\u81ea\u5b9a\u4e49 Session \u548c Memory \u7ba1\u7406</li> <li>\u5b9e\u73b0\u7279\u6b8a\u7684\u8c03\u7528\u903b\u8f91</li> <li>\u8c03\u8bd5\u548c\u6d4b\u8bd5\u573a\u666f</li> </ul> <pre><code>// Invocation \u662f Agent \u6267\u884c\u6d41\u7a0b\u7684\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u5305\u542b\u4e86\u5355\u6b21\u8c03\u7528\u6240\u9700\u7684\u6240\u6709\u4fe1\u606f\ntype Invocation struct {\n    // Agent \u6307\u5b9a\u8981\u8c03\u7528\u7684 Agent \u5b9e\u4f8b\n    Agent Agent\n    // AgentName \u6807\u8bc6\u8981\u8c03\u7528\u7684 Agent \u5b9e\u4f8b\u540d\u79f0\n    AgentName string\n    // InvocationID \u4e3a\u6bcf\u6b21\u8c03\u7528\u63d0\u4f9b\u552f\u4e00\u6807\u8bc6\n    InvocationID string\n    // Branch \u7528\u4e8e\u5206\u5c42\u4e8b\u4ef6\u8fc7\u6ee4\u7684\u5206\u652f\u6807\u8bc6\u7b26\n    Branch string\n    // EndInvocation \u6807\u8bc6\u662f\u5426\u7ed3\u675f\u8c03\u7528\u7684\u6807\u5fd7\n    EndInvocation bool\n    // Session \u7ef4\u62a4\u5bf9\u8bdd\u7684\u4e0a\u4e0b\u6587\u72b6\u6001\n    Session *session.Session\n    // Model \u6307\u5b9a\u8981\u4f7f\u7528\u7684\u6a21\u578b\u5b9e\u4f8b\n    Model model.Model\n    // Message \u662f\u7528\u6237\u53d1\u9001\u7ed9 Agent \u7684\u5177\u4f53\u5185\u5bb9\n    Message model.Message\n    // RunOptions \u662f Run \u65b9\u6cd5\u7684\u9009\u9879\u914d\u7f6e\n    RunOptions RunOptions\n    // TransferInfo \u652f\u6301 Agent \u4e4b\u95f4\u7684\u63a7\u5236\u6743\u8f6c\u79fb\n    TransferInfo *TransferInfo\n    // ModelCallbacks \u5141\u8bb8\u5728\u6a21\u578b\u8c03\u7528\u7684\u4e0d\u540c\u9636\u6bb5\u63d2\u5165\u81ea\u5b9a\u4e49\u903b\u8f91\n    ModelCallbacks *model.ModelCallbacks\n    // ToolCallbacks \u5141\u8bb8\u5728\u5de5\u5177\u8c03\u7528\u7684\u4e0d\u540c\u9636\u6bb5\u63d2\u5165\u81ea\u5b9a\u4e49\u903b\u8f91\n    ToolCallbacks *tool.ToolCallbacks\n\n    // notice\n    noticeChanMap map[string]chan any\n    noticeMu      *sync.Mutex\n}\n</code></pre>"},{"location":"zh/agent/#event","title":"Event","text":"<p>Event \u662f Agent \u6267\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u5b9e\u65f6\u53cd\u9988\uff0c\u901a\u8fc7 Event \u6d41\u5b9e\u65f6\u62a5\u544a\u6267\u884c\u8fdb\u5c55\u3002</p> <p>Event \u4e3b\u8981\u6709\u4ee5\u4e0b\u7c7b\u578b\uff1a</p> <ul> <li>\u6a21\u578b\u5bf9\u8bdd\u4e8b\u4ef6</li> <li>\u5de5\u5177\u8c03\u7528\u4e0e\u54cd\u5e94\u4e8b\u4ef6</li> <li>Agent \u8f6c\u79fb\u4e8b\u4ef6</li> <li>\u9519\u8bef\u4e8b\u4ef6</li> </ul> <pre><code>// Event \u662f Agent \u6267\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u5b9e\u65f6\u53cd\u9988\uff0c\u901a\u8fc7 Event \u6d41\u5b9e\u65f6\u62a5\u544a\u6267\u884c\u8fdb\u5c55\ntype Event struct {\n    // Response \u5305\u542b\u6a21\u578b\u7684\u54cd\u5e94\u5185\u5bb9\u3001\u5de5\u5177\u8c03\u7528\u7ed3\u679c\u548c\u7edf\u8ba1\u4fe1\u606f\n    *model.Response\n    // InvocationID \u5173\u8054\u5230\u5177\u4f53\u7684\u8c03\u7528\n    InvocationID string `json:\"invocationId\"`\n    // Author \u662f\u4e8b\u4ef6\u7684\u6765\u6e90\uff0c\u4f8b\u5982 Agent \u6216\u5de5\u5177\n    Author string `json:\"author\"`\n    // ID \u662f\u4e8b\u4ef6\u7684\u552f\u4e00\u6807\u8bc6\n    ID string `json:\"id\"`\n    // Timestamp \u8bb0\u5f55\u4e8b\u4ef6\u53d1\u751f\u7684\u65f6\u95f4\n    Timestamp time.Time `json:\"timestamp\"`\n    // Branch \u7528\u4e8e\u5206\u5c42\u4e8b\u4ef6\u8fc7\u6ee4\u7684\u5206\u652f\u6807\u8bc6\u7b26\n    Branch string `json:\"branch,omitempty\"`\n    // RequiresCompletion \u6807\u8bc6\u6b64\u4e8b\u4ef6\u662f\u5426\u9700\u8981\u5b8c\u6210\u4fe1\u53f7\n    RequiresCompletion bool `json:\"requiresCompletion,omitempty\"`\n    // LongRunningToolIDs \u662f\u957f\u65f6\u95f4\u8fd0\u884c\u51fd\u6570\u8c03\u7528\u7684 ID \u96c6\u5408\uff0cAgent \u5ba2\u6237\u7aef\u53ef\u4ee5\u901a\u8fc7\u6b64\u5b57\u6bb5\u4e86\u89e3\u54ea\u4e2a\u51fd\u6570\u8c03\u7528\u662f\u957f\u65f6\u95f4\u8fd0\u884c\u7684\uff0c\u4ec5\u5bf9\u51fd\u6570\u8c03\u7528\u4e8b\u4ef6\u6709\u6548\n    LongRunningToolIDs map[string]struct{} `json:\"longRunningToolIDs,omitempty\"`\n}\n</code></pre> <p>Event \u7684\u6d41\u5f0f\u7279\u6027\u8ba9\u4f60\u80fd\u591f\u5b9e\u65f6\u770b\u5230 Agent \u7684\u5de5\u4f5c\u8fc7\u7a0b\uff0c\u5c31\u50cf\u548c\u4e00\u4e2a\u771f\u4eba\u5bf9\u8bdd\u4e00\u6837\u81ea\u7136\u3002\u4f60\u53ea\u9700\u8981\u904d\u5386 Event \u6d41\uff0c\u68c0\u67e5\u6bcf\u4e2a Event \u7684\u5185\u5bb9\u548c\u72b6\u6001\uff0c\u5c31\u80fd\u5b8c\u6574\u5730\u5904\u7406 Agent \u7684\u6267\u884c\u7ed3\u679c\u3002</p>"},{"location":"zh/agent/#agent_1","title":"Agent \u63a5\u53e3","text":"<p>Agent \u63a5\u53e3\u5b9a\u4e49\u4e86\u6240\u6709 Agent \u5fc5\u987b\u5b9e\u73b0\u7684\u6838\u5fc3\u884c\u4e3a\u3002\u8fd9\u4e2a\u63a5\u53e3\u8ba9\u4f60\u80fd\u591f\u7edf\u4e00\u4f7f\u7528\u4e0d\u540c\u7c7b\u578b\u7684 Agent\uff0c\u540c\u65f6\u652f\u6301\u5de5\u5177\u8c03\u7528\u548c\u5b50 Agent \u7ba1\u7406\u3002</p> <pre><code>type Agent interface {\n    // Run \u63a5\u6536\u6267\u884c\u4e0a\u4e0b\u6587\u548c\u8c03\u7528\u4fe1\u606f\uff0c\u8fd4\u56de\u4e00\u4e2a\u4e8b\u4ef6\u901a\u9053\u3002\u901a\u8fc7\u8fd9\u4e2a\u901a\u9053\uff0c\u4f60\u53ef\u4ee5\u5b9e\u65f6\u63a5\u6536 Agent \u7684\u6267\u884c\u8fdb\u5c55\u548c\u7ed3\u679c\n    Run(ctx context.Context, invocation *Invocation) (&lt;-chan *event.Event, error)\n    // Tools \u8fd4\u56de\u6b64 Agent \u53ef\u4ee5\u8bbf\u95ee\u548c\u6267\u884c\u7684\u5de5\u5177\u5217\u8868\n    Tools() []tool.Tool\n    // Info \u65b9\u6cd5\u63d0\u4f9b Agent \u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5305\u62ec\u540d\u79f0\u548c\u63cf\u8ff0\uff0c\u4fbf\u4e8e\u8bc6\u522b\u548c\u7ba1\u7406\n    Info() Info\n    // SubAgents \u8fd4\u56de\u6b64 Agent \u53ef\u7528\u7684\u5b50 Agent \u5217\u8868\n    // SubAgents \u548c FindSubAgent \u65b9\u6cd5\u652f\u6301 Agent \u4e4b\u95f4\u7684\u534f\u4f5c\u3002\u4e00\u4e2a Agent \u53ef\u4ee5\u5c06\u4efb\u52a1\u59d4\u6258\u7ed9\u5176\u4ed6 Agent\uff0c\u6784\u5efa\u590d\u6742\u7684\u591a Agent \u7cfb\u7edf\n    SubAgents() []Agent\n    // FindSubAgent \u901a\u8fc7\u540d\u79f0\u67e5\u627e\u5b50 Agent\n    FindSubAgent(name string) Agent\n}\n</code></pre> <p>\u6846\u67b6\u63d0\u4f9b\u4e86\u591a\u79cd\u7c7b\u578b\u7684 Agent \u5b9e\u73b0\uff0c\u5305\u62ec LLMAgent\u3001ChainAgent\u3001ParallelAgent\u3001CycleAgent \u548c GraphAgent\uff0c\u4e0d\u540c\u7c7b\u578b Agent \u4ee5\u53ca\u591a Agent \u7cfb\u7edf\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u8003 Multi-Agent\u3002</p>"},{"location":"zh/agent/#callbacks","title":"Callbacks","text":"<p>Callbacks \u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u56de\u8c03\u673a\u5236\uff0c\u8ba9\u4f60\u80fd\u591f\u5728 Agent \u6267\u884c\u7684\u5173\u952e\u8282\u70b9\u6ce8\u5165\u81ea\u5b9a\u4e49\u903b\u8f91\u3002</p>"},{"location":"zh/agent/#_8","title":"\u56de\u8c03\u7c7b\u578b","text":"<p>\u6846\u67b6\u63d0\u4f9b\u4e86\u4e09\u79cd\u7c7b\u578b\u7684\u56de\u8c03\uff1a</p> <p>Agent Callbacks\uff1a\u5728 Agent \u6267\u884c\u524d\u540e\u89e6\u53d1</p> <pre><code>type AgentCallbacks struct {\n    BeforeAgent []BeforeAgentCallback  // Agent \u8fd0\u884c\u524d\u7684\u56de\u8c03\n    AfterAgent  []AfterAgentCallback   // Agent \u8fd0\u884c\u540e\u7684\u56de\u8c03\n}\n</code></pre> <p>Model Callbacks\uff1a\u5728\u6a21\u578b\u8c03\u7528\u524d\u540e\u89e6\u53d1</p> <pre><code>type ModelCallbacks struct {\n    BeforeModel []BeforeModelCallback  // \u6a21\u578b\u8c03\u7528\u524d\u7684\u56de\u8c03\n    AfterModel  []AfterModelCallback   // \u6a21\u578b\u8c03\u7528\u540e\u7684\u56de\u8c03\n}\n</code></pre> <p>Tool Callbacks\uff1a\u5728\u5de5\u5177\u8c03\u7528\u524d\u540e\u89e6\u53d1</p> <pre><code>type ToolCallbacks struct {\n    BeforeTool []BeforeToolCallback  // \u5de5\u5177\u8c03\u7528\u524d\u7684\u56de\u8c03\n    AfterTool []AfterToolCallback    // \u5de5\u5177\u8c03\u7528\u540e\u7684\u56de\u8c03\n}\n</code></pre>"},{"location":"zh/agent/#_9","title":"\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>// \u521b\u5efa Agent \u56de\u8c03\ncallbacks := &amp;agent.AgentCallbacks{\n    BeforeAgent: []agent.BeforeAgentCallback{\n        func(ctx context.Context, invocation *agent.Invocation) (*model.Response, error) {\n            log.Printf(\"Agent %s \u5f00\u59cb\u6267\u884c\", invocation.AgentName)\n            return nil, nil\n        },\n    },\n    AfterAgent: []agent.AfterAgentCallback{\n        func(ctx context.Context, invocation *agent.Invocation, runErr error) (*model.Response, error) {\n            if runErr != nil {\n                log.Printf(\"Agent %s \u6267\u884c\u51fa\u9519: %v\", invocation.AgentName, runErr)\n            } else {\n                log.Printf(\"Agent %s \u6267\u884c\u5b8c\u6210\", invocation.AgentName)\n            }\n            return nil, nil\n        },\n    },\n}\n\n// \u5728 llmAgent\u4e2d\u4f7f\u7528\u56de\u6389\nllmagent := llmagent.New(\"llmagent\", llmagent.WithAgentCallbacks(callbacks))\n</code></pre> <p>\u56de\u8c03\u673a\u5236\u8ba9\u4f60\u80fd\u591f\u7cbe\u786e\u63a7\u5236 Agent \u7684\u6267\u884c\u8fc7\u7a0b\uff0c\u5b9e\u73b0\u66f4\u590d\u6742\u7684\u4e1a\u52a1\u903b\u8f91\u3002</p>"},{"location":"zh/agent/#_10","title":"\u8fdb\u9636\u4f7f\u7528","text":"<p>\u6846\u67b6\u63d0\u4f9b\u4e86 Runner\u3001Session \u548c Memory \u7b49\u9ad8\u7ea7\u529f\u80fd\uff0c\u7528\u4e8e\u6784\u5efa\u66f4\u590d\u6742\u7684 Agent \u7cfb\u7edf\u3002</p> <p>Runner \u662f\u63a8\u8350\u7684\u4f7f\u7528\u65b9\u5f0f\uff0c\u5b83\u8d1f\u8d23\u7ba1\u7406 Agent \u7684\u6267\u884c\u6d41\u7a0b\uff0c\u4e32\u8054\u4e86 Session/Memory Service \u7b49\u80fd\u529b\uff0c\u63d0\u4f9b\u4e86\u66f4\u53cb\u597d\u7684\u63a5\u53e3\u3002</p> <p>Session Service \u7528\u4e8e\u7ba1\u7406\u4f1a\u8bdd\u72b6\u6001\uff0c\u652f\u6301\u5bf9\u8bdd\u5386\u53f2\u8bb0\u5f55\u548c\u4e0a\u4e0b\u6587\u7ef4\u62a4\u3002</p> <p>Memory Service \u7528\u4e8e\u8bb0\u5f55\u7528\u6237\u7684\u504f\u597d\u4fe1\u606f\uff0c\u652f\u6301\u4e2a\u6027\u5316\u4f53\u9a8c\u3002</p> <p>\u63a8\u8350\u9605\u8bfb\u987a\u5e8f\uff1a</p> <ol> <li>Runner - \u5b66\u4e60\u63a8\u8350\u7684\u4f7f\u7528\u65b9\u5f0f</li> <li>Session - \u4e86\u89e3\u4f1a\u8bdd\u7ba1\u7406</li> <li>Multi-Agent - \u5b66\u4e60\u591a Agent \u7cfb\u7edf</li> </ol>"},{"location":"zh/artifact/","title":"Artifacts","text":"<p>Artifacts\uff08\u5236\u54c1\uff09\u662f trpc-agent-go \u4e2d\u7684\u547d\u540d\u3001\u7248\u672c\u5316\u4e8c\u8fdb\u5236\u6570\u636e\u5bf9\u8c61\uff0c\u53ef\u4ee5\u4e0e\u7528\u6237\u4f1a\u8bdd\u5173\u8054\u6216\u8de8\u4f1a\u8bdd\u6301\u4e45\u5316\u5b58\u50a8\u3002\u5236\u54c1\u7cfb\u7edf\u7531\u4e24\u4e2a\u4e3b\u8981\u7ec4\u4ef6\u7ec4\u6210\uff1a</p> <ol> <li>Artifacts\uff08\u5236\u54c1\uff09\uff1a\u6570\u636e\u5bf9\u8c61\u672c\u8eab - \u5305\u542b\u4e8c\u8fdb\u5236\u5185\u5bb9\u3001\u5143\u6570\u636e\u548c\u7248\u672c\u4fe1\u606f</li> <li>Artifact Service\uff08\u5236\u54c1\u670d\u52a1\uff09\uff1a\u5904\u7406\u4fdd\u5b58\u3001\u68c0\u7d22\u548c\u7ec4\u7ec7\u5236\u54c1\u7684\u5b58\u50a8\u7ba1\u7406\u670d\u52a1</li> </ol> <p>\u8be5\u7cfb\u7edf\u4f7f Agent \u80fd\u591f\u5b58\u50a8\u3001\u68c0\u7d22\u548c\u7ba1\u7406\u5404\u79cd\u7c7b\u578b\u7684\u5185\u5bb9\uff0c\u5305\u62ec\u56fe\u50cf\u3001\u6587\u6863\u3001\u6587\u672c\u6587\u4ef6\u548c\u5176\u4ed6\u4e8c\u8fdb\u5236\u6570\u636e\u3002</p>"},{"location":"zh/artifact/#artifacts_1","title":"\u4ec0\u4e48\u662f Artifacts\uff08\u5236\u54c1\uff09\uff1f","text":"<p>Artifacts\uff08\u5236\u54c1\uff09\u662f\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\u7684\u6570\u636e\u5bb9\u5668\uff1a - \u4e8c\u8fdb\u5236\u5185\u5bb9\uff08\u56fe\u50cf\u3001\u6587\u6863\u3001\u6587\u4ef6\u7b49\uff09 - \u5143\u6570\u636e\uff08MIME \u7c7b\u578b\u3001\u540d\u79f0\u3001URL\uff09 - \u7248\u672c\u4fe1\u606f - \u4e0e\u7528\u6237\u548c\u4f1a\u8bdd\u7684\u5173\u8054</p>"},{"location":"zh/artifact/#artifact-service","title":"\u4ec0\u4e48\u662f Artifact Service\uff08\u5236\u54c1\u670d\u52a1\uff09\uff1f","text":"<p>Artifact Service\uff08\u5236\u54c1\u670d\u52a1\uff09\u662f\u540e\u7aef\u7cfb\u7edf\uff0c\u8d1f\u8d23\uff1a - \u5b58\u50a8\u548c\u68c0\u7d22\u5236\u54c1 - \u7ba1\u7406\u7248\u672c - \u5904\u7406\u547d\u540d\u7a7a\u95f4\u7ec4\u7ec7\uff08\u4f1a\u8bdd\u8303\u56f4 vs \u7528\u6237\u8303\u56f4\uff09 - \u63d0\u4f9b\u4e0d\u540c\u7684\u5b58\u50a8\u540e\u7aef\uff08\u5185\u5b58\u3001\u4e91\u5b58\u50a8\uff09</p>"},{"location":"zh/artifact/#_1","title":"\u7cfb\u7edf\u6982\u8ff0","text":"<p>\u5236\u54c1\u7cfb\u7edf\u63d0\u4f9b\uff1a</p> <ul> <li>\u7248\u672c\u5316\u5b58\u50a8\uff1a\u6bcf\u4e2a\u5236\u54c1\u90fd\u4f1a\u81ea\u52a8\u7248\u672c\u5316\uff0c\u5141\u8bb8\u60a8\u8ddf\u8e2a\u968f\u65f6\u95f4\u7684\u53d8\u5316</li> <li>\u57fa\u4e8e\u4f1a\u8bdd\u7684\u7ec4\u7ec7\uff1a\u5236\u54c1\u53ef\u4ee5\u9650\u5b9a\u5728\u7279\u5b9a\u7528\u6237\u4f1a\u8bdd\u8303\u56f4\u5185</li> <li>\u7528\u6237\u6301\u4e45\u5316\u5b58\u50a8\uff1a\u5236\u54c1\u53ef\u4ee5\u4f7f\u7528 <code>user:</code> \u547d\u540d\u7a7a\u95f4\u4e3a\u7528\u6237\u8de8\u4f1a\u8bdd\u6301\u4e45\u5316\u5b58\u50a8</li> <li>\u591a\u79cd\u5b58\u50a8\u540e\u7aef\uff1a\u652f\u6301\u5185\u5b58\u5b58\u50a8\uff08\u5f00\u53d1\u73af\u5883\uff09\u548c\u4e91\u5b58\u50a8\uff08\u751f\u4ea7\u73af\u5883\uff09</li> <li>MIME \u7c7b\u578b\u652f\u6301\uff1a\u4e3a\u4e0d\u540c\u6587\u4ef6\u683c\u5f0f\u63d0\u4f9b\u9002\u5f53\u7684\u5185\u5bb9\u7c7b\u578b\u5904\u7406</li> </ul>"},{"location":"zh/artifact/#_2","title":"\u6838\u5fc3\u7ec4\u4ef6","text":""},{"location":"zh/artifact/#artifact","title":"Artifact \u6570\u636e\u7ed3\u6784","text":"<p>Artifact\uff08\u5236\u54c1\uff09\u662f\u5305\u542b\u60a8\u5185\u5bb9\u7684\u57fa\u672c\u6570\u636e\u5bf9\u8c61\uff1a</p> <pre><code>type Artifact struct {\n    // Data \u5305\u542b\u539f\u59cb\u5b57\u8282\u6570\u636e\uff08\u5fc5\u9700\uff09\n    Data []byte `json:\"data,omitempty\"`\n    // MimeType \u662f IANA \u6807\u51c6 MIME \u7c7b\u578b\uff08\u5fc5\u9700\uff09\n    MimeType string `json:\"mime_type,omitempty\"`\n    // URL \u662f\u53ef\u8bbf\u95ee\u5236\u54c1\u7684\u53ef\u9009 URL\n    URL string `json:\"url,omitempty\"`\n    // Name \u662f\u5236\u54c1\u7684\u53ef\u9009\u663e\u793a\u540d\u79f0\n    Name string `json:\"name,omitempty\"`\n}\n</code></pre>"},{"location":"zh/artifact/#_3","title":"\u4f1a\u8bdd\u4fe1\u606f","text":"<pre><code>type SessionInfo struct {\n    // AppName \u662f\u5e94\u7528\u7a0b\u5e8f\u540d\u79f0\n    AppName string\n    // UserID \u662f\u7528\u6237 ID\n    UserID string\n    // SessionID \u662f\u4f1a\u8bdd ID\n    SessionID string\n}\n</code></pre>"},{"location":"zh/artifact/#artifact-service_1","title":"Artifact Service \u5b58\u50a8\u540e\u7aef","text":"<p>Artifact Service \u63d0\u4f9b\u4e0d\u540c\u7684\u5b58\u50a8\u5b9e\u73b0\u6765\u7ba1\u7406\u5236\u54c1\uff1a</p>"},{"location":"zh/artifact/#_4","title":"\u5185\u5b58\u5b58\u50a8","text":"<p>\u9002\u7528\u4e8e\u5f00\u53d1\u548c\u6d4b\u8bd5\uff1a</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/artifact/inmemory\"\n\nservice := inmemory.NewService()\n</code></pre>"},{"location":"zh/artifact/#cos","title":"\u817e\u8baf\u4e91\u5bf9\u8c61\u5b58\u50a8 (COS)","text":"<p>\u7528\u4e8e\u751f\u4ea7\u90e8\u7f72\uff1a</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/artifact/cos\"\n\n// \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\n// export COS_SECRETID=\"your-secret-id\"\n// export COS_SECRETKEY=\"your-secret-key\"\n\nservice := cos.NewService(\"https://bucket.cos.region.myqcloud.com\")\n</code></pre>"},{"location":"zh/artifact/#agent","title":"\u5728 Agent \u4e2d\u7684\u4f7f\u7528","text":""},{"location":"zh/artifact/#artifact-service-runner","title":"\u914d\u7f6e Artifact Service \u4e0e Runner","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/artifact/inmemory\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n)\n\n// \u521b\u5efa\u5236\u54c1\u670d\u52a1\nartifactService := inmemory.NewService()\n\n// \u521b\u5efa\u5e26\u5236\u54c1\u670d\u52a1\u7684 runner\nr := runner.NewRunner(\n    \"my-app\",\n    myAgent,\n    runner.WithArtifactService(artifactService),\n)\n</code></pre>"},{"location":"zh/artifact/#artifacts_2","title":"\u5728\u5de5\u5177\u4e2d\u521b\u5efa\u548c\u7ba1\u7406 Artifacts","text":"<p>\u5de5\u5177\u53ef\u4ee5\u521b\u5efa\u5236\u54c1\u5e76\u901a\u8fc7\u5de5\u5177\u4e0a\u4e0b\u6587\u4f7f\u7528 Artifact Service\uff1a</p> <pre><code>func myTool(ctx context.Context, input MyInput) (MyOutput, error) {\n    // \u83b7\u53d6\u5de5\u5177\u4e0a\u4e0b\u6587\n    toolCtx, err := agent.NewToolContext(ctx)\n    if err != nil {\n        return MyOutput{}, err\n    }\n\n    // \u521b\u5efa\u5236\u54c1\n    artifact := &amp;artifact.Artifact{\n        Data:     []byte(\"\u4f60\u597d\uff0c\u4e16\u754c\uff01\"),\n        MimeType: \"text/plain\",\n        Name:     \"greeting.txt\",\n    }\n\n    // \u4fdd\u5b58\u5236\u54c1\n    version, err := toolCtx.SaveArtifact(\"greeting.txt\", artifact)\n    if err != nil {\n        return MyOutput{}, err\n    }\n\n    // \u7a0d\u540e\u52a0\u8f7d\u5236\u54c1\n    loadedArtifact, err := toolCtx.LoadArtifact(\"greeting.txt\", nil) // nil \u8868\u793a\u6700\u65b0\u7248\u672c\n    if err != nil {\n        return MyOutput{}, err\n    }\n\n    return MyOutput{}, nil\n}\n</code></pre>"},{"location":"zh/artifact/#_5","title":"\u547d\u540d\u7a7a\u95f4\u548c\u7248\u672c\u7ba1\u7406","text":""},{"location":"zh/artifact/#_6","title":"\u4f1a\u8bdd\u8303\u56f4\u7684\u5236\u54c1","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5236\u54c1\u9650\u5b9a\u5728\u5f53\u524d\u4f1a\u8bdd\u8303\u56f4\u5185\uff1a</p> <pre><code>// \u6b64\u6587\u4ef6\u53ea\u80fd\u5728\u5f53\u524d\u4f1a\u8bdd\u4e2d\u8bbf\u95ee\nversion, err := toolCtx.SaveArtifact(\"session-file.txt\", artifact)\n</code></pre>"},{"location":"zh/artifact/#_7","title":"\u7528\u6237\u6301\u4e45\u5316\u5236\u54c1","text":"<p>\u4f7f\u7528 <code>user:</code> \u524d\u7f00\u521b\u5efa\u8de8\u4f1a\u8bdd\u6301\u4e45\u5316\u7684\u5236\u54c1\uff1a</p> <pre><code>// \u6b64\u6587\u4ef6\u5728\u7528\u6237\u7684\u6240\u6709\u4f1a\u8bdd\u4e2d\u6301\u4e45\u5316\nversion, err := toolCtx.SaveArtifact(\"user:profile.json\", artifact)\n</code></pre>"},{"location":"zh/artifact/#_8","title":"\u7248\u672c\u7ba1\u7406","text":"<p>\u6bcf\u6b21\u4fdd\u5b58\u64cd\u4f5c\u90fd\u4f1a\u521b\u5efa\u65b0\u7248\u672c\uff1a</p> <pre><code>// \u4fdd\u5b58\u7248\u672c 0\nv0, _ := toolCtx.SaveArtifact(\"document.txt\", artifact1)\n\n// \u4fdd\u5b58\u7248\u672c 1\nv1, _ := toolCtx.SaveArtifact(\"document.txt\", artifact2)\n\n// \u52a0\u8f7d\u7279\u5b9a\u7248\u672c\noldVersion := 0\nartifact, _ := toolCtx.LoadArtifact(\"document.txt\", &amp;oldVersion)\n\n// \u52a0\u8f7d\u6700\u65b0\u7248\u672c\nartifact, _ := toolCtx.LoadArtifact(\"document.txt\", nil)\n</code></pre>"},{"location":"zh/artifact/#artifact-service_2","title":"Artifact Service \u63a5\u53e3","text":"<p>Artifact Service \u63d0\u4f9b\u4ee5\u4e0b\u64cd\u4f5c\u6765\u7ba1\u7406\u5236\u54c1\uff1a</p> <pre><code>type Service interface {\n    // \u4fdd\u5b58\u5236\u54c1\u5e76\u8fd4\u56de\u7248\u672c ID\n    SaveArtifact(ctx context.Context, sessionInfo SessionInfo, filename string, artifact *Artifact) (int, error)\n\n    // \u52a0\u8f7d\u5236\u54c1\uff08\u5982\u679c version \u4e3a nil \u5219\u52a0\u8f7d\u6700\u65b0\u7248\u672c\uff09\n    LoadArtifact(ctx context.Context, sessionInfo SessionInfo, filename string, version *int) (*Artifact, error)\n\n    // \u5217\u51fa\u4f1a\u8bdd\u4e2d\u7684\u6240\u6709\u5236\u54c1\u6587\u4ef6\u540d\n    ListArtifactKeys(ctx context.Context, sessionInfo SessionInfo) ([]string, error)\n\n    // \u5220\u9664\u5236\u54c1\uff08\u6240\u6709\u7248\u672c\uff09\n    DeleteArtifact(ctx context.Context, sessionInfo SessionInfo, filename string) error\n\n    // \u5217\u51fa\u5236\u54c1\u7684\u6240\u6709\u7248\u672c\n    ListVersions(ctx context.Context, sessionInfo SessionInfo, filename string) ([]int, error)\n}\n</code></pre>"},{"location":"zh/artifact/#_9","title":"\u793a\u4f8b","text":""},{"location":"zh/artifact/#_10","title":"\u56fe\u50cf\u751f\u6210\u548c\u5b58\u50a8","text":"<pre><code>// \u751f\u6210\u5e76\u4fdd\u5b58\u56fe\u50cf\u7684\u5de5\u5177\nfunc generateImageTool(ctx context.Context, input GenerateImageInput) (GenerateImageOutput, error) {\n    // \u751f\u6210\u56fe\u50cf\uff08\u5b9e\u73b0\u7ec6\u8282\u7701\u7565\uff09\n    imageData := generateImage(input.Prompt)\n\n    // \u521b\u5efa\u5236\u54c1\n    artifact := &amp;artifact.Artifact{\n        Data:     imageData,\n        MimeType: \"image/png\",\n        Name:     \"generated-image.png\",\n    }\n\n    // \u4fdd\u5b58\u5230\u5236\u54c1\u5b58\u50a8\n    toolCtx, _ := agent.NewToolContext(ctx)\n    version, err := toolCtx.SaveArtifact(\"generated-image.png\", artifact)\n\n    return GenerateImageOutput{\n        ImagePath: \"generated-image.png\",\n        Version:   version,\n    }, err\n}\n</code></pre>"},{"location":"zh/artifact/#_11","title":"\u6587\u672c\u5904\u7406\u548c\u5b58\u50a8","text":"<pre><code>// \u5904\u7406\u5e76\u4fdd\u5b58\u6587\u672c\u7684\u5de5\u5177\nfunc processTextTool(ctx context.Context, input ProcessTextInput) (ProcessTextOutput, error) {\n    // \u5904\u7406\u6587\u672c\n    processedText := strings.ToUpper(input.Text)\n\n    // \u521b\u5efa\u5236\u54c1\n    artifact := &amp;artifact.Artifact{\n        Data:     []byte(processedText),\n        MimeType: \"text/plain\",\n        Name:     \"processed-text.txt\",\n    }\n\n    // \u4fdd\u5b58\u5230\u7528\u6237\u547d\u540d\u7a7a\u95f4\u4ee5\u5b9e\u73b0\u6301\u4e45\u5316\n    toolCtx, _ := agent.NewToolContext(ctx)\n    version, err := toolCtx.SaveArtifact(\"user:processed-text.txt\", artifact)\n\n    return ProcessTextOutput{\n        ProcessedText: processedText,\n        Version:       version,\n    }, err\n}\n</code></pre>"},{"location":"zh/artifact/#_12","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li> <p>\u4f7f\u7528\u9002\u5f53\u7684\u547d\u540d\u7a7a\u95f4\uff1a\u5bf9\u4e34\u65f6\u6570\u636e\u4f7f\u7528\u4f1a\u8bdd\u8303\u56f4\u7684\u5236\u54c1\uff0c\u5bf9\u9700\u8981\u8de8\u4f1a\u8bdd\u4fdd\u5b58\u7684\u6570\u636e\u4f7f\u7528\u7528\u6237\u6301\u4e45\u5316\u5236\u54c1\u3002</p> </li> <li> <p>\u8bbe\u7f6e\u6b63\u786e\u7684 MIME \u7c7b\u578b\uff1a\u59cb\u7ec8\u4e3a\u5236\u54c1\u6307\u5b9a\u6b63\u786e\u7684 MIME \u7c7b\u578b\u4ee5\u786e\u4fdd\u6b63\u786e\u5904\u7406\u3002</p> </li> <li> <p>\u5904\u7406\u7248\u672c\uff1a\u8003\u8651\u662f\u5426\u9700\u8981\u8ddf\u8e2a\u7248\u672c\u5e76\u9002\u5f53\u4f7f\u7528\u7248\u672c\u7ba1\u7406\u7cfb\u7edf\u3002</p> </li> <li> <p>\u9009\u62e9\u5408\u9002\u7684\u5b58\u50a8\u540e\u7aef\uff1a\u5f00\u53d1\u73af\u5883\u4f7f\u7528\u5185\u5b58\u5b58\u50a8\uff0c\u751f\u4ea7\u73af\u5883\u4f7f\u7528\u4e91\u5b58\u50a8\u3002</p> </li> <li> <p>\u9519\u8bef\u5904\u7406\uff1a\u4fdd\u5b58\u548c\u52a0\u8f7d\u5236\u54c1\u65f6\u59cb\u7ec8\u5904\u7406\u9519\u8bef\uff0c\u56e0\u4e3a\u5b58\u50a8\u64cd\u4f5c\u53ef\u80fd\u5931\u8d25\u3002</p> </li> <li> <p>\u8d44\u6e90\u7ba1\u7406\uff1a\u4f7f\u7528\u4e91\u5b58\u50a8\u540e\u7aef\u65f6\u8981\u6ce8\u610f\u5b58\u50a8\u6210\u672c\u548c\u6570\u636e\u751f\u547d\u5468\u671f\u3002</p> </li> </ol>"},{"location":"zh/artifact/#_13","title":"\u914d\u7f6e","text":""},{"location":"zh/artifact/#cos_1","title":"COS \u7684\u73af\u5883\u53d8\u91cf","text":"<p>\u4f7f\u7528\u817e\u8baf\u4e91\u5bf9\u8c61\u5b58\u50a8\u65f6\uff1a</p> <pre><code>export COS_SECRETID=\"your-secret-id\"\nexport COS_SECRETKEY=\"your-secret-key\"\n</code></pre>"},{"location":"zh/artifact/#_14","title":"\u5b58\u50a8\u8def\u5f84\u7ed3\u6784","text":"<p>\u5236\u54c1\u7cfb\u7edf\u4f7f\u7528\u4ee5\u4e0b\u8def\u5f84\u7ed3\u6784\u7ec4\u7ec7\u6587\u4ef6\uff1a</p> <ul> <li>\u4f1a\u8bdd\u8303\u56f4\uff1a<code>{app_name}/{user_id}/{session_id}/{filename}/{version}</code></li> <li>\u7528\u6237\u6301\u4e45\u5316\uff1a<code>{app_name}/{user_id}/user/{filename}/{version}</code></li> </ul> <p>\u6b64\u7ed3\u6784\u786e\u4fdd\u5e94\u7528\u7a0b\u5e8f\u3001\u7528\u6237\u548c\u4f1a\u8bdd\u4e4b\u95f4\u7684\u9002\u5f53\u9694\u79bb\uff0c\u540c\u65f6\u7ef4\u62a4\u7248\u672c\u5386\u53f2\u3002</p>"},{"location":"zh/callbacks/#callbacks","title":"\u56de\u8c03\uff08Callbacks\uff09","text":"<p>\u672c\u6587\u4ecb\u7ecd\u9879\u76ee\u4e2d\u7684\u56de\u8c03\u7cfb\u7edf\uff0c\u7528\u4e8e\u62e6\u622a\u3001\u89c2\u6d4b\u4e0e\u5b9a\u5236\u6a21\u578b\u63a8\u7406\u3001\u5de5\u5177\u8c03\u7528\u4e0e Agent \u6267\u884c\u3002</p> <p>\u56de\u8c03\u5206\u4e3a\u4e09\u7c7b\uff1a</p> <ul> <li>ModelCallbacks\uff08\u6a21\u578b\u56de\u8c03\uff09</li> <li>ToolCallbacks\uff08\u5de5\u5177\u56de\u8c03\uff09</li> <li>AgentCallbacks\uff08Agent \u56de\u8c03\uff09</li> </ul> <p>\u6bcf\u7c7b\u90fd\u6709 Before \u4e0e After \u4e24\u79cd\u56de\u8c03\u3002Before \u56de\u8c03\u53ef\u4ee5\u901a\u8fc7\u8fd4\u56de\u975e\u7a7a\u7ed3\u679c\u63d0\u524d\u8fd4\u56de\uff0c\u8df3\u8fc7\u9ed8\u8ba4\u6267\u884c\u3002</p>"},{"location":"zh/callbacks/#modelcallbacks","title":"ModelCallbacks","text":"<ul> <li>BeforeModelCallback\uff1a\u6a21\u578b\u63a8\u7406\u524d\u89e6\u53d1</li> <li>AfterModelCallback\uff1a\u6a21\u578b\u5b8c\u6210\u540e\u89e6\u53d1\uff08\u6216\u6309\u6d41\u5f0f\u9636\u6bb5\uff09</li> </ul> <p>\u7b7e\u540d\uff1a</p> <pre><code>type BeforeModelCallback func(ctx context.Context, req *model.Request) (*model.Response, error)\ntype AfterModelCallback  func(ctx context.Context, req *model.Request, resp *model.Response, runErr error) (*model.Response, error)\n</code></pre> <p>\u8981\u70b9\uff1a</p> <ul> <li>Before \u53ef\u8fd4\u56de\u975e\u7a7a\u54cd\u5e94\u4ee5\u8df3\u8fc7\u6a21\u578b\u8c03\u7528</li> <li>After \u53ef\u83b7\u53d6\u539f\u59cb\u8bf7\u6c42 <code>req</code>\uff0c\u4fbf\u4e8e\u5185\u5bb9\u8fd8\u539f\u4e0e\u540e\u5904\u7406</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>modelCallbacks := model.NewCallbacks().\n  // Before\uff1a\u5bf9\u7279\u5b9a\u63d0\u793a\u76f4\u63a5\u8fd4\u56de\u56fa\u5b9a\u54cd\u5e94\uff0c\u8df3\u8fc7\u771f\u5b9e\u6a21\u578b\u8c03\u7528\n  RegisterBeforeModel(func(ctx context.Context, req *model.Request) (*model.Response, error) {\n    if len(req.Messages) &gt; 0 &amp;&amp; strings.Contains(req.Messages[len(req.Messages)-1].Content, \"/ping\") {\n      return &amp;model.Response{Choices: []model.Choice{{Message: model.Message{Role: model.RoleAssistant, Content: \"pong\"}}}}, nil\n    }\n    return nil, nil\n  }).\n  // After\uff1a\u5728\u6210\u529f\u65f6\u8ffd\u52a0\u63d0\u793a\u4fe1\u606f\uff0c\u6216\u5728\u51fa\u9519\u65f6\u5305\u88c5\u9519\u8bef\u4fe1\u606f\n  RegisterAfterModel(func(ctx context.Context, req *model.Request, resp *model.Response, runErr error) (*model.Response, error) {\n    if runErr != nil || resp == nil || len(resp.Choices) == 0 {\n      return resp, runErr\n    }\n    c := resp.Choices[0]\n    c.Message.Content = c.Message.Content + \"\\n\\n-- answered by callback\"\n    resp.Choices[0] = c\n    return resp, nil\n  })\n</code></pre>"},{"location":"zh/callbacks/#toolcallbacks","title":"ToolCallbacks","text":"<ul> <li>BeforeToolCallback\uff1a\u5de5\u5177\u8c03\u7528\u524d\u89e6\u53d1</li> <li>AfterToolCallback\uff1a\u5de5\u5177\u8c03\u7528\u540e\u89e6\u53d1</li> </ul> <p>\u7b7e\u540d\uff1a</p> <pre><code>// Before\uff1a\u53ef\u63d0\u524d\u8fd4\u56de\uff0c\u5e76\u53ef\u901a\u8fc7\u6307\u9488\u4fee\u6539\u53c2\u6570\ntype BeforeToolCallback func(\n  ctx context.Context,\n  toolName string,\n  toolDeclaration *tool.Declaration,\n  jsonArgs *[]byte, // \u6307\u9488\uff1a\u53ef\u4fee\u6539\uff0c\u4fee\u6539\u5bf9\u8c03\u7528\u65b9\u53ef\u89c1\n) (any, error)\n\n// After\uff1a\u53ef\u8986\u76d6\u7ed3\u679c\ntype AfterToolCallback func(\n  ctx context.Context,\n  toolName string,\n  toolDeclaration *tool.Declaration,\n  jsonArgs []byte,\n  result any,\n  runErr error,\n) (any, error)\n</code></pre> <p>\u53c2\u6570\u4fee\u6539\uff08\u91cd\u8981\uff09\uff1a</p> <ul> <li>BeforeToolCallback \u63a5\u6536 <code>*[]byte</code>\uff0c\u56de\u8c03\u5185\u90e8\u53ef\u66ff\u6362\u5207\u7247\uff08\u5982 <code>*jsonArgs = newBytes</code>\uff09</li> <li>\u4fee\u6539\u540e\u7684\u53c2\u6570\u5c06\u7528\u4e8e\uff1a<ul> <li>\u5b9e\u9645\u5de5\u5177\u6267\u884c</li> <li>\u53ef\u89c2\u6d4b Trace \u4e0e\u56fe\u4e8b\u4ef6\uff08emitToolStartEvent/emitToolCompleteEvent\uff09\u4e0a\u62a5</li> </ul> </li> </ul> <p>\u63d0\u524d\u8fd4\u56de\uff1a</p> <ul> <li>BeforeToolCallback \u8fd4\u56de\u975e\u7a7a\u7ed3\u679c\u65f6\uff0c\u4f1a\u8df3\u8fc7\u5b9e\u9645\u5de5\u5177\u6267\u884c\uff0c\u76f4\u63a5\u4f7f\u7528\u8be5\u7ed3\u679c</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>toolCallbacks := tool.NewCallbacks().\n  RegisterBeforeTool(func(ctx context.Context, toolName string, d *tool.Declaration, jsonArgs *[]byte) (any, error) {\n    if jsonArgs != nil &amp;&amp; toolName == \"calculator\" {\n      origin := string(*jsonArgs)\n      enriched := []byte(fmt.Sprintf(`{\"original\":%s,\"ts\":%d}`, origin, time.Now().Unix()))\n      *jsonArgs = enriched\n    }\n    return nil, nil\n  }).\n  RegisterAfterTool(func(ctx context.Context, toolName string, d *tool.Declaration, args []byte, result any, runErr error) (any, error) {\n    if runErr != nil {\n      return nil, runErr\n    }\n    if s, ok := result.(string); ok {\n      return s + \"\\n-- post processed by tool callback\", nil\n    }\n    return result, nil\n  })\n</code></pre> <p>\u53ef\u89c2\u6d4b\u4e0e\u4e8b\u4ef6\uff1a</p> <ul> <li> <p>\u4fee\u6539\u540e\u7684\u53c2\u6570\u4f1a\u540c\u6b65\u5230\uff1a</p> <ul> <li><code>TraceToolCall</code> \u53ef\u89c2\u6d4b\u5c5e\u6027</li> <li>\u56fe\u4e8b\u4ef6 <code>emitToolStartEvent</code> \u4e0e <code>emitToolCompleteEvent</code></li> </ul> </li> </ul>"},{"location":"zh/callbacks/#agentcallbacks","title":"AgentCallbacks","text":"<ul> <li>BeforeAgentCallback\uff1aAgent \u6267\u884c\u524d\u89e6\u53d1</li> <li>AfterAgentCallback\uff1aAgent \u6267\u884c\u540e\u89e6\u53d1</li> </ul> <p>\u7b7e\u540d\uff1a</p> <pre><code>type BeforeAgentCallback func(ctx context.Context, inv *agent.Invocation) (*model.Response, error)\ntype AfterAgentCallback  func(ctx context.Context, inv *agent.Invocation, runErr error) (*model.Response, error)\n</code></pre> <p>\u8981\u70b9\uff1a</p> <ul> <li>Before \u53ef\u8fd4\u56de\u81ea\u5b9a\u4e49 <code>*model.Response</code> \u4ee5\u4e2d\u6b62\u540e\u7eed\u6a21\u578b\u8c03\u7528</li> <li>After \u53ef\u8fd4\u56de\u66ff\u6362\u54cd\u5e94</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>agentCallbacks := agent.NewCallbacks().\n  // Before\uff1a\u5f53\u7528\u6237\u6d88\u606f\u5305\u542b /abort \u65f6\uff0c\u76f4\u63a5\u8fd4\u56de\u56fa\u5b9a\u54cd\u5e94\uff0c\u8df3\u8fc7\u540e\u7eed\u6d41\u7a0b\n  RegisterBeforeAgent(func(ctx context.Context, inv *agent.Invocation) (*model.Response, error) {\n    if inv != nil &amp;&amp; strings.Contains(inv.GetUserMessageContent(), \"/abort\") {\n      return &amp;model.Response{Choices: []model.Choice{{Message: model.Message{Role: model.RoleAssistant, Content: \"aborted by callback\"}}}}, nil\n    }\n    return nil, nil\n  }).\n  // After\uff1a\u5728\u6210\u529f\u54cd\u5e94\u672b\u5c3e\u8ffd\u52a0\u6807\u6ce8\n  RegisterAfterAgent(func(ctx context.Context, inv *agent.Invocation, runErr error) (*model.Response, error) {\n    if runErr != nil {\n      return nil, runErr\n    }\n    if inv == nil || inv.Response == nil || len(inv.Response.Choices) == 0 {\n      return nil, nil\n    }\n    c := inv.Response.Choices[0]\n    c.Message.Content = c.Message.Content + \"\\n\\n-- handled by agent callback\"\n    inv.Response.Choices[0] = c\n    return inv.Response, nil\n  })\n</code></pre>"},{"location":"zh/callbacks/#invocation","title":"\u5728\u56de\u8c03\u4e2d\u8bbf\u95ee Invocation","text":"<p>\u56de\u8c03\u53ef\u901a\u8fc7 context \u83b7\u53d6\u5f53\u524d\u7684 Invocation \u4ee5\u4fbf\u505a\u5173\u8054\u65e5\u5fd7\u3001\u8ffd\u8e2a\u6216\u6309\u6b21\u903b\u8f91\u3002</p> <pre><code>if inv, ok := agent.InvocationFromContext(ctx); ok &amp;&amp; inv != nil {\n  fmt.Printf(\"invocation id=%s, agent=%s\\n\", inv.InvocationID, inv.AgentName)\n}\n</code></pre> <p>\u793a\u4f8b\u5de5\u7a0b\u5728 Before/After \u56de\u8c03\u4e2d\u6253\u5370\u4e86 Invocation \u7684\u5b58\u5728\u6027\u3002</p>"},{"location":"zh/callbacks/#_1","title":"\u5168\u5c40\u56de\u8c03\u4e0e\u94fe\u5f0f\u6ce8\u518c","text":"<p>\u53ef\u901a\u8fc7\u94fe\u5f0f\u6ce8\u518c\u6784\u5efa\u53ef\u590d\u7528\u7684\u5168\u5c40\u56de\u8c03\u914d\u7f6e\u3002</p> <pre><code>_ = model.NewCallbacks().\n  RegisterBeforeModel(func(ctx context.Context, req *model.Request) (*model.Response, error) {\n    fmt.Printf(\"Global BeforeModel: %d messages.\\n\", len(req.Messages))\n    return nil, nil\n  }).\n  RegisterAfterModel(func(ctx context.Context, req *model.Request, rsp *model.Response, err error) (*model.Response, error) {\n    fmt.Println(\"Global AfterModel: completed.\")\n    return nil, nil\n  })\n\n_ = tool.NewCallbacks().\n  RegisterBeforeTool(func(ctx context.Context, toolName string, d *tool.Declaration, jsonArgs *[]byte) (any, error) {\n    fmt.Printf(\"Global BeforeTool: %s.\\n\", toolName)\n    return nil, nil\n  }).\n  RegisterAfterTool(func(ctx context.Context, toolName string, d *tool.Declaration, jsonArgs []byte, result any, runErr error) (any, error) {\n    fmt.Printf(\"Global AfterTool: %s done.\\n\", toolName)\n    return nil, nil\n  })\n\n_ = agent.NewCallbacks().\n  RegisterBeforeAgent(func(ctx context.Context, inv *agent.Invocation) (*model.Response, error) {\n    fmt.Printf(\"Global BeforeAgent: %s.\\n\", inv.AgentName)\n    return nil, nil\n  }).\n  RegisterAfterAgent(func(ctx context.Context, inv *agent.Invocation, runErr error) (*model.Response, error) {\n    fmt.Println(\"Global AfterAgent: completed.\")\n    return nil, nil\n  })\n</code></pre>"},{"location":"zh/callbacks/#mock","title":"Mock \u4e0e\u53c2\u6570\u4fee\u6539\u793a\u4f8b","text":"<p>Mock \u5de5\u5177\u7ed3\u679c\u5e76\u4e2d\u6b62\u540e\u7eed\u5de5\u5177\u8c03\u7528\uff1a</p> <pre><code>toolCallbacks.RegisterBeforeTool(func(ctx context.Context, toolName string, d *tool.Declaration, jsonArgs *[]byte) (any, error) {\n  if toolName == \"calculator\" &amp;&amp; jsonArgs != nil &amp;&amp; strings.Contains(string(*jsonArgs), \"42\") {\n    return calculatorResult{Operation: \"custom\", A: 42, B: 42, Result: 4242}, nil\n  }\n  return nil, nil\n})\n</code></pre> <p>\u6267\u884c\u524d\u4fee\u6539\u53c2\u6570\uff08\u5e76\u5728\u53ef\u89c2\u6d4b/\u4e8b\u4ef6\u4e2d\u4f53\u73b0\uff09\uff1a</p> <pre><code>toolCallbacks.RegisterBeforeTool(func(ctx context.Context, toolName string, d *tool.Declaration, jsonArgs *[]byte) (any, error) {\n  if jsonArgs != nil &amp;&amp; toolName == \"calculator\" {\n    originalArgs := string(*jsonArgs)\n    modifiedArgs := fmt.Sprintf(`{\"original\":%s,\"timestamp\":\"%d\"}`, originalArgs, time.Now().Unix())\n    *jsonArgs = []byte(modifiedArgs)\n  }\n  return nil, nil\n})\n</code></pre> <p>\u4ee5\u4e0a\u793a\u4f8b\u4e0e <code>examples/callbacks</code> \u53ef\u8fd0\u884c\u793a\u4f8b\u4fdd\u6301\u4e00\u81f4\u3002</p>"},{"location":"zh/callbacks/#_2","title":"\u8fd0\u884c\u793a\u4f8b","text":"<pre><code>cd examples/callbacks\nexport OPENAI_API_KEY=\"your-api-key\"\n\n# \u57fa\u672c\u8fd0\u884c\ngo run .\n\n# \u6307\u5b9a\u6a21\u578b\ngo run . -model gpt-4o-mini\n\n# \u5173\u95ed\u6d41\u5f0f\ngo run . -streaming=false\n</code></pre> <p>\u53ef\u5728\u65e5\u5fd7\u4e2d\u89c2\u5bdf Before/After \u56de\u8c03\u3001\u53c2\u6570\u4fee\u6539\u4e0e\u5de5\u5177\u8fd4\u56de\u4fe1\u606f\u3002</p>"},{"location":"zh/custom-agent/","title":"\u81ea\u5b9a\u4e49 Agent","text":"<p>\u5f53\u4f60\u4e0d\u60f3\u4e00\u5f00\u59cb\u5c31\u4e0a Graph \u6216\u591a Agent \u7f16\u6392\uff0c\u53c8\u9700\u8981\u628a LLM \u80fd\u529b\u201c\u5d4c\u5165\u5230\u201d\u5df2\u6709\u7684\u4e1a\u52a1\u6d41\u7a0b\u91cc\u65f6\uff0c\u53ef\u4ee5\u76f4\u63a5\u5b9e\u73b0 <code>agent.Agent</code> \u63a5\u53e3\uff0c\u81ea\u5df1\u638c\u63a7\u5206\u652f\u4e0e\u6d41\u7a0b\u3002</p> <p>\u672c\u6587\u5c55\u793a\u4e00\u4e2a\u6700\u5c0f\u53ef\u7528\u7684\u201c\u610f\u56fe\u5206\u6d41\u201d\u81ea\u5b9a\u4e49 Agent\uff1a</p> <ul> <li>\u5148\u7528 LLM \u505a\u610f\u56fe\u8bc6\u522b\uff1a<code>chitchat</code> \u6216 <code>task</code></li> <li>\u5982\u679c\u662f\u95f2\u804a\uff1a\u76f4\u63a5\u5bf9\u8bdd\u56de\u590d</li> <li>\u5982\u679c\u662f\u4efb\u52a1\uff1a\u7ed9\u51fa 3\u20135 \u6b65\u7684\u6267\u884c\u8ba1\u5212\uff08\u771f\u5b9e\u4e1a\u52a1\u91cc\u53ef\u7ee7\u7eed\u4e32\u5de5\u5177\u6216\u4e0b\u6e38\u903b\u8f91\uff09</li> </ul>"},{"location":"zh/custom-agent/#agent_1","title":"\u4f55\u65f6\u9009\u62e9\u81ea\u5b9a\u4e49 Agent","text":"<ul> <li>\u4e1a\u52a1\u6d41\u7a0b\u7b80\u5355\u4f46\u9700\u8981\u7cbe\u7ec6\u63a7\u5236\u5206\u652f\u3001\u6821\u9a8c\u3001\u515c\u5e95\u7b49</li> <li>\u4e0d\u9700\u8981\u53ef\u89c6\u5316\u7f16\u6392\u548c\u590d\u6742\u7f16\u961f\u534f\u4f5c\uff08\u540e\u7eed\u518d\u6f14\u8fdb\u5230 Chain/Parallel/Graph \u4e5f\u5f88\u81ea\u7136\uff09</li> </ul>"},{"location":"zh/custom-agent/#_1","title":"\u5b9e\u73b0\u8981\u70b9","text":"<p>\u5fc5\u987b\u5b9e\u73b0\u4ee5\u4e0b\u65b9\u6cd5\uff1a</p> <ul> <li><code>Run(ctx, *Invocation) (&lt;-chan *event.Event, error)</code>: \u6267\u884c\u4e1a\u52a1\u903b\u8f91\uff0c\u4ea7\u51fa\u4e8b\u4ef6\u6d41\uff08\u63a8\u8350\u8f6c\u53d1\u6a21\u578b\u6d41\u5f0f\u54cd\u5e94\u5230\u4e8b\u4ef6\uff09</li> <li><code>Tools() []tool.Tool</code>: \u8fd4\u56de\u53ef\u7528\u5de5\u5177\uff08\u65e0\u5de5\u5177\u53ef\u4ee5\u8fd4\u56de\u7a7a\u5207\u7247\uff09</li> <li><code>Info() Info</code>: \u8fd4\u56de Agent \u540d\u79f0\u4e0e\u63cf\u8ff0</li> <li><code>SubAgents()/FindSubAgent()</code>: \u65e0\u5b50 Agent \u8fd4\u56de\u7a7a/<code>nil</code></li> </ul> <p>\u6838\u5fc3\u6a21\u5f0f\uff1a</p> <p>1) \u4f7f\u7528 <code>invocation.Message</code> \u4f5c\u4e3a\u7528\u6237\u8f93\u5165</p> <p>2) \u901a\u8fc7 <code>invocation</code> \u643a\u5e26\u7684\u4e0a\u4e0b\u6587\uff08Session\u3001Callbacks\u3001Artifact \u7b49\uff09\u5171\u4eab\u6846\u67b6\u80fd\u529b</p> <p>3) \u8c03\u7528 <code>model.Model.GenerateContent(ctx, *model.Request)</code> \u83b7\u53d6\u6d41\u5f0f\u54cd\u5e94\uff1b\u7528 <code>event.NewResponseEvent(...)</code> \u9010\u6761\u8f6c\u53d1</p>"},{"location":"zh/custom-agent/#_2","title":"\u4ee3\u7801\u793a\u4f8b","text":"<p>\u5b8c\u6574\u793a\u4f8b\u89c1\uff1a<code>examples/customagent</code></p> <p>\u5173\u952e\u7247\u6bb5\uff08\u7b80\u5316\u7248\uff09\uff1a</p> <pre><code>type SimpleIntentAgent struct {\n    name        string\n    description string\n    model       model.Model\n}\n\nfunc (a *SimpleIntentAgent) Run(ctx context.Context, inv *agent.Invocation) (&lt;-chan *event.Event, error) {\n    out := make(chan *event.Event, 64)\n    go func() {\n        defer close(out)\n        intent := a.classifyIntent(ctx, inv) // chitchat | task\n        if intent == \"task\" {\n            a.replyTaskPlan(ctx, inv, out)\n        } else {\n            a.replyChitChat(ctx, inv, out)\n        }\n    }()\n    return out, nil\n}\n\nfunc (a *SimpleIntentAgent) replyChitChat(ctx context.Context, inv *agent.Invocation, out chan&lt;- *event.Event) {\n    req := &amp;model.Request{\n        Messages: []model.Message{\n            model.NewSystemMessage(\"Be concise and friendly.\"),\n            inv.Message,\n        },\n        GenerationConfig: model.GenerationConfig{Stream: true},\n    }\n    rspCh, _ := a.model.GenerateContent(ctx, req)\n    for rsp := range rspCh {\n        out &lt;- event.NewResponseEvent(inv.InvocationID, a.name, rsp)\n    }\n}\n</code></pre>"},{"location":"zh/custom-agent/#runner","title":"\u4e0e Runner \u914d\u5408","text":"<p>\u867d\u7136\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528 Agent \u63a5\u53e3\uff0c\u4f46\u63a8\u8350\u7528 <code>Runner</code> \u6765\u6267\u884c\uff0c\u5b83\u4f1a\u81ea\u52a8\u7ba1\u7406\u4f1a\u8bdd\u4e0e\u4e8b\u4ef6\u5165\u5e93\uff0c\u63a5\u53e3\u4e5f\u66f4\u53cb\u597d\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>// \u6784\u9020\u6a21\u578b\u4e0e\u81ea\u5b9a\u4e49 Agent\nm := openai.New(\"deepseek-chat\")\nag := NewSimpleIntentAgent(\"biz-agent\", \"intent branching\", m)\n\n// \u7528 Runner \u6267\u884c\nr := runner.NewRunner(\"customagent-app\", ag)\nch, err := r.Run(ctx, \"user-001\", \"session-001\", model.NewUserMessage(\"\u4f60\u597d\uff0c\u968f\u4fbf\u804a\u804a\"))\n// \u5904\u7406\u4e8b\u4ef6\u6d41...\n</code></pre>"},{"location":"zh/custom-agent/#_3","title":"\u8fd0\u884c\u793a\u4f8b\uff08\u4ea4\u4e92\u5f0f\uff09","text":"<pre><code>cd examples/customagent\nexport OPENAI_API_KEY=\"your_api_key\"\ngo run . -model deepseek-chat\n\n# \u8fdb\u5165\u4ea4\u4e92\u540e\u53ef\u4f7f\u7528\u547d\u4ee4\uff1a\n# /history  \u663e\u793a\u5bf9\u8bdd\u5386\u53f2\uff08\u901a\u8fc7\u63d0\u793a\uff09\n# /new      \u5f00\u542f\u65b0\u4f1a\u8bdd\n# /exit     \u9000\u51fa\n</code></pre>"},{"location":"zh/custom-agent/#_4","title":"\u6269\u5c55\u5efa\u8bae","text":"<ul> <li>\u5f15\u5165\u5de5\u5177\uff1a\u8fd4\u56de <code>[]tool.Tool</code>\uff0c\u5982 <code>function.NewFunctionTool(...)</code> \u4e32\u63a5\u6570\u636e\u5e93/HTTP/\u5185\u90e8\u670d\u52a1</li> <li>\u589e\u52a0\u6821\u9a8c\uff1a\u5728\u5206\u652f\u524d\u5148\u505a\u53c2\u6570\u6821\u9a8c\u3001\u98ce\u63a7\u3001\u5f00\u5173\u63a7\u5236</li> <li>\u6e10\u8fdb\u6f14\u8fdb\uff1a\u5f53 if-else \u8fc7\u591a\u6216\u9700\u8981\u534f\u4f5c\u65f6\uff0c\u5e73\u6ed1\u5207\u6362\u5230 <code>ChainAgent</code>/<code>ParallelAgent</code> \u6216 <code>Graph</code></li> </ul>"},{"location":"zh/debugserver/","title":"Debug Server \u4f7f\u7528\u6307\u5357","text":""},{"location":"zh/debugserver/#_1","title":"\u6982\u8ff0","text":"<p>Debug Server \u662f trpc-agent-go \u6846\u67b6\u63d0\u4f9b\u7684\u4e00\u4e2a\u8c03\u8bd5\u5de5\u5177\u3002  \u5b83\u53ef\u4ee5\u5e2e\u52a9\u5f00\u53d1\u8005\u5feb\u901f\u6d4b\u8bd5\u548c\u8c03\u8bd5 Agent \u529f\u80fd\u3002 \u5b83\u53ef\u4ee5\u548c ADK Web UI \u7ed3\u5408\uff0c\u4ece\u800c\u5141\u8bb8\u4f60\u901a\u8fc7\u53ef\u89c6\u5316\u7684\u4ea4\u4e92\u754c\u9762\u6765\u9a8c\u8bc1 Agent \u7684\u884c\u4e3a\u548c\u5de5\u5177\u8c03\u7528\u3002</p>"},{"location":"zh/debugserver/#_2","title":"\u4e3b\u8981\u529f\u80fd","text":"<ul> <li>\u53ef\u89c6\u5316\u8c03\u8bd5\u754c\u9762\uff1a\u901a\u8fc7 ADK Web UI \u63d0\u4f9b\u53cb\u597d\u7684\u56fe\u5f62\u754c\u9762</li> <li>\u5b9e\u65f6\u4ea4\u4e92\u6d4b\u8bd5\uff1a\u652f\u6301\u4e0e Agent \u8fdb\u884c\u5b9e\u65f6\u5bf9\u8bdd\u548c\u5de5\u5177\u8c03\u7528</li> <li>\u6d41\u5f0f\u54cd\u5e94\uff1a\u652f\u6301 Server-Sent Events (SSE) \u6d41\u5f0f\u54cd\u5e94</li> <li>\u4f1a\u8bdd\u7ba1\u7406\uff1a\u652f\u6301\u521b\u5efa\u548c\u7ba1\u7406\u591a\u4e2a\u5bf9\u8bdd\u4f1a\u8bdd</li> <li>\u5de5\u5177\u9a8c\u8bc1\uff1a\u53ef\u4ee5\u76f4\u89c2\u5730\u6d4b\u8bd5\u548c\u9a8c\u8bc1 Agent \u7684\u5404\u79cd\u5de5\u5177\u529f\u80fd</li> </ul>"},{"location":"zh/debugserver/#_3","title":"\u67b6\u6784\u56fe","text":"<pre><code>User Interface\n+---------------------------+\n|      ADK Web UI           |  \u2190 Access via browser: http://localhost:4200\n|        (React)            |\n+-----------+---------------+\n            | HTTP/SSE Request\n            v\n+-----------------------------+\n|     Debug Server            |  \u2190 Listening on http://localhost:8000\n|                             |\n|       API Routing           | \n|       Session Management    | \n|       CORS Handling         |\n+-----------+-----------------+\n            | Call Agent\n            v\n+---------------------------------+\n|    tRPC-Agent-Go                |\n|                                 |\n| +-------------+ +--------------+| \n| | LLM Agent   | | Tool System  ||\n| | \u2022 Model Call| | \u2022 Calculator ||\n| | \u2022 Streaming | | \u2022 Time Query ||\n| | \u2022 Prompting | | \u2022 Custom Tool||\n| +-------------+ +--------------+|\n+-----------+---------------------+\n            | External Call\n            v\n+----------------------------------+\n|     External Services            |\n|                                  |\n| \u2022 LLM API   (OpenAI/DeepSeek)    | \n| \u2022 Database   (Redis/MySQL)       | \n| \u2022 Other API  (Search/File System)|\n+----------------------------------+\n</code></pre> <p>\u6570\u636e\u6d41\u5411\uff1a</p> <pre><code>\u7528\u6237\u8f93\u5165 \u2192 Web UI \u2192 Debug Server \u2192 Agent \u2192 LLM/\u5de5\u5177 \u2192 \u6d41\u5f0f\u54cd\u5e94 \u2192 Web UI\n</code></pre>"},{"location":"zh/debugserver/#_4","title":"\u4f7f\u7528\u6b65\u9aa4","text":"<ol> <li>\u521b\u5efa Agent\u3002</li> <li>\u5c06 Agent \u4f5c\u4e3a\u6784\u9020\u53c2\u6570\uff0c\u521b\u5efa Debug Server\uff0cDebug Server \u672c\u8eab\u80fd\u63d0\u4f9b http Handler \u51fd\u6570\u3002</li> <li>\u521b\u5efa tRPC HTTP \u670d\u52a1\uff0c\u5c06 Debug Server \u7684 http Handler \u6ce8\u518c\u4e3a tRPC HTTP \u670d\u52a1\u7684\u5904\u7406\u51fd\u6570\u3002</li> <li>\u542f\u52a8 tRPC HTTP \u670d\u52a1\u4f5c\u4e3a\u540e\u7aef\u670d\u52a1\u3002</li> <li>\u5b89\u88c5 ADK Web UI\uff0c\u65b9\u4fbf\u524d\u7aef\u53ef\u89c6\u5316\u8c03\u8bd5</li> <li>\u542f\u52a8 ADK Web UI\uff0c\u6307\u5b9a tRPC HTTP \u670d\u52a1\u4e3a\u540e\u7aef\u670d\u52a1</li> <li>\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u524d\u7aef\uff0c\u76f4\u63a5\u901a\u8fc7 ADK Web UI \u8f93\u5165\u7528\u6237\u8bf7\u6c42\uff0c\u8fdb\u884c\u8c03\u8bd5\uff0c\u524d\u7aef\u9875\u9762\u4f1a\u5c55\u793a\u53ef\u89c2\u6d4b\u6570\u636e\u3002\u3002</li> </ol> <p>\u5177\u4f53\u53ef\u4ee5\u8fd0\u884c\u7684\u4f8b\u5b50\u89c1examples/debugserver</p>"},{"location":"zh/debugserver/#_5","title":"\u8c03\u8bd5\u7ed3\u679c\u5c55\u793a","text":"<p>\u901a\u8fc7 ADK Web UI\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u6d4b\u8bd5\u8c03\u7528\u573a\u666f\uff0cWeb \u754c\u9762\u4f1a\u663e\u793a event \u548c trace \u4fe1\u606f\u3002 \u4f8b\u5982\u4e0b\u9762\u5c55\u793a\u4e86\u8c03\u8bd5\u4e00\u4e2a\u5177\u5907\u8ba1\u7b97\u5668\u529f\u80fd\u7684 agent \u7684\u60c5\u51b5\u3002</p> <p></p> <p></p>"},{"location":"zh/ecosystem/","title":"tRPC-Agent-Go \u751f\u6001\u5efa\u8bbe\u6307\u5357","text":"<p>\u672c\u6587\u6863\u5206\u6790 tRPC-Agent-Go \u6846\u67b6\u4e2d\u9700\u8981\u751f\u6001\u5efa\u8bbe\u7684\u6a21\u5757\uff0c\u8bf4\u660e\u9700\u8981\u5b9e\u73b0\u7684\u63a5\u53e3\uff0c\u5e76\u63d0\u4f9b\u8d21\u732e\u6307\u5bfc\u3002</p> <p>\u6ce8\u610f\uff1a\u6240\u6709\u5171\u5efa\u7ec4\u4ef6\u90fd\u76f4\u63a5\u8d21\u732e\u5230 GitHub \u5f00\u6e90\u4ed3\u5e93\u7684\u5bf9\u5e94\u76ee\u5f55\u4e0b\uff0c\u6bd4\u5982 <code>model/somemodel</code>\u3001<code>tool/sometool</code>\u3001<code>agent/someagent</code> \u7b49\u3002</p> <p>\u8d21\u732e\u65f6\u5728\u5bf9\u5e94\u7684\u8d21\u732e\u6a21\u5757\u76ee\u5f55\u4e0b\u65b0\u5efa\u5408\u7406\u547d\u540d\u7684\u5b50\u6587\u4ef6\u5939\uff0c\u7136\u540e\u5b9e\u73b0\u5bf9\u5e94\u6a21\u5757\u63a5\u53e3\uff0c\u5e76\u63d0\u4f9b\u4e30\u5bcc\u7684\u6d4b\u8bd5\u7528\u4f8b\u4ee5\u53ca example \u793a\u4f8b\u3002</p>"},{"location":"zh/ecosystem/#_1","title":"\u751f\u6001\u5efa\u8bbe\u6a21\u5757\u5206\u6790","text":""},{"location":"zh/ecosystem/#1-agent","title":"1. Agent \u751f\u6001\u5316","text":"<p>\u76ee\u6807\uff1a \u5c01\u88c5\u548c\u9002\u914d\u7b2c\u4e09\u65b9 Agent \u6846\u67b6</p> <p>\u63a5\u53e3\u5b9a\u4e49\uff1a agent.Agent</p> <p>\u73b0\u6709\u5b9e\u73b0\u53c2\u8003\uff1a LLMAgent</p> <p>\u5b9e\u73b0\u6ce8\u610f\u4e8b\u9879\uff1a</p> <ul> <li><code>Run</code> \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u4e8b\u4ef6\u901a\u9053\uff0c\u652f\u6301\u6d41\u5f0f\u54cd\u5e94</li> <li><code>Tools</code> \u65b9\u6cd5\u8fd4\u56de Agent \u53ef\u7528\u7684\u5de5\u5177\u5217\u8868</li> <li><code>Info</code> \u65b9\u6cd5\u63d0\u4f9b Agent \u7684\u57fa\u672c\u4fe1\u606f</li> <li><code>SubAgents</code> \u548c <code>FindSubAgent</code> \u652f\u6301 Agent \u7ec4\u5408\u6a21\u5f0f</li> <li>\u53c2\u8003 LLMAgent \u5b9e\u73b0\uff0c\u4e86\u89e3\u4e8b\u4ef6\u5904\u7406\u548c\u9519\u8bef\u5904\u7406\u673a\u5236</li> </ul> <p>\u5b9e\u73b0\u793a\u4f8b\uff1a</p> <pre><code>package langchain\n\nimport (\n    \"context\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent\"\n    \"trpc.group/trpc-go/trpc-agent-go/event\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n)\n\ntype LangChainAdapter struct {\n    config *Config\n    client *langchain.Client\n}\n\nfunc New(config *Config) (agent.Agent, error) {\n    client := langchain.NewClient(config.Endpoint, config.APIKey)\n\n    return &amp;LangChainAdapter{\n        config: config,\n        client: client,\n    }, nil\n}\n\nfunc (a *LangChainAdapter) Run(ctx context.Context, invocation *agent.Invocation) (&lt;-chan *event.Event, error) {\n    events := make(chan *event.Event)\n\n    go func() {\n        defer close(events)\n\n        response, err := a.client.Call(ctx, invocation.Messages)\n        if err != nil {\n            events &lt;- &amp;event.Event{\n                Type: event.TypeError,\n                Error: err,\n            }\n            return\n        }\n\n        events &lt;- &amp;event.Event{\n            Type: event.TypeResponse,\n            Response: &amp;model.Response{\n                Content: response.Content,\n            },\n        }\n    }()\n\n    return events, nil\n}\n\nfunc (a *LangChainAdapter) Tools() []tool.Tool {\n    return a.config.Tools\n}\n\nfunc (a *LangChainAdapter) Info() agent.Info {\n    return agent.Info{\n        Name:        \"langchain-adapter\",\n        Description: \"LangChain framework adapter\",\n    }\n}\n\nfunc (a *LangChainAdapter) SubAgents() []agent.Agent {\n    return nil\n}\n\nfunc (a *LangChainAdapter) FindSubAgent(name string) agent.Agent {\n    return nil\n}\n</code></pre> <p>\u53ef\u4ee5\u96c6\u6210\u5f00\u6e90\u7ec4\u4ef6\u793a\u4f8b\uff1a</p> <ul> <li>LangChain \u9002\u914d\u5668</li> <li>LangGraph \u9002\u914d\u5668</li> </ul> <p>\u8d21\u732e\u65b9\u5f0f\uff1a</p> <ul> <li>\u5728\u5bf9\u5e94\u76ee\u5f55\u4e0b\u521b\u5efa\u7ec4\u4ef6\uff08\u65b0\u5efa\u4e00\u4e2a\u5bf9\u5e94\u7ec4\u4ef6\u540d\u79f0\u7684\u5b50\u76ee\u5f55\uff09</li> <li>\u76f4\u63a5\u8d21\u732e\u5230 <code>https://github.com/trpc-group/trpc-agent-go/agent/</code></li> </ul>"},{"location":"zh/ecosystem/#2-model","title":"2. \u6a21\u578b\uff08Model\uff09\u751f\u6001\u5316","text":"<p>\u76ee\u6807\uff1a \u652f\u6301\u66f4\u591a\u6a21\u578b\u63d0\u4f9b\u5546</p> <p>\u63a5\u53e3\u5b9a\u4e49\uff1a model.Model</p> <p>\u73b0\u6709\u5b9e\u73b0\u53c2\u8003\uff1a OpenAI Model</p> <p>\u5b9e\u73b0\u6ce8\u610f\u4e8b\u9879\uff1a</p> <ul> <li><code>GenerateContent</code> \u65b9\u6cd5\u5fc5\u987b\u652f\u6301\u6d41\u5f0f\u54cd\u5e94\uff0c\u8fd4\u56de\u4e8b\u4ef6\u901a\u9053</li> <li>\u533a\u5206\u7cfb\u7edf\u7ea7\u9519\u8bef\uff08\u8fd4\u56de error\uff09\u548c API \u7ea7\u9519\u8bef\uff08Response.Error\uff09</li> <li>\u5b9e\u73b0 <code>Info</code> \u65b9\u6cd5\u63d0\u4f9b\u6a21\u578b\u57fa\u672c\u4fe1\u606f</li> <li>\u53c2\u8003 OpenAI \u5b9e\u73b0\uff0c\u4e86\u89e3\u8bf7\u6c42\u6784\u5efa\u548c\u54cd\u5e94\u5904\u7406</li> <li>\u652f\u6301\u4e0a\u4e0b\u6587\u53d6\u6d88\u548c\u8d85\u65f6\u63a7\u5236</li> </ul> <p>\u5b9e\u73b0\u793a\u4f8b\uff1a</p> <pre><code>package gemini\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n)\n\ntype GeminiModel struct {\n    config *Config\n    client *gemini.Client\n}\n\nfunc New(config *Config) (model.Model, error) {\n    client := gemini.NewClient(config.APIKey)\n\n    return &amp;GeminiModel{\n        config: config,\n        client: client,\n    }, nil\n}\n\nfunc (g *GeminiModel) GenerateContent(ctx context.Context, request *model.Request) (&lt;-chan *model.Response, error) {\n    if request == nil {\n        return nil, fmt.Errorf(\"request cannot be nil\")\n    }\n\n    responses := make(chan *model.Response)\n\n    go func() {\n        defer close(responses)\n\n        // \u8c03\u7528 Gemini API\n        stream, err := g.client.GenerateContent(ctx, request.Messages)\n        if err != nil {\n            responses &lt;- &amp;model.Response{\n                Error: &amp;model.Error{\n                    Message: err.Error(),\n                },\n            }\n            return\n        }\n\n        for chunk := range stream {\n            responses &lt;- &amp;model.Response{\n                Content: chunk.Content,\n            }\n        }\n    }()\n\n    return responses, nil\n}\n\nfunc (g *GeminiModel) Info() model.Info {\n    return model.Info{\n        Name: \"gemini-pro\",\n    }\n}\n</code></pre> <p>\u53ef\u4ee5\u96c6\u6210\u7684\u5f00\u6e90\u7ec4\u4ef6\u793a\u4f8b\uff1a</p> <ul> <li>Google Gemini \u6a21\u578b\u652f\u6301</li> <li>Anthropic Claude \u6a21\u578b\u652f\u6301</li> <li>Ollama \u672c\u5730\u6a21\u578b\u652f\u6301</li> </ul> <p>\u8d21\u732e\u65b9\u5f0f\uff1a</p> <ul> <li>\u5728\u5bf9\u5e94\u76ee\u5f55\u4e0b\u521b\u5efa\u7ec4\u4ef6\uff08\u65b0\u5efa\u4e00\u4e2a\u5bf9\u5e94\u7ec4\u4ef6\u540d\u79f0\u7684\u5b50\u76ee\u5f55\uff09</li> <li>\u76f4\u63a5\u8d21\u732e\u5230 <code>https://github.com/trpc-group/trpc-agent-go/model/</code></li> </ul>"},{"location":"zh/ecosystem/#3-tool","title":"3. \u5de5\u5177\uff08Tool\uff09\u751f\u6001\u5316","text":"<p>\u76ee\u6807\uff1a \u96c6\u6210\u66f4\u591a\u7b2c\u4e09\u65b9\u5de5\u5177</p> <p>\u63a5\u53e3\u5b9a\u4e49\uff1a </p> <ul> <li>tool.Tool - \u5355\u4e2a\u5de5\u5177\u63a5\u53e3</li> <li>tool.ToolSet - \u5de5\u5177\u96c6\u5408\u63a5\u53e3</li> </ul> <p>\u73b0\u6709\u5b9e\u73b0\u53c2\u8003\uff1a DuckDuckGo Tool</p> <p>\u5b9e\u73b0\u6ce8\u610f\u4e8b\u9879\uff1a</p> <p>\u5355\u4e2a\u5de5\u5177\u5b9e\u73b0\uff1a</p> <ul> <li><code>Declaration</code> \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u5b8c\u6574\u7684\u5de5\u5177\u5143\u6570\u636e</li> <li><code>Call</code> \u65b9\u6cd5\u63a5\u6536 JSON \u683c\u5f0f\u7684\u53c2\u6570\uff0c\u8fd4\u56de\u4efb\u610f\u7c7b\u578b\u7ed3\u679c</li> <li>\u4f7f\u7528 JSON Schema \u5b9a\u4e49\u8f93\u5165\u8f93\u51fa\u683c\u5f0f</li> <li>\u53c2\u8003 DuckDuckGo \u5b9e\u73b0\uff0c\u4e86\u89e3\u5de5\u5177\u8c03\u7528\u548c\u9519\u8bef\u5904\u7406</li> <li>\u652f\u6301\u4e0a\u4e0b\u6587\u53d6\u6d88\u548c\u8d85\u65f6\u63a7\u5236</li> </ul> <p>\u5de5\u5177\u96c6\u5408\u5b9e\u73b0\uff1a</p> <ul> <li><code>Tools</code> \u65b9\u6cd5\u6839\u636e\u4e0a\u4e0b\u6587\u8fd4\u56de\u53ef\u7528\u7684\u5de5\u5177\u5217\u8868</li> <li><code>Close</code> \u65b9\u6cd5\u91ca\u653e\u5de5\u5177\u96c6\u5408\u6301\u6709\u7684\u8d44\u6e90</li> <li>\u652f\u6301\u52a8\u6001\u5de5\u5177\u52a0\u8f7d\u548c\u914d\u7f6e</li> <li>\u5b9e\u73b0\u5de5\u5177\u7684\u751f\u547d\u5468\u671f\u7ba1\u7406</li> </ul> <p>\u5b9e\u73b0\u793a\u4f8b\uff1a</p> <p>\u5355\u4e2a\u5de5\u5177\u5b9e\u73b0\uff1a</p> <pre><code>package weather\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"net/http\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n)\n\ntype WeatherTool struct {\n    apiKey string\n    client *http.Client\n}\n\nfunc New(apiKey string) tool.CallableTool {\n    return &amp;WeatherTool{\n        apiKey: apiKey,\n        client: &amp;http.Client{},\n    }\n}\n\nfunc (w *WeatherTool) Declaration() *tool.Declaration {\n    return &amp;tool.Declaration{\n        Name:        \"get_weather\",\n        Description: \"Get current weather information for a location\",\n        InputSchema: &amp;tool.Schema{\n            Type: \"object\",\n            Properties: map[string]*tool.Schema{\n                \"location\": {\n                    Type:        \"string\",\n                    Description: \"City name or coordinates\",\n                },\n            },\n            Required: []string{\"location\"},\n        },\n        OutputSchema: &amp;tool.Schema{\n            Type: \"object\",\n            Properties: map[string]*tool.Schema{\n                \"temperature\": {Type: \"number\"},\n                \"condition\":   {Type: \"string\"},\n                \"humidity\":    {Type: \"number\"},\n            },\n        },\n    }\n}\n\nfunc (w *WeatherTool) Call(ctx context.Context, jsonArgs []byte) (any, error) {\n    var args struct {\n        Location string `json:\"location\"`\n    }\n\n    if err := json.Unmarshal(jsonArgs, &amp;args); err != nil {\n        return nil, fmt.Errorf(\"invalid arguments: %w\", err)\n    }\n\n    url := fmt.Sprintf(\"https://api.weatherapi.com/v1/current.json?key=%s&amp;q=%s\", w.apiKey, args.Location)\n\n    req, err := http.NewRequestWithContext(ctx, \"GET\", url, nil)\n    if err != nil {\n        return nil, err\n    }\n\n    resp, err := w.client.Do(req)\n    if err != nil {\n        return nil, err\n    }\n    defer resp.Body.Close()\n\n    var weatherData map[string]interface{}\n    if err := json.NewDecoder(resp.Body).Decode(&amp;weatherData); err != nil {\n        return nil, err\n    }\n\n    return weatherData, nil\n}\n</code></pre> <p>\u5de5\u5177\u96c6\u5408\u5b9e\u73b0\uff1a</p> <pre><code>package apitools\n\nimport (\n    \"context\"\n    \"sync\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n)\n\ntype APIToolSet struct {\n    tools map[string]tool.CallableTool\n    mu    sync.RWMutex\n}\n\nfunc New() *APIToolSet {\n    return &amp;APIToolSet{\n        tools: make(map[string]tool.CallableTool),\n    }\n}\n\nfunc (a *APIToolSet) AddTool(name string, tool tool.CallableTool) {\n    a.mu.Lock()\n    defer a.mu.Unlock()\n    a.tools[name] = tool\n}\n\nfunc (a *APIToolSet) RemoveTool(name string) {\n    a.mu.Lock()\n    defer a.mu.Unlock()\n    delete(a.tools, name)\n}\n\nfunc (a *APIToolSet) Tools(ctx context.Context) []tool.CallableTool {\n    a.mu.RLock()\n    defer a.mu.RUnlock()\n\n    var result []tool.CallableTool\n    for _, t := range a.tools {\n        result = append(result, t)\n    }\n    return result\n}\n\nfunc (a *APIToolSet) Close() error {\n    a.mu.Lock()\n    defer a.mu.Unlock()\n\n    // \u6e05\u7406\u8d44\u6e90\n    a.tools = make(map[string]tool.CallableTool)\n    return nil\n}\n</code></pre> <p>\u53ef\u4ee5\u96c6\u6210\u7684\u5f00\u6e90\u7ec4\u4ef6\u793a\u4f8b\uff1a</p> <ul> <li>\u641c\u7d22\u5f15\u64ce\u5de5\u5177\uff08Google\u3001Bing\uff09</li> <li>\u5929\u6c14\u67e5\u8be2\u5de5\u5177</li> <li>\u8ba1\u7b97\u5668\u5de5\u5177</li> <li>\u6587\u4ef6\u64cd\u4f5c\u5de5\u5177</li> <li>API \u5de5\u5177\u96c6\u5408\uff08REST API \u5de5\u5177\u5305\uff09</li> <li>\u6570\u636e\u5e93\u64cd\u4f5c\u5de5\u5177\u96c6\u5408</li> <li>\u6587\u4ef6\u5904\u7406\u5de5\u5177\u96c6\u5408</li> </ul> <p>\u8d21\u732e\u65b9\u5f0f\uff1a</p> <ul> <li>\u5728\u5bf9\u5e94\u76ee\u5f55\u4e0b\u521b\u5efa\u7ec4\u4ef6\uff08\u65b0\u5efa\u4e00\u4e2a\u5bf9\u5e94\u7ec4\u4ef6\u540d\u79f0\u7684\u5b50\u76ee\u5f55\uff09</li> <li>\u76f4\u63a5\u8d21\u732e\u5230 <code>https://github.com/trpc-group/trpc-agent-go/tool/</code></li> </ul>"},{"location":"zh/ecosystem/#4-knowledge","title":"4. \u77e5\u8bc6\u5e93\uff08Knowledge\uff09\u751f\u6001\u5316","text":"<p>\u76ee\u6807\uff1a \u96c6\u6210\u6210\u719f\u7684 RAG \u7ec4\u4ef6</p> <p>\u63a5\u53e3\u5b9a\u4e49\uff1a knowledge.Knowledge</p> <p>\u73b0\u6709\u5b9e\u73b0\u53c2\u8003\uff1a </p> <ul> <li>InMemory Knowledge</li> </ul> <p>\u5b9e\u73b0\u6ce8\u610f\u4e8b\u9879\uff1a</p> <ul> <li><code>Search</code> \u65b9\u6cd5\u652f\u6301\u4e0a\u4e0b\u6587\u548c\u5386\u53f2\u8bb0\u5f55</li> <li>\u8fd4\u56de\u76f8\u5173\u6587\u6863\u548c\u76f8\u5173\u6027\u8bc4\u5206</li> <li>\u652f\u6301\u641c\u7d22\u53c2\u6570\u548c\u7ed3\u679c\u9650\u5236</li> <li>\u53c2\u8003 InMemory \u5b9e\u73b0\uff0c\u4e86\u89e3\u641c\u7d22\u903b\u8f91\u548c\u7ed3\u679c\u5904\u7406</li> <li>\u652f\u6301\u5411\u91cf\u5316\u641c\u7d22\u548c\u8bed\u4e49\u5339\u914d</li> </ul> <p>\u5b9e\u73b0\u793a\u4f8b\uff1a</p> <pre><code>package weaviate\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge\"\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge/document\"\n)\n\ntype WeaviateKnowledge struct {\n    config *Config\n    client *weaviate.Client\n}\n\nfunc New(config *Config) (knowledge.Knowledge, error) {\n    client := weaviate.NewClient(config.Endpoint, config.APIKey)\n\n    return &amp;WeaviateKnowledge{\n        config: config,\n        client: client,\n    }, nil\n}\n\nfunc (w *WeaviateKnowledge) Search(ctx context.Context, req *knowledge.SearchRequest) (*knowledge.SearchResult, error) {\n    if req.Query == \"\" {\n        return nil, fmt.Errorf(\"query cannot be empty\")\n    }\n\n    // \u6784\u5efa\u641c\u7d22\u67e5\u8be2\n    query := w.buildQuery(req)\n\n    // \u6267\u884c\u5411\u91cf\u641c\u7d22\n    results, err := w.client.Search(ctx, query)\n    if err != nil {\n        return nil, err\n    }\n\n    if len(results) == 0 {\n        return nil, fmt.Errorf(\"no results found\")\n    }\n\n    // \u8fd4\u56de\u6700\u4f73\u5339\u914d\u7ed3\u679c\n    bestResult := results[0]\n\n    return &amp;knowledge.SearchResult{\n        Document: &amp;document.Document{\n            ID:      bestResult.ID,\n            Content: bestResult.Content,\n            Metadata: bestResult.Metadata,\n        },\n        Score: bestResult.Score,\n        Text:  bestResult.Content,\n    }, nil\n}\n\nfunc (w *WeaviateKnowledge) buildQuery(req *knowledge.SearchRequest) *weaviate.Query {\n    // \u6784\u5efa Weaviate \u67e5\u8be2\u903b\u8f91\n    return &amp;weaviate.Query{\n        Query: req.Query,\n        Limit: req.MaxResults,\n        Filter: w.buildFilter(req),\n    }\n}\n</code></pre> <p>\u53ef\u4ee5\u96c6\u6210\u7684\u5f00\u6e90\u7ec4\u4ef6\u793a\u4f8b\uff1a</p> <ul> <li>Weaviate \u5411\u91cf\u6570\u636e\u5e93</li> <li>Pinecone \u5411\u91cf\u6570\u636e\u5e93</li> <li>Qdrant \u5411\u91cf\u6570\u636e\u5e93</li> </ul> <p>\u8d21\u732e\u65b9\u5f0f\uff1a</p> <ul> <li>\u5728\u5bf9\u5e94\u76ee\u5f55\u4e0b\u521b\u5efa\u7ec4\u4ef6\uff08\u65b0\u5efa\u4e00\u4e2a\u5bf9\u5e94\u7ec4\u4ef6\u540d\u79f0\u7684\u5b50\u76ee\u5f55\uff09</li> <li>\u76f4\u63a5\u8d21\u732e\u5230 <code>https://github.com/trpc-group/trpc-agent-go/knowledge/</code></li> </ul>"},{"location":"zh/ecosystem/#5-session","title":"5. Session \u751f\u6001\u5316","text":"<p>\u76ee\u6807\uff1a \u652f\u6301\u591a\u79cd\u4f1a\u8bdd\u5b58\u50a8\u540e\u7aef\uff0c\u7ba1\u7406\u7528\u6237\u4f1a\u8bdd\u72b6\u6001\u548c\u4e8b\u4ef6</p> <p>\u63a5\u53e3\u5b9a\u4e49\uff1a session.Service</p> <p>\u73b0\u6709\u5b9e\u73b0\u53c2\u8003\uff1a</p> <ul> <li>InMemory Session</li> <li>Redis Session</li> </ul> <p>\u5b9e\u73b0\u6ce8\u610f\u4e8b\u9879\uff1a</p> <ul> <li>\u5b9e\u73b0\u5b8c\u6574\u7684 Session \u751f\u547d\u5468\u671f\u7ba1\u7406\uff08\u521b\u5efa\u3001\u83b7\u53d6\u3001\u5220\u9664\u3001\u5217\u8868\uff09</li> <li>\u652f\u6301\u72b6\u6001\u5b58\u50a8\u548c\u4e8b\u4ef6\u8bb0\u5f55</li> <li>\u5b9e\u73b0\u8fde\u63a5\u6c60\u548c\u9519\u8bef\u5904\u7406</li> <li>\u652f\u6301\u4e8b\u52a1\u548c\u4e00\u81f4\u6027</li> <li>\u53ef\u4ee5\u590d\u7528 storage \u6a21\u5757\u7684\u5ba2\u6237\u7aef</li> <li>\u53c2\u8003 InMemory \u548c Redis \u5b9e\u73b0\uff0c\u4e86\u89e3 Session \u7ba1\u7406\u903b\u8f91</li> </ul> <p>\u5b9e\u73b0\u793a\u4f8b\uff1a</p> <pre><code>package postgresql\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"encoding/json\"\n    \"fmt\"\n    \"time\"\n    \"trpc.group/trpc-go/trpc-agent-go/event\"\n    \"trpc.group/trpc-go/trpc-agent-go/session\"\n)\n\ntype PostgreSQLService struct {\n    db *sql.DB\n}\n\nfunc New(dsn string) (session.Service, error) {\n    db, err := sql.Open(\"postgres\", dsn)\n    if err != nil {\n        return nil, err\n    }\n\n    if err := db.Ping(); err != nil {\n        return nil, err\n    }\n\n    return &amp;PostgreSQLService{db: db}, nil\n}\n\nfunc (p *PostgreSQLService) CreateSession(ctx context.Context, key session.Key, state session.StateMap, options ...session.Option) (*session.Session, error) {\n    if err := key.CheckSessionKey(); err != nil {\n        return nil, err\n    }\n\n    now := time.Now()\n    session := &amp;session.Session{\n        ID:        key.SessionID,\n        AppName:   key.AppName,\n        UserID:    key.UserID,\n        State:     state,\n        Events:    []event.Event{},\n        UpdatedAt: now,\n        CreatedAt: now,\n    }\n\n    // \u63d2\u5165\u5230\u6570\u636e\u5e93\n    _, err := p.db.ExecContext(ctx, `\n        INSERT INTO sessions (id, app_name, user_id, state, created_at, updated_at)\n        VALUES ($1, $2, $3, $4, $5, $6)\n    `, session.ID, session.AppName, session.UserID, p.marshalState(state), session.CreatedAt, session.UpdatedAt)\n\n    if err != nil {\n        return nil, err\n    }\n\n    return session, nil\n}\n\nfunc (p *PostgreSQLService) GetSession(ctx context.Context, key session.Key, options ...session.Option) (*session.Session, error) {\n    if err := key.CheckSessionKey(); err != nil {\n        return nil, err\n    }\n\n    var session session.Session\n    var stateData []byte\n\n    err := p.db.QueryRowContext(ctx, `\n        SELECT id, app_name, user_id, state, created_at, updated_at\n        FROM sessions WHERE id = $1\n    `, key.SessionID).Scan(&amp;session.ID, &amp;session.AppName, &amp;session.UserID, &amp;stateData, &amp;session.CreatedAt, &amp;session.UpdatedAt)\n\n    if err != nil {\n        return nil, err\n    }\n\n    session.State = p.unmarshalState(stateData)\n\n    return &amp;session, nil\n}\n\nfunc (p *PostgreSQLService) Close() error {\n    return p.db.Close()\n}\n\nfunc (p *PostgreSQLService) marshalState(state session.StateMap) []byte {\n    data, _ := json.Marshal(state)\n    return data\n}\n\nfunc (p *PostgreSQLService) unmarshalState(data []byte) session.StateMap {\n    var state session.StateMap\n    json.Unmarshal(data, &amp;state)\n    return state\n}\n</code></pre> <p>\u53ef\u4ee5\u96c6\u6210\u7684\u5f00\u6e90\u7ec4\u4ef6\u793a\u4f8b\uff1a</p> <ul> <li>PostgreSQL \u4f1a\u8bdd\u5b58\u50a8</li> <li>MongoDB \u4f1a\u8bdd\u5b58\u50a8</li> <li>MySQL \u4f1a\u8bdd\u5b58\u50a8</li> <li>Cassandra \u4f1a\u8bdd\u5b58\u50a8</li> </ul> <p>\u8d21\u732e\u65b9\u5f0f\uff1a</p> <ul> <li>\u5728\u5bf9\u5e94\u76ee\u5f55\u4e0b\u521b\u5efa\u7ec4\u4ef6\uff08\u65b0\u5efa\u4e00\u4e2a\u5bf9\u5e94\u7ec4\u4ef6\u540d\u79f0\u7684\u5b50\u76ee\u5f55\uff09</li> <li>\u76f4\u63a5\u8d21\u732e\u5230 <code>https://github.com/trpc-group/trpc-agent-go/session/</code></li> </ul>"},{"location":"zh/ecosystem/#6-memory","title":"6. Memory \u751f\u6001\u5316","text":"<p>\u76ee\u6807\uff1a \u652f\u6301\u591a\u79cd\u8bb0\u5fc6\u5b58\u50a8\u540e\u7aef\uff0c\u7ba1\u7406\u7528\u6237\u957f\u671f\u8bb0\u5fc6\u548c\u4e2a\u6027\u5316\u4fe1\u606f</p> <p>\u63a5\u53e3\u5b9a\u4e49\uff1a memory.Service</p> <p>\u73b0\u6709\u5b9e\u73b0\u53c2\u8003\uff1a InMemory Memory</p> <p>\u5b9e\u73b0\u6ce8\u610f\u4e8b\u9879\uff1a</p> <ul> <li>\u5b9e\u73b0\u5b8c\u6574\u7684 Memory \u751f\u547d\u5468\u671f\u7ba1\u7406\uff08\u6dfb\u52a0\u3001\u66f4\u65b0\u3001\u5220\u9664\u3001\u641c\u7d22\u3001\u8bfb\u53d6\uff09</li> <li>\u652f\u6301\u8bb0\u5fc6\u4e3b\u9898\u5206\u7c7b\u548c\u641c\u7d22</li> <li>\u63d0\u4f9b\u8bb0\u5fc6\u5de5\u5177\u96c6\u6210\uff08memory_add, memory_search \u7b49\uff09</li> <li>\u5b9e\u73b0\u8fde\u63a5\u6c60\u548c\u9519\u8bef\u5904\u7406</li> <li>\u53ef\u4ee5\u590d\u7528 storage \u6a21\u5757\u7684\u5ba2\u6237\u7aef</li> <li>\u652f\u6301\u8bb0\u5fc6\u9650\u5236\u548c\u6e05\u7406\u673a\u5236</li> <li>\u53c2\u8003 InMemory \u5b9e\u73b0\uff0c\u4e86\u89e3\u8bb0\u5fc6\u7ba1\u7406\u903b\u8f91</li> </ul> <p>\u5b9e\u73b0\u793a\u4f8b\uff1a</p> <pre><code>package postgresql\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"encoding/json\"\n    \"fmt\"\n    \"time\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/memory\"\n    memorytool \"trpc.group/trpc-go/trpc-agent-go/memory/tool\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n)\n\ntype PostgreSQLMemoryService struct {\n    db *sql.DB\n    cachedTools map[string]tool.Tool\n}\n\nfunc New(dsn string) (memory.Service, error) {\n    db, err := sql.Open(\"postgres\", dsn)\n    if err != nil {\n        return nil, err\n    }\n\n    if err := db.Ping(); err != nil {\n        return nil, err\n    }\n\n    service := &amp;PostgreSQLMemoryService{\n        db: db,\n        cachedTools: make(map[string]tool.Tool),\n    }\n\n    // \u521d\u59cb\u5316\u5de5\u5177\n    service.initTools()\n\n    return service, nil\n}\n\nfunc (p *PostgreSQLMemoryService) AddMemory(ctx context.Context, userKey memory.UserKey, memoryStr string, topics []string) error {\n    if err := userKey.CheckUserKey(); err != nil {\n        return err\n    }\n\n    now := time.Now()\n    memoryID := p.generateMemoryID(memoryStr)\n\n    // \u63d2\u5165\u8bb0\u5fc6\u5230\u6570\u636e\u5e93\n    _, err := p.db.ExecContext(ctx, `\n        INSERT INTO memories (id, app_name, user_id, memory, topics, created_at, updated_at)\n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n    `, memoryID, userKey.AppName, userKey.UserID, memoryStr, p.marshalTopics(topics), now, now)\n\n    return err\n}\n\nfunc (p *PostgreSQLMemoryService) SearchMemories(ctx context.Context, userKey memory.UserKey, query string) ([]*memory.Entry, error) {\n    if err := userKey.CheckUserKey(); err != nil {\n        return nil, err\n    }\n\n    // \u6267\u884c\u5168\u6587\u641c\u7d22\n    rows, err := p.db.QueryContext(ctx, `\n        SELECT id, app_name, user_id, memory, topics, created_at, updated_at\n        FROM memories \n        WHERE app_name = $1 AND user_id = $2 \n        AND (memory ILIKE $3 OR topics::text ILIKE $3)\n        ORDER BY updated_at DESC\n        LIMIT 10\n    `, userKey.AppName, userKey.UserID, \"%\"+query+\"%\")\n\n    if err != nil {\n        return nil, err\n    }\n    defer rows.Close()\n\n    var entries []*memory.Entry\n    for rows.Next() {\n        var entry memory.Entry\n        var topicsData []byte\n\n        err := rows.Scan(&amp;entry.ID, &amp;entry.AppName, &amp;entry.UserID, &amp;entry.Memory.Memory, &amp;topicsData, &amp;entry.CreatedAt, &amp;entry.UpdatedAt)\n    if err != nil {\n        return nil, err\n    }\n\n        entry.Memory.Topics = p.unmarshalTopics(topicsData)\n        entries = append(entries, &amp;entry)\n    }\n\n    return entries, nil\n}\n\nfunc (p *PostgreSQLMemoryService) Tools() []tool.Tool {\n    var tools []tool.Tool\n    for _, t := range p.cachedTools {\n        tools = append(tools, t)\n    }\n    return tools\n}\n\nfunc (p *PostgreSQLMemoryService) initTools() {\n    p.cachedTools[memory.AddToolName] = memorytool.NewAddTool(p)\n    p.cachedTools[memory.SearchToolName] = memorytool.NewSearchTool(p)\n    p.cachedTools[memory.LoadToolName] = memorytool.NewLoadTool(p)\n}\n\nfunc (p *PostgreSQLMemoryService) generateMemoryID(memoryStr string) string {\n    // \u751f\u6210\u552f\u4e00\u8bb0\u5fc6 ID\n    return fmt.Sprintf(\"mem_%d\", time.Now().UnixNano())\n}\n\nfunc (p *PostgreSQLMemoryService) marshalTopics(topics []string) []byte {\n    data, _ := json.Marshal(topics)\n    return data\n}\n\nfunc (p *PostgreSQLMemoryService) unmarshalTopics(data []byte) []string {\n    var topics []string\n    json.Unmarshal(data, &amp;topics)\n    return topics\n}\n</code></pre> <p>\u4e3a\u4fbf\u4e8e\u5feb\u901f\u843d\u5730\uff0c\u53ef\u76f4\u63a5\u5bf9\u63a5\u73b0\u6709 Memory \u5e73\u53f0/\u670d\u52a1\uff08\u5982 mem0\uff09\u3002\u5efa\u8bae\uff1a</p> <ul> <li>\u5728 <code>memory/mem0/</code> \u63d0\u4f9b\u5b9e\u73b0\uff0c\u9075\u5faa <code>memory.Service</code> \u63a5\u53e3\u3002</li> <li>\u590d\u7528\u73b0\u6709 <code>memory/tool</code> \u5de5\u5177\uff08<code>memory_add</code>\u3001<code>memory_search</code>\u3001   <code>memory_load</code> \u7b49\uff09\uff0c\u901a\u8fc7 <code>Tools()</code> \u66b4\u9732\u3002</li> <li>\u4e3b\u9898\uff08topics\uff09\u4e0e\u68c0\u7d22\uff08search\uff09\u6309\u76ee\u6807\u670d\u52a1\u80fd\u529b\u505a\u6620\u5c04\uff0c\u5fc5\u8981\u65f6\u5728\u672c\u5730   \u7ef4\u62a4\u8f7b\u91cf\u7d22\u5f15\u4ee5\u589e\u5f3a\u67e5\u8be2\u4f53\u9a8c\u3002</li> <li>\u53ef\u9009\uff1a\u590d\u7528 <code>storage</code> \u6a21\u5757\u7684\u5ba2\u6237\u7aef\u7ba1\u7406\u7edf\u4e00\u9274\u6743\u3001\u8fde\u63a5\u4e0e\u590d\u7528\u3002</li> </ul> <p>\u793a\u4f8b\u9aa8\u67b6\uff08\u7b80\u5316\uff09\uff1a</p> <pre><code>package mem0\n\nimport (\n    \"context\"\n    \"net/http\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/memory\"\n    memorytool \"trpc.group/trpc-go/trpc-agent-go/memory/tool\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n)\n\ntype Service struct {\n    client  *http.Client\n    baseURL string\n    apiKey  string\n    tools   map[string]tool.Tool\n}\n\nfunc New(baseURL, apiKey string) *Service {\n    s := &amp;Service{\n        client:  &amp;http.Client{},\n        baseURL: baseURL,\n        apiKey:  apiKey,\n        tools:   make(map[string]tool.Tool),\n    }\n    s.tools[memory.AddToolName] = memorytool.NewAddTool(s)\n    s.tools[memory.SearchToolName] = memorytool.NewSearchTool(s)\n    s.tools[memory.LoadToolName] = memorytool.NewLoadTool(s)\n    return s\n}\n\nfunc (s *Service) Tools() []tool.Tool {\n    var ts []tool.Tool\n    for _, t := range s.tools {\n        ts = append(ts, t)\n    }\n    return ts\n}\n\nfunc (s *Service) AddMemory(ctx context.Context, key memory.UserKey, m string, topics []string) error {\n    if err := key.CheckUserKey(); err != nil {\n        return err\n    }\n    // \u8c03\u7528 mem0 API \u5199\u5165\u8bb0\u5fc6\n    return nil\n}\n\nfunc (s *Service) SearchMemories(ctx context.Context, key memory.UserKey, q string) ([]*memory.Entry, error) {\n    if err := key.CheckUserKey(); err != nil {\n        return nil, err\n    }\n    // \u8c03\u7528 mem0 API \u68c0\u7d22, \u5e76\u8f6c\u6362\u4e3a []*memory.Entry\n    return nil, nil\n}\n\n// \u5176\u4f59\u63a5\u53e3 Update/Delete/Clear/Read \u6309 mem0 \u80fd\u529b\u505a\u6620\u5c04\u5b9e\u73b0\n</code></pre> <p>\u5b9e\u73b0\u8981\u70b9\uff1a</p> <ul> <li>\u9274\u6743\u4e0e\u9650\u6d41\u6309\u76ee\u6807\u670d\u52a1\u6307\u5357\u914d\u7f6e\u3002</li> <li>\u8fd4\u56de\u503c\u4e25\u683c\u5bf9\u9f50 <code>memory.Entry</code> \u4e0e <code>memory.Memory</code>\uff0c\u65f6\u95f4\u5b57\u6bb5\u4f7f\u7528 UTC\u3002</li> <li>\u5de5\u5177\u58f0\u660e\uff08Declaration\uff09\u5e94\u51c6\u786e\u63cf\u8ff0\u8f93\u5165\u8f93\u51fa\uff0c\u4fbf\u4e8e\u524d\u7aef\u4e0e\u6a21\u578b\u7406\u89e3\u3002</li> <li>\u8865\u5145 README\u3001\u793a\u4f8b\u4e0e\u6d4b\u8bd5\uff0c\u786e\u4fdd\u4e0e <code>runner</code>\u3001<code>server/debug</code> \u7ec4\u5408\u53ef\u7528\u3002</li> </ul> <p>\u53ef\u4ee5\u96c6\u6210\u7684\u5f00\u6e90\u7ec4\u4ef6\u793a\u4f8b\uff1a</p> <ul> <li>PostgreSQL \u8bb0\u5fc6\u5b58\u50a8</li> <li>MongoDB \u8bb0\u5fc6\u5b58\u50a8</li> <li>Elasticsearch \u8bb0\u5fc6\u5b58\u50a8</li> <li>Redis \u8bb0\u5fc6\u5b58\u50a8</li> </ul> <p>\u8d21\u732e\u65b9\u5f0f\uff1a</p> <ul> <li>\u5728\u5bf9\u5e94\u76ee\u5f55\u4e0b\u521b\u5efa\u7ec4\u4ef6\uff08\u65b0\u5efa\u4e00\u4e2a\u5bf9\u5e94\u7ec4\u4ef6\u540d\u79f0\u7684\u5b50\u76ee\u5f55\uff09</li> <li>\u76f4\u63a5\u8d21\u732e\u5230 <code>https://github.com/trpc-group/trpc-agent-go/memory/</code></li> </ul>"},{"location":"zh/ecosystem/#7-observability","title":"7. \u53ef\u89c2\u6d4b\uff08Observability\uff09\u751f\u6001\u5316","text":"<p>\u76ee\u6807\uff1a \u57fa\u4e8e OpenTelemetry \u6807\u51c6\u63d0\u4f9b\u7edf\u4e00\u7684\u53ef\u89c2\u6d4b\u80fd\u529b\uff0c\u8986\u76d6 Logging\u3001Metrics\u3001Tracing\uff0c\u4fbf\u4e8e\u751f\u6001\u6269\u5c55\u4e0e\u66ff\u6362\u3002</p> <p>\u6838\u5fc3\u5305\u4e0e\u63a5\u53e3\uff1a</p> <ul> <li>Logging: <code>trpc-agent-go/log</code>\uff08<code>log.Logger</code> \u63a5\u53e3\u4e0e <code>log.Default</code> \u5168\u5c40   \u65e5\u5fd7\u5668\uff09\u3002</li> <li>Metrics: <code>trpc-agent-go/telemetry/metric</code>\uff08<code>metric.Meter</code> \u5168\u5c40 Meter \u4e0e   <code>metric.Start</code> \u521d\u59cb\u5316\uff09\u3002</li> <li>Tracing: <code>trpc-agent-go/telemetry/trace</code>\uff08<code>trace.Tracer</code> \u5168\u5c40 Tracer \u4e0e   <code>trace.Start</code> \u521d\u59cb\u5316\uff09\u3002</li> <li>tRPC \u96c6\u6210\uff1a<code>trpc/log.go</code>\u3001<code>trpc/telemetry/galileo/</code>\u3002</li> </ul>"},{"location":"zh/ecosystem/#logging","title":"Logging\uff08\u65e5\u5fd7\uff09","text":"<ul> <li>\u63a5\u53e3\u5b9a\u4e49\uff1a<code>log.Logger</code> \u5b9a\u4e49\u4e86 <code>Debug/Info/Warn/Error/Fatal</code> \u53ca\u5176 <code>*f</code>   \u53d8\u4f53\u65b9\u6cd5\uff0c\u4fbf\u4e8e\u66ff\u6362\u4e3a\u4efb\u610f\u5b9e\u73b0\u3002</li> <li>\u9ed8\u8ba4\u5b9e\u73b0\uff1a<code>log.Default</code> \u9ed8\u8ba4\u4f7f\u7528 <code>zap</code> \u7684 <code>SugaredLogger</code>\u3002</li> <li>\u52a8\u6001\u7ea7\u522b\uff1a<code>log.SetLevel(level)</code> \u652f\u6301 <code>debug/info/warn/error/fatal</code>\u3002</li> <li>tRPC \u96c6\u6210\uff1a<code>trpc/log.go</code> \u5c06 <code>tlog.DefaultLogger</code> \u6ce8\u5165\u4e3a   <code>log.Default</code>\uff0c\u5e76\u968f tRPC \u63d2\u4ef6\u751f\u547d\u5468\u671f\u5237\u65b0\u3002</li> </ul> <p>\u793a\u4f8b\uff08\u4f7f\u7528\u5168\u5c40\u65e5\u5fd7\u5668\uff09\uff1a</p> <pre><code>package main\n\nimport (\n    \"context\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/log\"\n)\n\nfunc main() {\n    log.SetLevel(log.LevelInfo)\n    log.Info(\"app start\")\n    log.Debugf(\"ctx: %v\", context.Background())\n}\n</code></pre> <p>\u793a\u4f8b\uff08\u5728 tRPC \u4e2d\u901a\u8fc7\u914d\u7f6e\u843d\u76d8/\u8fdc\u7aef\uff09\uff1a</p> <pre><code>plugins:\n  log:\n    default:\n      - writer: console\n        level: info\n      - writer: file\n        level: warn\n        writer_config:\n          log_path: ./app.log\n</code></pre> <p>\u8d21\u732e\u65b9\u5411\uff1a</p> <ul> <li>\u9002\u914d\u4efb\u610f Logger\uff08\u5982 zerolog\u3001logrus\uff09\uff1a\u5b9e\u73b0 <code>log.Logger</code> \u63a5\u53e3\uff0c\u5e76\u5728   \u521d\u59cb\u5316\u65f6\u8bbe\u7f6e <code>log.Default = yourLogger</code>\u3002</li> <li>tRPC \u63d2\u4ef6\u5316\uff1a\u53c2\u8003 <code>trpc/log.go</code> \u7684 <code>plugin.RegisterSetupHook</code> \u7528\u6cd5\u3002</li> </ul>"},{"location":"zh/ecosystem/#metrics","title":"Metrics\uff08\u6307\u6807\uff09","text":"<ul> <li>\u5305\uff1a<code>telemetry/metric</code>\u3002</li> <li>\u5168\u5c40\u5bf9\u8c61\uff1a<code>metric.Meter</code>\uff0c\u9ed8\u8ba4 <code>noop</code>\uff0c\u8c03\u7528 <code>metric.Start</code> \u540e\u6307\u5411   OTel Meter\u3002</li> <li>\u521d\u59cb\u5316\uff1a<code>metric.Start(ctx, metric.WithEndpoint(\"host:4317\"))</code>\u3002</li> <li>OTLP \u5bfc\u51fa\uff1a\u4f7f\u7528 <code>otlpmetricgrpc</code>\uff0c\u652f\u6301\u73af\u5883\u53d8\u91cf\u8986\u76d6\uff1a<ul> <li><code>OTEL_EXPORTER_OTLP_METRICS_ENDPOINT</code>\u3002</li> <li><code>OTEL_EXPORTER_OTLP_ENDPOINT</code>\uff08\u515c\u5e95\uff09\u3002</li> </ul> </li> <li>\u8d44\u6e90\u6807\u8bc6\uff1a\u81ea\u52a8\u586b\u5145 <code>service.namespace/name/version</code>\u3002</li> </ul> <p>\u793a\u4f8b\uff08\u542f\u52a8\u6307\u6807\u4e0e\u4e0a\u62a5 Counter\uff09\uff1a</p> <pre><code>package main\n\nimport (\n    \"context\"\n\n    \"go.opentelemetry.io/otel/metric\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/telemetry/metric\" // alias ametric\n    ametric \"trpc.group/trpc-go/trpc-agent-go/telemetry/metric\"\n)\n\nfunc main() {\n    clean, _ := ametric.Start(context.Background(),\n        ametric.WithEndpoint(\"localhost:4317\"),\n    )\n    defer clean()\n\n    counter, _ := ametric.Meter.Int64Counter(\n        \"requests_total\",\n        metric.WithDescription(\"total requests\"),\n    )\n    counter.Add(context.Background(), 1)\n}\n</code></pre> <p>\u8d21\u732e\u65b9\u5411\uff1a</p> <ul> <li>\u5bfc\u51fa\u5668\u751f\u6001\uff1a\u5c01\u88c5\u66f4\u591a OTel Exporter \u7684\u4fbf\u6377\u542f\u52a8\u65b9\u6cd5\uff08\u5982 Prometheus pull/OTLP http\uff09\u3002</li> <li>\u6307\u6807\u5e93\uff1a\u7ea6\u5b9a\u5e38\u7528\u6307\u6807\u547d\u540d\u4e0e\u6807\u7b7e\u89c4\u8303\uff0c\u63d0\u4f9b helper \u65b9\u6cd5\u3002</li> </ul>"},{"location":"zh/ecosystem/#tracing","title":"Tracing\uff08\u94fe\u8def\u8ffd\u8e2a\uff09","text":"<ul> <li>\u5305\uff1a<code>telemetry/trace</code>\u3002</li> <li>\u5168\u5c40\u5bf9\u8c61\uff1a<code>trace.Tracer</code>\uff0c\u9ed8\u8ba4 <code>noop</code>\uff0c\u8c03\u7528 <code>trace.Start</code> \u540e\u6307\u5411   OTel Tracer\u3002</li> <li>\u521d\u59cb\u5316\uff1a<code>trace.Start(ctx, trace.WithEndpoint(\"host:4317\"))</code>\u3002</li> <li>OTLP \u5bfc\u51fa\uff1a\u4f7f\u7528 <code>otlptracegrpc</code>\uff0c\u652f\u6301\u73af\u5883\u53d8\u91cf\u8986\u76d6\uff1a<ul> <li><code>OTEL_EXPORTER_OTLP_TRACES_ENDPOINT</code>\u3002</li> <li><code>OTEL_EXPORTER_OTLP_ENDPOINT</code>\uff08\u515c\u5e95\uff09\u3002</li> </ul> </li> <li>Propagator\uff1a\u9ed8\u8ba4\u542f\u7528 <code>TraceContext</code>\u3002</li> </ul> <p>\u793a\u4f8b\uff08\u542f\u52a8\u8ffd\u8e2a\u4e0e\u521b\u5efa Span\uff09\uff1a</p> <pre><code>package main\n\nimport (\n    \"context\"\n\n    \"go.opentelemetry.io/otel/trace\"\n    atrace \"trpc.group/trpc-go/trpc-agent-go/telemetry/trace\"\n)\n\nfunc main() {\n    clean, _ := atrace.Start(context.Background(),\n        atrace.WithEndpoint(\"localhost:4317\"),\n    )\n    defer clean()\n\n    ctx, span := atrace.Tracer.Start(context.Background(), \"example\",\n        trace.WithAttributes(),\n    )\n    _ = ctx\n    span.End()\n}\n</code></pre> <p>\u8d21\u732e\u65b9\u5411\uff1a</p> <ul> <li>\u5bfc\u51fa\u5668\u751f\u6001\uff1a\u5c01\u88c5 Zipkin\u3001Jaeger\uff08\u76f4\u63a5\u63a8\u9001\uff09\u7b49\u542f\u52a8\u65b9\u6cd5\u3002</li> <li>Span \u89c4\u8303\uff1a\u7ea6\u5b9a\u5e38\u89c1 Span \u540d\u79f0/\u5c5e\u6027\u952e\uff0c\u63d0\u4f9b helper\uff08\u53ef\u653e\u5728   <code>telemetry/</code>\uff09\u3002</li> </ul>"},{"location":"zh/ecosystem/#8-api","title":"8. API \u670d\u52a1\u751f\u6001\u5316","text":"<p>\u76ee\u6807\uff1a \u9762\u5411\u524d\u7aef Chat \u754c\u9762\uff08\u5982 ADK Web\u3001AG-UI\u3001Agent UI\uff09\u63d0\u4f9b\u7edf\u4e00\u3001 \u53ef\u6269\u5c55\u7684 API \u670d\u52a1\u5c01\u88c5\uff0c\u8986\u76d6\u4f1a\u8bdd\u7ba1\u7406\u3001\u5bf9\u8bdd\u53d1\u9001\u3001\u6d41\u5f0f\u4f20\u8f93\u3001\u5de5\u5177\u8c03\u7528\u3001 \u53ef\u89c2\u6d4b\u4e0e\u9274\u6743\u7b49\u80fd\u529b\uff0c\u5e76\u5bf9\u9f50\u5404 UI \u534f\u8bae\u4ee5\u4fbf\u5373\u63d2\u5373\u7528\u3002</p> <p>\u73b0\u6709\u5b9e\u73b0\u53c2\u8003\uff1a</p> <ul> <li>ADK Web \u517c\u5bb9 HTTP \u670d\u52a1\uff1a<code>server/debug</code>\u3002<ul> <li>\u7aef\u70b9\uff08\u5df2\u5b9e\u73b0\uff09\uff1a<ul> <li><code>GET /list-apps</code>\uff1a\u5217\u51fa\u53ef\u7528 <code>Agent</code> \u5e94\u7528\u3002</li> <li><code>GET /apps/{appName}/users/{userId}/sessions</code>\uff1a\u5217\u51fa\u7528\u6237\u4f1a\u8bdd\u3002</li> <li><code>POST /apps/{appName}/users/{userId}/sessions</code>\uff1a\u521b\u5efa\u4f1a\u8bdd\u3002</li> <li><code>GET /apps/{appName}/users/{userId}/sessions/{sessionId}</code>\uff1a\u67e5\u8be2\u4f1a\u8bdd\u3002</li> <li><code>POST /run</code>\uff1a\u975e\u6d41\u5f0f\u5bf9\u8bdd\u63a8\u7406\uff0c\u8fd4\u56de\u805a\u5408\u4e8b\u4ef6\u5217\u8868\u3002</li> <li><code>POST /run_sse</code>\uff1aSSE \u6d41\u5f0f\u63a8\u7406\uff0c\u8fd4\u56de token \u7ea7\u4e8b\u4ef6\u6d41\u3002</li> <li><code>GET /debug/trace/{event_id}</code>\uff1a\u6309\u4e8b\u4ef6\u67e5\u8be2 Trace \u5c5e\u6027\u3002</li> <li><code>GET /debug/trace/session/{session_id}</code>\uff1a\u6309 Session \u67e5\u8be2 Trace \u5217\u8868\u3002</li> </ul> </li> <li>\u7279\u6027\uff1a\u5185\u7f6e CORS\u3001\u4f1a\u8bdd\u5b58\u50a8\u53ef\u63d2\u62d4\uff08\u9ed8\u8ba4 In-Memory\uff09\u3001\u4e0e   <code>runner.Runner</code> \u6253\u901a\u3001\u53ef\u89c2\u6d4b\u57cb\u70b9\uff08\u5bfc\u51fa\u5173\u952e Span\uff09\u3002</li> </ul> </li> <li>A2A Server\uff1a<code>server/a2a</code>\u3002<ul> <li>\u9762\u5411 A2A \u534f\u8bae\u7684\u670d\u52a1\u5c01\u88c5\uff0c\u5185\u5efa <code>AuthProvider</code> \u4e0e\u4efb\u52a1\u7f16\u6392\uff0c\u9002\u5408   \u5e73\u53f0\u5230 Agent \u7684\u96c6\u6210\u573a\u666f\u3002</li> </ul> </li> </ul> <p>\u4e0e\u524d\u7aef\u534f\u8bae\u5bf9\u9f50\uff1a</p> <ul> <li>ADK Web\uff1a\u5df2\u5bf9\u9f50\u8bf7\u6c42/\u54cd\u5e94\u4e0e\u4e8b\u4ef6 Schema\uff0c\u89c1 <code>server/debug/internal/schema</code>\u3002</li> <li>AG-UI\uff1a\u53c2\u8003 <code>https://github.com/ag-ui-protocol/ag-ui</code>\u3002<ul> <li>\u9700\u8981\u7684\u80fd\u529b\uff1a<ul> <li>\u4f1a\u8bdd\u5217\u8868/\u521b\u5efa/\u67e5\u8be2\u3002</li> <li>\u6587\u672c\u5bf9\u8bdd\u4e0e SSE \u6d41\u5f0f\u589e\u91cf\uff1b\u652f\u6301\u5de5\u5177\u8c03\u7528\u4e0e\u51fd\u6570\u54cd\u5e94\u7247\u6bb5\u5316\u5c55\u793a\u3002</li> <li>\u72b6\u6001/\u7528\u91cf\u5143\u6570\u636e\u3001\u9519\u8bef\u8868\u8fbe\u5bf9\u9f50\u3002</li> <li>\u6587\u4ef6/\u56fe\u7247\u7b49\u5bcc\u5a92\u4f53\u627f\u8f7d\uff08InlineData\uff09\u4e0e\u670d\u52a1\u7aef\u5b58\u50a8\u5bf9\u63a5\u3002</li> <li>\u9274\u6743\uff08API Key\u3001JWT\u3001Cookie \u4f1a\u8bdd\uff09\u4e0e CORS\u3002</li> </ul> </li> <li>\u5efa\u8bae\u5728 <code>server/agui/</code> \u63d0\u4f9b\u5b9e\u73b0\uff0c\u590d\u7528\u901a\u7528\u7684\u6a21\u578b\u4e0e\u4e8b\u4ef6   \u6620\u5c04\u5de5\u5177\uff0c\u5728 Handler \u4e2d\u5b8c\u6210\u534f\u8bae\u5c42\u9002\u914d\u3002</li> </ul> </li> <li>Agent UI\uff08agno\uff09\uff1a\u53c2\u8003 <code>https://docs.agno.com/agent-ui/introduction</code>\u3002<ul> <li>\u91cd\u70b9\uff1aSSE/WebSocket \u6d41\u3001Tool \u8c03\u7528\u6d41\u5f0f UI \u53cd\u9988\u3001\u4f1a\u8bdd/\u5de5\u4ef6\u6301\u4e45\u5316\u3002</li> </ul> </li> </ul> <p>\u5173\u952e\u8bbe\u8ba1\u8981\u70b9\uff1a</p> <ul> <li>Schema \u6620\u5c04\uff1a<ul> <li>\u8f93\u5165\uff1a\u5c06 UI \u7684 <code>Content</code>/<code>Part</code> \u6620\u5c04\u4e3a\u5185\u90e8 <code>model.Message</code>\u3002</li> <li>\u8f93\u51fa\u4e8b\u4ef6\uff1a\u5c06\u5185\u90e8 <code>event.Event</code> \u6620\u5c04\u4e3a UI \u671f\u671b\u7684 envelope/parts\uff0c   \u5bf9\u5de5\u5177\u8c03\u7528\u4e0e\u5de5\u5177\u54cd\u5e94\u8fdb\u884c\u7ed3\u6784\u5316\uff0c\u907f\u514d\u91cd\u590d\u6587\u672c\u5c55\u793a\u3002</li> </ul> </li> <li>\u6d41\u5f0f\u4f20\u8f93\uff1a<ul> <li>SSE \u5df2\u5728 <code>server/debug</code> \u5b9e\u73b0\uff0c\u4f18\u5148\u590d\u7528\uff1bWebSocket \u53ef\u4f5c\u4e3a\u751f\u6001\u6269\u5c55\u3002</li> <li>\u975e\u6d41\u5f0f\u7aef\u70b9\u9700\u6309 UI \u671f\u671b\u805a\u5408\u6700\u7ec8\u6d88\u606f\u4e0e\u5de5\u5177\u54cd\u5e94\u3002</li> </ul> </li> <li>\u4f1a\u8bdd\u5b58\u50a8\uff1a<ul> <li>\u901a\u8fc7 <code>runner.WithSessionService</code> \u6ce8\u5165\u5177\u4f53\u5b9e\u73b0\uff0c\u590d\u7528 <code>session</code> \u6a21\u5757\u3002</li> </ul> </li> <li>\u53ef\u89c2\u6d4b\uff1a<ul> <li>\u590d\u7528 <code>telemetry/trace</code> \u4e0e <code>telemetry/metric</code>\u3002<code>server/debug</code> \u5df2\u6f14\u793a   \u5982\u4f55\u5bfc\u51fa\u5173\u952e Span \u4e0e\u4e8b\u4ef6\u5c5e\u6027\uff0c\u4fbf\u4e8e UI \u4fa7\u8c03\u8bd5\u4e0e\u5b9a\u4f4d\u3002</li> </ul> </li> <li>\u9274\u6743\u4e0e\u5b89\u5168\uff1a<ul> <li>\u652f\u6301 API Key/JWT/\u81ea\u5b9a\u4e49 Header\uff1b\u5bf9\u654f\u611f\u7aef\u70b9\u52a0\u901f\u7387\u9650\u5236\u4e0e\u8de8\u57df\u63a7\u5236\u3002</li> </ul> </li> <li>\u5f00\u653e\u89c4\u8303\uff1a<ul> <li>\u5efa\u8bae\u5728\u5404 <code>server/*</code> \u5b50\u6a21\u5757\u9644\u5e26 <code>openapi.json</code>/<code>README.md</code>\uff0c   \u4fbf\u4e8e\u524d\u7aef/\u96c6\u6210\u65b9\u5bf9\u63a5\u3002</li> </ul> </li> </ul> <p>\u6700\u5c0f\u793a\u4f8b\uff08\u590d\u7528 ADK Web \u517c\u5bb9\u670d\u52a1\uff09\uff1a</p> <pre><code>package main\n\nimport (\n    \"net/http\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    debugsrv \"trpc.group/trpc-go/trpc-agent-go/server/debug\"\n)\n\nfunc main() {\n    // 1. \u6ce8\u518c Agent\n    ag := llmagent.New(\"assistant\")\n    s := debugsrv.New(map[string]agent.Agent{\n        ag.Info().Name: ag,\n    })\n    // 2. \u66b4\u9732 HTTP Handler\n    _ = http.ListenAndServe(\":8080\", s.Handler())\n}\n</code></pre> <p>AG-UI \u9002\u914d\u5efa\u8bae\uff08\u9aa8\u67b6\uff09\uff1a</p> <pre><code>package agui\n\nimport (\n    \"net/http\"\n\n    \"github.com/gorilla/mux\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n)\n\ntype Server struct {\n    router *mux.Router\n    ag     agent.Agent\n    run    runner.Runner\n}\n\nfunc New(ag agent.Agent, opts ...runner.Option) *Server {\n    r := runner.NewRunner(ag.Info().Name, ag, opts...)\n    s := &amp;Server{router: mux.NewRouter(), ag: ag, run: r}\n    s.routes()\n    return s\n}\n\nfunc (s *Server) Handler() http.Handler { return s.router }\n\nfunc (s *Server) routes() {\n    // GET /sessions, POST /sessions, GET /sessions/{id}\n    // POST /chat (non-stream), POST /chat/stream (SSE)\n}\n</code></pre> <p>\u751f\u6001\u5316\u65b9\u5411\u4e0e\u8d21\u732e\u89c4\u8303\uff1a</p> <ul> <li>\u76ee\u6807 UI/\u534f\u8bae\uff1a<ul> <li>AG-UI\uff1a\u5728 <code>server/agui/</code> \u63d0\u4f9b HTTP + SSE \u9002\u914d\uff0c\u9644\u5e26\u793a\u4f8b \u4e0e <code>openapi.json</code>\u3002</li> </ul> </li> <li>Agent UI\uff08agno\uff09\uff1a\u5728 <code>server/agentui/</code> \u63d0\u4f9b HTTP + SSE / WebSocket \u9002\u914d\u3002<ul> <li>WebSocket/Bidi Streaming\uff1a\u5bf9\u6807 ADK <code>run_live</code>\uff0c\u63d0\u4f9b\u5b9e\u65f6\u97f3\u89c6\u9891   \u901a\u9053\uff08\u4f9d\u8d56\u6a21\u578b\u4fa7\u652f\u6301\uff09\u3002</li> </ul> </li> <li>\u843d\u5730\u8981\u6c42\uff1a<ul> <li>\u4e8b\u4ef6 Schema \u660e\u786e\u3001\u6620\u5c04\u5b8c\u5907\uff0c\u786e\u4fdd\u5de5\u5177\u8c03\u7528/\u54cd\u5e94\u5728 UI \u7aef\u6709\u826f\u597d\u4f53\u9a8c\u3002</li> <li>\u652f\u6301\u4f1a\u8bdd\u5b58\u50a8\u53ef\u63d2\u62d4\uff0c\u9ed8\u8ba4 In-Memory\uff0c\u63a8\u8350\u652f\u6301 Redis/MySQL \u7b49\u3002</li> <li>\u5185\u7f6e CORS\u3001\u9274\u6743\u4e2d\u95f4\u4ef6\uff08API Key/JWT\uff09\uff0c\u66b4\u9732\u5065\u5eb7\u68c0\u67e5\u7aef\u70b9\u3002</li> <li>\u53ef\u89c2\u6d4b\uff1a\u6253\u901a <code>telemetry</code>\uff0c\u63d0\u4f9b\u6700\u5c0f Trace \u4e0e Metric \u6837\u4f8b\u3002</li> <li>\u6587\u6863\uff1aREADME\u3001OpenAPI\u3001\u7aef\u5230\u7aef\u793a\u4f8b\uff08\u5305\u542b\u7b80\u5355\u524d\u7aef\u6216 curl \u811a\u672c\uff09\u3002</li> </ul> </li> </ul> <p>\u94fe\u63a5\u53c2\u8003\uff1a</p> <ul> <li><code>server/debug</code>\uff08ADK Web \u517c\u5bb9\uff09\u4e0e\u5176 <code>openapi.json</code>\u3002 </li> <li><code>server/a2a</code>\uff08A2A \u534f\u8bae\u5c01\u88c5\uff09\u3002 </li> </ul>"},{"location":"zh/ecosystem/#9-planner","title":"9. Planner \u751f\u6001\u5316","text":"<p>\u76ee\u6807\uff1a \u63d0\u4f9b\u591a\u6837\u5316\u7684\u89c4\u5212\u5668\u4ee5\u9002\u914d\u4e0d\u540c\u6a21\u578b\u4e0e\u5de5\u4f5c\u6d41\uff0c\u5305\u62ec\u5185\u7f6e\u601d\u7ef4 \u80fd\u529b\u9002\u914d\u4e0e\u663e\u5f0f\u89c4\u5212\uff08ReAct/Reflection \u7b49\uff09\u3002</p> <p>\u63a5\u53e3\u5b9a\u4e49\uff1a <code>planner.Planner</code>\u3002</p> <ul> <li><code>BuildPlanningInstruction(ctx, invocation, llmRequest) string</code>\uff1a\u6784\u5efa\u6216   \u6ce8\u5165\u7528\u4e8e\u89c4\u5212\u7684\u7cfb\u7edf\u63d0\u793a\u4e0e\u8bf7\u6c42\u914d\u7f6e\u3002</li> <li><code>ProcessPlanningResponse(ctx, invocation, response) *model.Response</code>\uff1a   \u5bf9\u6a21\u578b\u54cd\u5e94\u505a\u89c4\u5212\u540e\u5904\u7406\uff08\u53ef\u9009\uff09\u3002</li> </ul> <p>\u73b0\u6709\u5b9e\u73b0\u53c2\u8003\uff1a</p> <ul> <li><code>planner/builtin</code>\uff1a\u9002\u914d O \u7cfb\u5217\u3001Claude\u3001Gemini \u7b49\u5177\u5907\u63a8\u7406\u53c2\u6570\u7684\u6a21\u578b,   \u901a\u8fc7\u914d\u7f6e <code>ReasoningEffort</code>\u3001<code>ThinkingEnabled</code>\u3001<code>ThinkingTokens</code>\u3002</li> <li><code>planner/react</code>\uff1a\u63d0\u4f9b\u663e\u5f0f\u89c4\u5212\u6307\u4ee4\u4e0e\u54cd\u5e94\u540e\u5904\u7406, \u7ea6\u5b9a <code>/*PLANNING*/</code>\u3001   <code>/*ACTION*/</code>\u3001<code>/*REASONING*/</code>\u3001<code>/*FINAL_ANSWER*/</code> \u7b49\u6807\u7b7e\u3002</li> </ul> <p>\u751f\u6001\u5316\u65b9\u5411\uff1a</p> <ul> <li>Reflection Planner\uff1a\u81ea\u53cd\u5f0f\u4fee\u6b63\u4e0e\u591a\u8f6e\u518d\u89c4\u5212\u3002</li> <li>LangGraph \u98ce\u683c Planner\uff1a\u5bf9\u9f50 Pregel \u5e76\u884c\u4e0e\u68c0\u67e5\u70b9\u673a\u5236\u3002</li> <li>\u5de5\u5177\u4f18\u5148 Planner\uff1a\u9762\u5411 Tool-First \u6d41\u7a0b\u7684\u9009\u62e9\u4e0e\u7ea6\u675f\u3002</li> </ul> <p>\u63a5\u5165\u793a\u4f8b\uff08\u9aa8\u67b6\uff09\uff1a</p> <pre><code>package myplanner\n\nimport (\n    \"context\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/planner\"\n)\n\ntype Planner struct{}\n\nvar _ planner.Planner = (*Planner)(nil)\n\nfunc New() *Planner { return &amp;Planner{} }\n\nfunc (p *Planner) BuildPlanningInstruction(ctx context.Context, inv *agent.Invocation, req *model.Request) string {\n    // \u53ef\u5411 req \u6ce8\u5165\u81ea\u5b9a\u4e49\u53c2\u6570, \u5e76\u8fd4\u56de\u7cfb\u7edf\u63d0\u793a\u4e32\n    return \"You must plan before action.\"\n}\n\nfunc (p *Planner) ProcessPlanningResponse(ctx context.Context, inv *agent.Invocation, rsp *model.Response) *model.Response {\n    if rsp == nil {\n        return nil\n    }\n    // \u53ef\u5bf9 rsp \u505a\u7ed3\u6784\u5316\u5207\u5206\u6216\u5de5\u5177\u8c03\u7528\u4fee\u6b63\n    return nil\n}\n</code></pre> <p>\u7ec4\u5408\u4e0e\u4f7f\u7528\uff1a \u5728 <code>agent/llmagent</code> \u521b\u5efa\u65f6\u6ce8\u5165 Planner\uff0c\u6216\u5728 <code>runner</code> \u5c42\u6309\u9700\u9009\u62e9\u4e0d\u540c Planner \u7b56\u7565\uff0c\u7ed3\u5408 <code>Tool</code> \u4e0e <code>Session</code> \u7ba1\u7406\u5b9e\u73b0\u7aef\u5230\u7aef\u3002</p> <p>\u8d21\u732e\u5efa\u8bae\uff1a</p> <ul> <li>\u5728 <code>planner/&lt;name&gt;/</code> \u63d0\u4f9b\u5b9e\u73b0\u4e0e README\u3001\u6d4b\u8bd5\u7528\u4f8b\u3001\u793a\u4f8b\u3002</li> <li>\u7ed3\u5408 <code>docs/overall-introduction.md</code> \u7684 Observability \u4e0e <code>server/debug</code>   \u7aef\u70b9\u63d0\u4f9b\u7aef\u5230\u7aef\u793a\u4f8b\uff0c\u4fbf\u4e8e\u524d\u7aef UI \u6f14\u793a\u3002</li> <li>\u9075\u5faa goimports \u4e0e\u9519\u8bef\u6d88\u606f\u98ce\u683c\uff0c\u6ce8\u91ca\u53e5\u672b\u52a0\u53e5\u53f7\uff0c\u4ee3\u7801\u6362\u884c\u7ea6 80 \u5217\u3002</li> </ul>"},{"location":"zh/ecosystem/#_2","title":"\u7ec4\u4ef6\u5173\u7cfb\u8bf4\u660e","text":""},{"location":"zh/ecosystem/#storagesessionmemory","title":"Storage\u3001Session\u3001Memory \u4e09\u8005\u7684\u5173\u7cfb","text":"<p>\u8fd9\u4e09\u4e2a\u7ec4\u4ef6\u5728\u67b6\u6784\u4e2d\u5177\u6709\u4e0d\u540c\u7684\u804c\u8d23\u548c\u5173\u7cfb\uff1a</p> <p>1. Storage\uff08\u5b58\u50a8\u5c42\uff09</p> <ul> <li>\u804c\u8d23\uff1a \u63d0\u4f9b\u7edf\u4e00\u7684\u5b58\u50a8\u5ba2\u6237\u7aef\u7ba1\u7406\uff0c\u4e3a Session \u548c Memory \u63d0\u4f9b\u57fa\u7840\u8bbe\u65bd\u652f\u6301</li> <li>\u529f\u80fd\uff1a \u6ce8\u518c\u3001\u7ba1\u7406\u548c\u83b7\u53d6\u5404\u79cd\u5b58\u50a8\u540e\u7aef\u7684\u5ba2\u6237\u7aef\uff08Redis\u3001PostgreSQL\u3001MongoDB \u7b49\uff09</li> <li>\u7279\u70b9\uff1a \u4f5c\u4e3a\u57fa\u7840\u8bbe\u65bd\u7ec4\u4ef6\uff0c\u53ef\u4ee5\u88ab Session \u548c Memory \u7ec4\u4ef6\u5171\u4eab\u4f7f\u7528</li> </ul> <p>2. Session\uff08\u4f1a\u8bdd\u5c42\uff09</p> <ul> <li>\u804c\u8d23\uff1a \u7ba1\u7406\u7528\u6237\u4f1a\u8bdd\u72b6\u6001\u548c\u4e8b\u4ef6</li> <li>\u529f\u80fd\uff1a \u521b\u5efa\u3001\u83b7\u53d6\u3001\u5220\u9664\u4f1a\u8bdd\uff0c\u7ba1\u7406\u4f1a\u8bdd\u72b6\u6001\uff0c\u8bb0\u5f55\u4f1a\u8bdd\u4e8b\u4ef6</li> <li>\u4f9d\u8d56\uff1a \u53ef\u4ee5\u590d\u7528 Storage \u6a21\u5757\u7684\u5ba2\u6237\u7aef</li> <li>\u6570\u636e\u7279\u70b9\uff1a \u4e34\u65f6\u6027\u6570\u636e\uff0c\u4f1a\u8bdd\u7ed3\u675f\u540e\u53ef\u4ee5\u6e05\u7406</li> </ul> <p>3. Memory\uff08\u8bb0\u5fc6\u5c42\uff09</p> <ul> <li>\u804c\u8d23\uff1a \u7ba1\u7406\u7528\u6237\u957f\u671f\u8bb0\u5fc6\u548c\u4e2a\u6027\u5316\u4fe1\u606f</li> <li>\u529f\u80fd\uff1a \u6dfb\u52a0\u3001\u641c\u7d22\u3001\u66f4\u65b0\u3001\u5220\u9664\u7528\u6237\u8bb0\u5fc6\uff0c\u63d0\u4f9b\u8bb0\u5fc6\u5de5\u5177</li> <li>\u4f9d\u8d56\uff1a \u53ef\u4ee5\u590d\u7528 Storage \u6a21\u5757\u7684\u5ba2\u6237\u7aef</li> <li>\u6570\u636e\u7279\u70b9\uff1a \u6301\u4e45\u6027\u6570\u636e\uff0c\u8de8\u4f1a\u8bdd\u4fdd\u6301</li> </ul> <p>\u5173\u7cfb\u56fe\uff1a</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Application   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Session       \u2502    \u2502   Memory        \u2502\n\u2502   Service       \u2502    \u2502   Service       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502                      \u2502\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2502\n          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n          \u2502   Storage       \u2502\n          \u2502   Client        \u2502\n          \u2502   Management    \u2502\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2502\n          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n          \u2502   Storage       \u2502\n          \u2502   Backends      \u2502\n          \u2502   (Redis, DB)   \u2502\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u4f7f\u7528\u793a\u4f8b\uff1a</p> <pre><code>// 1. \u6ce8\u518c\u5b58\u50a8\u5ba2\u6237\u7aef\nstorage.RegisterRedisInstance(\"default\", storage.WithClientBuilderURL(\"redis://localhost:6379\"))\n\n// 2. Session \u670d\u52a1\u4f7f\u7528\u5b58\u50a8\u5ba2\u6237\u7aef\nsessionService, err := session.NewRedisService(\n    session.WithRedisInstance(\"default\"),\n)\n\n// 3. Memory \u670d\u52a1\u4f7f\u7528\u5b58\u50a8\u5ba2\u6237\u7aef\nmemoryService, err := memory.NewRedisService(\n    memory.WithRedisInstance(\"default\"),\n)\n\n// 4. \u5e94\u7528\u4e2d\u4f7f\u7528\nsession, err := sessionService.CreateSession(ctx, sessionKey, state)\nmemory, err := memoryService.AddMemory(ctx, userKey, \"\u7528\u6237\u559c\u6b22\u5496\u5561\", []string{\"preferences\"})\n</code></pre>"},{"location":"zh/ecosystem/#_3","title":"\u8d21\u732e\u6307\u5bfc","text":""},{"location":"zh/ecosystem/#_4","title":"\u8d21\u732e\u6307\u5bfc","text":"<p>\u9002\u5408\u7684\u7ec4\u4ef6\uff1a</p> <ul> <li>\u5404\u79cd\u7b2c\u4e09\u65b9\u670d\u52a1\u548c\u5de5\u5177\u7684\u96c6\u6210</li> <li>\u5f00\u6e90\u7ec4\u4ef6\u9002\u914d\u5668</li> <li>\u6807\u51c6\u534f\u8bae\u652f\u6301</li> <li>\u6846\u67b6\u529f\u80fd\u6269\u5c55</li> </ul> <p>\u8d21\u732e\u6d41\u7a0b\uff1a</p> <ol> <li>Fork <code>https://github.com/trpc-group/trpc-agent-go</code></li> <li>\u5728\u5bf9\u5e94\u6a21\u5757\u7684\u6839\u76ee\u5f55\u4e0b\u521b\u5efa\u7ec4\u4ef6\uff08\u5982 <code>model/somemodel</code>\u3001<code>tool/sometool</code>\u3001<code>agent/someagent</code>\uff09</li> <li>\u5b9e\u73b0\u76f8\u5e94\u7684\u63a5\u53e3</li> <li>\u7f16\u5199\u6d4b\u8bd5\u548c\u6587\u6863</li> <li>\u63d0\u4ea4 Pull Request</li> </ol> <p>\u76ee\u5f55\u7ed3\u6784\u793a\u4f8b\uff1a</p> <pre><code>model/gemini/\n\u251c\u2500\u2500 model.go\n\u251c\u2500\u2500 config.go\n\u251c\u2500\u2500 examples/\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 gemini_test.go\n</code></pre>"},{"location":"zh/ecosystem/#_5","title":"\u603b\u7ed3","text":"<p>\u751f\u6001\u5efa\u8bbe\u662f tRPC-Agent-Go \u53d1\u5c55\u7684\u91cd\u8981\u65b9\u5411\u3002\u901a\u8fc7\u5b9e\u73b0\u6807\u51c6\u63a5\u53e3\uff0c\u53ef\u4ee5\u8f7b\u677e\u96c6\u6210\u5404\u79cd\u7b2c\u4e09\u65b9\u670d\u52a1\u548c\u5de5\u5177\uff0c\u6269\u5c55\u6846\u67b6\u7684\u80fd\u529b\u3002</p> <p>\u8d21\u732e\u8981\u70b9\uff1a</p> <ul> <li>\u53c2\u8003\u73b0\u6709\u5b9e\u73b0\uff0c\u4e86\u89e3\u63a5\u53e3\u4f7f\u7528\u65b9\u5f0f</li> <li>\u6839\u636e\u7ec4\u4ef6\u7c7b\u578b\u9009\u62e9\u5408\u9002\u7684\u8d21\u732e\u8def\u5f84</li> <li>\u9075\u5faa\u7edf\u4e00\u7684\u63a5\u53e3\u89c4\u8303\u548c\u4ee3\u7801\u6807\u51c6</li> <li>\u63d0\u4f9b\u5b8c\u6574\u7684\u6d4b\u8bd5\u7528\u4f8b\u548c\u6587\u6863</li> </ul> <p>\u5224\u65ad\u8d21\u732e\u4f4d\u7f6e\uff1a</p> <ul> <li>\u6838\u5fc3\u901a\u7528\u7ec4\u4ef6\uff1a\u5982\u679c\u662f\u6bd4\u8f83\u6838\u5fc3\u90fd\u80fd\u7528\u5f97\u5230\u7684\u7ec4\u4ef6\uff0c\u76f4\u63a5\u8d21\u732e\u5230 GitHub \u5bf9\u5e94\u6a21\u5757\u76ee\u5f55</li> <li>\u751f\u6001\u7ec4\u4ef6\uff08\u5f00\u6e90\u4f9d\u8d56\uff09\uff1a\u5982\u679c\u4f9d\u8d56\u516c\u5f00\u5f00\u6e90\u7ec4\u4ef6\uff0c\u8d21\u732e\u5230 GitHub \u7684 ecosystem \u76ee\u5f55</li> </ul> <p>Storage\u3001Session\u3001Memory \u7ec4\u4ef6\u7279\u70b9\uff1a</p> <ul> <li>Storage\uff1a \u63d0\u4f9b\u7edf\u4e00\u7684\u5ba2\u6237\u7aef\u7ba1\u7406\uff0c\u53ef\u4ee5\u88ab Session \u548c Memory \u5171\u4eab</li> <li>Session\uff1a \u7ba1\u7406\u4e34\u65f6\u4f1a\u8bdd\u6570\u636e\uff0c\u53ef\u4ee5\u590d\u7528 Storage \u5ba2\u6237\u7aef</li> <li>Memory\uff1a \u7ba1\u7406\u6301\u4e45\u8bb0\u5fc6\u6570\u636e\uff0c\u53ef\u4ee5\u590d\u7528 Storage \u5ba2\u6237\u7aef</li> <li>\u4e09\u4e2a\u7ec4\u4ef6\u901a\u8fc7\u63a5\u53e3\u89e3\u8026\uff0c\u652f\u6301\u72ec\u7acb\u5b9e\u73b0\u548c\u7ec4\u5408\u4f7f\u7528</li> </ul>"},{"location":"zh/event/","title":"Event \u4f7f\u7528\u6587\u6863","text":"<p>Event \u662f trpc-agent-go \u4e2d Agent \u4e0e\u7528\u6237\u4e4b\u95f4\u901a\u4fe1\u7684\u6838\u5fc3\u673a\u5236\u3002\u5b83\u5c31\u50cf\u4e00\u4e2a\u6d88\u606f\u4fe1\u5c01\uff0c\u627f\u8f7d\u7740 Agent \u7684\u54cd\u5e94\u5185\u5bb9\u3001\u5de5\u5177\u8c03\u7528\u7ed3\u679c\u3001\u9519\u8bef\u4fe1\u606f\u7b49\u3002\u901a\u8fc7 Event\uff0c\u4f60\u53ef\u4ee5\u5b9e\u65f6\u4e86\u89e3 Agent \u7684\u5de5\u4f5c\u72b6\u6001\uff0c\u5904\u7406\u6d41\u5f0f\u54cd\u5e94\uff0c\u5b9e\u73b0\u591a Agent \u534f\u4f5c\uff0c\u4ee5\u53ca\u8ffd\u8e2a\u5de5\u5177\u6267\u884c\u3002</p>"},{"location":"zh/event/#event_1","title":"Event \u6982\u8ff0","text":"<p>Event \u662f Agent \u4e0e\u7528\u6237\u4e4b\u95f4\u901a\u4fe1\u7684\u8f7d\u4f53\u3002</p> <p>\u7528\u6237\u901a\u8fc7 <code>runner.Run()</code> \u65b9\u6cd5\u83b7\u53d6\u4e8b\u4ef6\u6d41\uff0c\u7136\u540e\u76d1\u542c\u4e8b\u4ef6\u901a\u9053\u6765\u5904\u7406 Agent \u7684\u54cd\u5e94\u3002</p>"},{"location":"zh/event/#event_2","title":"Event \u7ed3\u6784","text":"<p><code>Event</code> \u8868\u793a Agent \u4e0e\u7528\u6237\u4e4b\u95f4\u7684\u4e00\u6b21\u4e8b\u4ef6\uff0c\u7ed3\u6784\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>type Event struct {\n    // Response \u662f Event \u7684\u57fa\u7840\u54cd\u5e94\u7ed3\u6784\uff0c\u627f\u8f7d LLM \u7684\u54cd\u5e94\n    *model.Response\n\n    // InvocationID \u662f\u672c\u6b21\u8c03\u7528\u7684\u552f\u4e00\u6807\u8bc6\n    InvocationID string `json:\"invocationId\"`\n\n    // Author \u662f\u4e8b\u4ef6\u7684\u53d1\u8d77\u8005\n    Author string `json:\"author\"`\n\n    // ID \u662f\u4e8b\u4ef6\u7684\u552f\u4e00\u6807\u8bc6\u7b26\n    ID string `json:\"id\"`\n\n    // Timestamp \u662f\u4e8b\u4ef6\u7684\u65f6\u95f4\u6233\n    Timestamp time.Time `json:\"timestamp\"`\n\n    // Branch \u662f\u5206\u652f\u6807\u8bc6\u7b26\uff0c\u7528\u4e8e\u591a Agent \u534f\u4f5c\n    Branch string `json:\"branch,omitempty\"`\n\n    // RequiresCompletion \u8868\u793a\u6b64\u4e8b\u4ef6\u662f\u5426\u9700\u8981\u5b8c\u6210\u4fe1\u53f7\n    RequiresCompletion bool `json:\"requiresCompletion,omitempty\"`\n\n    // LongRunningToolIDs \u662f\u957f\u8fd0\u884c\u51fd\u6570\u8c03\u7528\u7684 ID \u96c6\u5408\n    // Agent \u5ba2\u6237\u7aef\u5c06\u4ece\u6b64\u5b57\u6bb5\u4e86\u89e3\u54ea\u4e9b\u51fd\u6570\u8c03\u7528\u662f\u957f\u65f6\u95f4\u8fd0\u884c\u7684\n    // \u4ec5\u5bf9\u51fd\u6570\u8c03\u7528\u4e8b\u4ef6\u6709\u6548\n    LongRunningToolIDs map[string]struct{} `json:\"longRunningToolIDs,omitempty\"`\n\n    // StateDelta \u662f\u9700\u8981\u5199\u5165\u4f1a\u8bdd\u72b6\u6001\u7684\u589e\u91cf\uff08\u4f8b\u5982 Processor \u4ea7\u51fa\u7684\u72b6\u6001\u53d8\u66f4\uff09\n    StateDelta map[string][]byte `json:\"stateDelta,omitempty\"`\n\n    // StructuredOutput \u643a\u5e26\u7c7b\u578b\u5316\u7684\u5185\u5b58\u5185\u7ed3\u6784\u5316\u8f93\u51fa\uff0c\u4e0d\u53c2\u4e0e\u5e8f\u5217\u5316\n    StructuredOutput any `json:\"-\"`\n\n    // Actions \u643a\u5e26\u5bf9 Flow \u7684\u884c\u4e3a\u63d0\u793a\uff08\u4f8b\u5982\uff1a\u8df3\u8fc7\u5de5\u5177\u540e\u7684\u603b\u7ed3\uff09\n    Actions *EventActions `json:\"actions,omitempty\"`\n}\n\n// EventActions \u4e3a\u4e8b\u4ef6\u9644\u5e26\u7684\u53ef\u9009\u884c\u4e3a\u63d0\u793a\ntype EventActions struct {\n    // SkipSummarization \u8868\u793a Flow \u5728 tool.response \u540e\u4e0d\u518d\u8fdb\u884c\u603b\u7ed3\u578b LLM \u8c03\u7528\n    SkipSummarization bool `json:\"skipSummarization,omitempty\"`\n}\n</code></pre> <p><code>model.Response</code> \u662f Event \u7684\u57fa\u7840\u54cd\u5e94\u7ed3\u6784\uff0c\u627f\u8f7d\u4e86 LLM \u7684\u54cd\u5e94\u3001\u5de5\u5177\u8c03\u7528\u4ee5\u53ca\u9519\u8bef\u7b49\u4fe1\u606f\uff0c\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>type Response struct {\n    // \u54cd\u5e94\u552f\u4e00\u6807\u8bc6\n    ID string `json:\"id\"`\n\n    // \u5bf9\u8c61\u7c7b\u578b\uff08\u5982 \"chat.completion\", \"error\" \u7b49\uff09\uff0c\u5e2e\u52a9\u5ba2\u6237\u7aef\u8bc6\u522b\u5904\u7406\u65b9\u5f0f\n    Object string `json:\"object\"`\n\n    // \u521b\u5efa\u65f6\u95f4\u6233\n    Created int64 `json:\"created\"`\n\n    // \u4f7f\u7528\u7684\u6a21\u578b\u540d\u79f0\n    Model string `json:\"model\"`\n\n    // \u54cd\u5e94\u53ef\u9009\u9879\uff0cLLM \u53ef\u80fd\u751f\u6210\u591a\u4e2a\u5019\u9009\u54cd\u5e94\u4f9b\u7528\u6237\u9009\u62e9\uff0c\u9ed8\u8ba4\u53ea\u6709 1 \u4e2a\n    Choices []Choice `json:\"choices\"`\n\n    // \u4f7f\u7528\u7edf\u8ba1\u4fe1\u606f\uff0c\u8bb0\u5f55 token \u4f7f\u7528\u60c5\u51b5\n    Usage *Usage `json:\"usage,omitempty\"`\n\n    // \u7cfb\u7edf\u6307\u7eb9\n    SystemFingerprint *string `json:\"system_fingerprint,omitempty\"`\n\n    // \u9519\u8bef\u4fe1\u606f\n    Error *ResponseError `json:\"error,omitempty\"`\n\n    // \u65f6\u95f4\u6233\n    Timestamp time.Time `json:\"timestamp\"`\n\n    // \u8868\u793a\u6574\u4e2a\u5bf9\u8bdd\u662f\u5426\u5b8c\u6210\n    Done bool `json:\"done\"`\n\n    // \u662f\u5426\u4e3a\u90e8\u5206\u54cd\u5e94\n    IsPartial bool `json:\"is_partial\"`\n}\n\ntype Choice struct {\n    // \u9009\u62e9\u7d22\u5f15\n    Index int `json:\"index\"`\n\n    // \u5b8c\u6574\u6d88\u606f\uff0c\u5305\u542b\u6574\u4e2a\u54cd\u5e94\n    Message Message `json:\"message,omitempty\"`\n\n    // \u589e\u91cf\u6d88\u606f\uff0c\u7528\u4e8e\u6d41\u5f0f\u54cd\u5e94\uff0c\u53ea\u5305\u542b\u5f53\u524d\u5757\u7684\u65b0\u5185\u5bb9\n    // \u4f8b\u5982\uff1a\u5b8c\u6574\u54cd\u5e94 \"Hello, how can I help you?\" \u5728\u6d41\u5f0f\u54cd\u5e94\u4e2d\uff1a\n    // \u7b2c\u4e00\u4e2a\u4e8b\u4ef6\uff1aDelta.Content = \"Hello\"\n    // \u7b2c\u4e8c\u4e2a\u4e8b\u4ef6\uff1aDelta.Content = \", how\"  \n    // \u7b2c\u4e09\u4e2a\u4e8b\u4ef6\uff1aDelta.Content = \" can I help you?\"\n    Delta Message `json:\"delta,omitempty\"`\n\n    // \u5b8c\u6210\u539f\u56e0\n    FinishReason *string `json:\"finish_reason,omitempty\"`\n}\n\ntype Message struct {\n    // \u6d88\u606f\u53d1\u8d77\u4eba\u7684\u89d2\u8272\uff0c\u4f8b\u5982 \"system\", \"user\", \"assistant\", \"tool\"\n    Role string `json:\"role\"`\n\n    // \u6d88\u606f\u5185\u5bb9\n    Content string `json:\"content\"`\n\n    // \u591a\u6a21\u5f0f\u6d88\u606f\u7684\u5185\u5bb9\u7247\u6bb5\n    ContentParts []ContentPart `json:\"content_parts,omitempty\"`\n\n    // \u5de5\u5177\u54cd\u5e94\u6240\u4f7f\u7528\u7684\u5de5\u5177\u7684 ID\n    ToolID string `json:\"tool_id,omitempty\"`\n\n    // \u5de5\u5177\u54cd\u5e94\u6240\u4f7f\u7528\u7684\u5de5\u5177\u7684\u540d\u79f0\n    ToolName string `json:\"tool_name,omitempty\"`\n\n    // \u53ef\u9009\u7684\u5de5\u5177\u8c03\u7528\n    ToolCalls []ToolCall `json:\"tool_calls,omitempty\"`\n}\n\ntype Usage struct {\n    // \u63d0\u793a\u8bcd\u4f7f\u7528\u7684 Token \u6570\u91cf.\n    PromptTokens int `json:\"prompt_tokens\"`\n\n    // \u8865\u5168\u4f7f\u7528\u7684 Token \u6570\u91cf.\n    CompletionTokens int `json:\"completion_tokens\"`\n\n    // \u54cd\u5e94\u4e2d\u4f7f\u7528\u7684\u603b Token \u6570\u91cf.\n    TotalTokens int `json:\"total_tokens\"`\n}\n</code></pre>"},{"location":"zh/event/#event_3","title":"Event \u7c7b\u578b","text":"<p>Event \u5728\u4ee5\u4e0b\u573a\u666f\u4e2d\u4f1a\u88ab\u521b\u5efa\u548c\u53d1\u9001\uff1a</p> <ol> <li>\u7528\u6237\u6d88\u606f\u4e8b\u4ef6\uff1a\u7528\u6237\u53d1\u9001\u6d88\u606f\u65f6\u81ea\u52a8\u521b\u5efa</li> <li>Agent \u54cd\u5e94\u4e8b\u4ef6\uff1aAgent \u751f\u6210\u54cd\u5e94\u65f6\u521b\u5efa</li> <li>\u6d41\u5f0f\u54cd\u5e94\u4e8b\u4ef6\uff1a\u6d41\u5f0f\u6a21\u5f0f\u4e0b\u6bcf\u4e2a\u54cd\u5e94\u5757\u90fd\u4f1a\u521b\u5efa</li> <li>\u5de5\u5177\u8c03\u7528\u4e8b\u4ef6\uff1aAgent \u8c03\u7528\u5de5\u5177\u65f6\u521b\u5efa</li> <li>\u9519\u8bef\u4e8b\u4ef6\uff1a\u53d1\u751f\u9519\u8bef\u65f6\u521b\u5efa</li> <li>Agent \u8f6c\u79fb\u4e8b\u4ef6\uff1aAgent \u8f6c\u79fb\u7ed9\u5176\u4ed6 Agent \u65f6\u521b\u5efa</li> <li>\u5b8c\u6210\u4e8b\u4ef6\uff1aAgent \u6267\u884c\u5b8c\u6210\u65f6\u521b\u5efa</li> </ol> <p>\u6839\u636e <code>model.Response.Object</code> \u5b57\u6bb5\uff0cEvent \u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u7c7b\u578b\uff1a</p> <pre><code>const (\n    // \u9519\u8bef\u4e8b\u4ef6\n    ObjectTypeError = \"error\"\n\n    // \u5de5\u5177\u54cd\u5e94\u4e8b\u4ef6\n    ObjectTypeToolResponse = \"tool.response\"\n\n    // \u9884\u5904\u7406\u4e8b\u4ef6\n    ObjectTypePreprocessingBasic = \"preprocessing.basic\"\n    ObjectTypePreprocessingContent = \"preprocessing.content\"\n    ObjectTypePreprocessingIdentity = \"preprocessing.identity\"\n    ObjectTypePreprocessingInstruction = \"preprocessing.instruction\"\n    ObjectTypePreprocessingPlanning = \"preprocessing.planning\"\n\n    // \u540e\u5904\u7406\u4e8b\u4ef6\n    ObjectTypePostprocessingPlanning = \"postprocessing.planning\"\n    ObjectTypePostprocessingCodeExecution = \"postprocessing.code_execution\"\n\n    // Agent \u8f6c\u79fb\u4e8b\u4ef6\n    ObjectTypeTransfer = \"agent.transfer\"\n\n    // Runner \u5b8c\u6210\u4e8b\u4ef6\n    ObjectTypeRunnerCompletion = \"runner.completion\"\n)\n</code></pre>"},{"location":"zh/event/#event_4","title":"Event \u521b\u5efa","text":"<p>\u5728\u5f00\u53d1\u81ea\u5b9a\u4e49 Agent \u7c7b\u578b\u6216 Processor \u65f6\uff0c\u9700\u8981\u521b\u5efa Event\u3002</p> <p>Event \u63d0\u4f9b\u4e86\u4e09\u79cd\u521b\u5efa\u65b9\u6cd5\uff0c\u9002\u7528\u4e8e\u4e0d\u540c\u573a\u666f\u3002</p> <pre><code>// \u521b\u5efa\u65b0\u4e8b\u4ef6\nfunc New(invocationID, author string, opts ...Option) *Event\n\n// \u521b\u5efa\u9519\u8bef\u4e8b\u4ef6\nfunc NewErrorEvent(invocationID, author, errorType, errorMessage string) *Event\n\n// \u4ece\u54cd\u5e94\u521b\u5efa\u4e8b\u4ef6\nfunc NewResponseEvent(invocationID, author string, response *model.Response) *Event\n</code></pre> <p>\u53c2\u6570\u8bf4\u660e\uff1a</p> <ul> <li><code>invocationID string</code>\uff1a\u8c03\u7528\u552f\u4e00\u6807\u8bc6</li> <li><code>author string</code>\uff1a\u4e8b\u4ef6\u53d1\u8d77\u8005</li> <li><code>opts ...Option</code>\uff1a\u53ef\u9009\u7684\u914d\u7f6e\u9009\u9879\uff08\u4ec5 New \u65b9\u6cd5\uff09</li> <li><code>errorType string</code>\uff1a\u9519\u8bef\u7c7b\u578b\uff08\u4ec5 NewErrorEvent \u65b9\u6cd5\uff09</li> <li><code>errorMessage string</code>\uff1a\u9519\u8bef\u6d88\u606f\uff08\u4ec5 NewErrorEvent \u65b9\u6cd5\uff09</li> <li><code>response *model.Response</code>\uff1a\u54cd\u5e94\u5bf9\u8c61\uff08\u4ec5 NewResponseEvent \u65b9\u6cd5\uff09</li> </ul> <p>\u6846\u67b6\u652f\u6301\u4ee5\u4e0b Option \u7528\u4ee5\u914d\u7f6e Event\uff1a</p> <ul> <li><code>WithBranch(branch string)</code>\uff1a\u8bbe\u7f6e\u4e8b\u4ef6\u7684\u5206\u652f\u6807\u8bc6</li> <li><code>WithResponse(response *model.Response)</code>\uff1a\u8bbe\u7f6e\u4e8b\u4ef6\u7684\u54cd\u5e94\u5185\u5bb9</li> <li><code>WithObject(o string)</code>\uff1a\u8bbe\u7f6e\u4e8b\u4ef6\u7684\u7c7b\u578b</li> </ul> <p>\u793a\u4f8b\uff1a <pre><code>// \u521b\u5efa\u57fa\u672c\u4e8b\u4ef6\nevt := event.New(\"invoke-123\", \"agent\")\n\n// \u521b\u5efa\u5e26\u5206\u652f\u7684\u4e8b\u4ef6\nevt := event.New(\"invoke-123\", \"agent\", event.WithBranch(\"main\"))\n\n// \u521b\u5efa\u9519\u8bef\u4e8b\u4ef6\nevt := event.NewErrorEvent(\"invoke-123\", \"agent\", \"api_error\", \"\u8bf7\u6c42\u8d85\u65f6\")\n\n// \u4ece\u54cd\u5e94\u521b\u5efa\u4e8b\u4ef6\nresponse := &amp;model.Response{\n    Object: \"chat.completion\",\n    Done:   true,\n    Choices: []model.Choice{{Message: model.Message{Role: \"assistant\", Content: \"Hello!\"}}},\n}\nevt := event.NewResponseEvent(\"invoke-123\", \"agent\", response)\n</code></pre></p>"},{"location":"zh/event/#agenttool","title":"\u5de5\u5177\u54cd\u5e94\u6d41\u5f0f\u8f93\u51fa\uff08\u542b AgentTool \u8f6c\u53d1\uff09","text":"<p>\u5f53\u8c03\u7528\u652f\u6301\u6d41\u5f0f\u7684\u5de5\u5177\uff08\u5305\u62ec AgentTool\uff09\u65f6\uff0c\u6846\u67b6\u4f1a\u53d1\u9001 <code>tool.response</code> \u4e8b\u4ef6\uff1a</p> <ul> <li>\u6d41\u5f0f\u5206\u7247\uff1a\u5185\u5bb9\u5728 <code>choice.Delta.Content</code>\uff0c\u5e76\u4e14 <code>Done=false</code>\u3001<code>IsPartial=true</code></li> <li>\u6700\u7ec8\u6d88\u606f\uff1a<code>choice.Message.Role=tool</code>\uff0c\u5185\u5bb9\u5728 <code>choice.Message.Content</code></li> </ul> <p>\u5f53 AgentTool \u5f00\u542f <code>WithStreamInner(true)</code> \u65f6\uff0c\u8fd8\u4f1a\u628a\u5b50 Agent \u7684\u4e8b\u4ef6\u76f4\u63a5\u8f6c\u53d1\u5230\u7236\u6d41\u7a0b\uff1a</p> <ul> <li>\u5b50 Agent \u8f6c\u53d1\u4e8b\u4ef6\u4f9d\u7136\u662f <code>event.Event</code>\uff0c\u5176\u4e2d\u589e\u91cf\u5185\u5bb9\u540c\u6837\u5728 <code>choice.Delta.Content</code></li> <li>\u4e3a\u907f\u514d\u91cd\u590d\u6253\u5370\uff0c\u5b50 Agent \u6700\u7ec8\u6574\u6bb5\u6587\u672c\u4e0d\u4f1a\u518d\u6b21\u4f5c\u4e3a\u8f6c\u53d1\u4e8b\u4ef6\u51fa\u73b0\uff0c\u4f46\u4f1a\u88ab\u805a\u5408\u5230\u6700\u7ec8\u7684 <code>tool.response</code> \u5185\u5bb9\u4e2d\uff0c\u4f9b\u4e0b\u4e00\u8f6e LLM \u4f7f\u7528</li> </ul> <p>Runner \u4f1a\u81ea\u52a8\u9488\u5bf9\u9700\u8981\u5b8c\u6210\u4fe1\u53f7\u7684\u4e8b\u4ef6\uff08<code>RequiresCompletion=true</code>\uff09\u53d1\u9001\u5b8c\u6210\u4fe1\u53f7\uff0c\u4f7f\u7528\u8005\u65e0\u9700\u989d\u5916\u5904\u7406\u3002</p> <p>\u4e8b\u4ef6\u5faa\u73af\u4e2d\u7684\u5904\u7406\u793a\u4f8b\uff1a</p> <pre><code>if evt.Response != nil &amp;&amp; evt.Object == model.ObjectTypeToolResponse &amp;&amp; len(evt.Response.Choices) &gt; 0 {\n    for _, ch := range evt.Response.Choices {\n        if ch.Delta.Content != \"\" { // \u90e8\u5206\u7247\u6bb5\n            fmt.Print(ch.Delta.Content)\n            continue\n        }\n        if ch.Message.Role == model.RoleTool &amp;&amp; ch.Message.Content != \"\" { // \u6700\u7ec8\u5185\u5bb9\n            fmt.Println(strings.TrimSpace(ch.Message.Content))\n        }\n    }\n    continue // \u4e0d\u8981\u628a\u5de5\u5177\u54cd\u5e94\u5f53\u6210\u52a9\u624b\u5185\u5bb9\u6253\u5370\n}\n</code></pre> <p>\u63d0\u793a\uff1a\u81ea\u5b9a\u4e49\u4e8b\u4ef6\u65f6\uff0c\u4f18\u5148\u4f7f\u7528 <code>event.New(...)</code> \u642d\u914d <code>WithResponse</code>\u3001<code>WithBranch</code> \u7b49\uff0c\u4ee5\u4fdd\u8bc1 ID \u548c\u65f6\u95f4\u6233\u7b49\u5143\u6570\u636e\u4e00\u81f4\u3002</p>"},{"location":"zh/event/#event_5","title":"Event \u65b9\u6cd5","text":"<p>Event \u63d0\u4f9b\u4e86 <code>Clone</code> \u65b9\u6cd5\uff0c\u7528\u4e8e\u521b\u5efa Event \u7684\u6df1\u62f7\u8d1d\u3002</p> <pre><code>func (e *Event) Clone() *Event\n</code></pre>"},{"location":"zh/event/#event_6","title":"Event \u4f7f\u7528\u793a\u4f8b","text":"<p>\u8fd9\u4e2a\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u4f7f\u7528 Event \u5904\u7406 Agent \u7684\u6d41\u5f0f\u54cd\u5e94\u3001\u5de5\u5177\u8c03\u7528\u548c\u9519\u8bef\u5904\u7406\u3002</p>"},{"location":"zh/event/#_1","title":"\u6838\u5fc3\u6d41\u7a0b","text":"<ol> <li>\u53d1\u9001\u7528\u6237\u6d88\u606f\uff1a\u901a\u8fc7 <code>runner.Run()</code> \u542f\u52a8 Agent \u5904\u7406</li> <li>\u63a5\u6536\u4e8b\u4ef6\u6d41\uff1a\u5b9e\u65f6\u5904\u7406 Agent \u8fd4\u56de\u7684\u4e8b\u4ef6</li> <li>\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u4e8b\u4ef6\uff1a\u533a\u5206\u6d41\u5f0f\u5185\u5bb9\u3001\u5de5\u5177\u8c03\u7528\u3001\u9519\u8bef\u7b49</li> <li>\u53ef\u89c6\u5316\u8f93\u51fa\uff1a\u4e3a\u7528\u6237\u63d0\u4f9b\u53cb\u597d\u7684\u4ea4\u4e92\u4f53\u9a8c</li> </ol>"},{"location":"zh/event/#_2","title":"\u4ee3\u7801\u793a\u4f8b","text":"<pre><code>// processMessage \u5904\u7406\u5355\u6b21\u6d88\u606f\u4ea4\u4e92\nfunc (c *multiTurnChat) processMessage(ctx context.Context, userMessage string) error {\n    message := model.NewUserMessage(userMessage)\n\n    // \u901a\u8fc7 runner \u8fd0\u884c agent\n    eventChan, err := c.runner.Run(ctx, c.userID, c.sessionID, message)\n    if err != nil {\n        return fmt.Errorf(\"failed to run agent: %w\", err)\n    }\n\n    // \u5904\u7406\u54cd\u5e94\n    return c.processResponse(eventChan)\n}\n\n// processResponse \u5904\u7406\u54cd\u5e94\uff0c\u5305\u62ec\u6d41\u5f0f\u54cd\u5e94\u548c\u5de5\u5177\u8c03\u7528\u53ef\u89c6\u5316\nfunc (c *multiTurnChat) processResponse(eventChan &lt;-chan *event.Event) error {\n    fmt.Print(\"\ud83e\udd16 Assistant: \")\n\n    var (\n        fullContent       string        // \u7d2f\u79ef\u7684\u5b8c\u6574\u5185\u5bb9\n        toolCallsDetected bool          // \u662f\u5426\u68c0\u6d4b\u5230\u5de5\u5177\u8c03\u7528\n        assistantStarted  bool          // Assistant \u662f\u5426\u5df2\u5f00\u59cb\u56de\u590d\n    )\n\n    for event := range eventChan {\n        // \u5904\u7406\u5355\u4e2a\u4e8b\u4ef6\n        if err := c.handleEvent(event, &amp;toolCallsDetected, &amp;assistantStarted, &amp;fullContent); err != nil {\n            return err\n        }\n\n        // \u68c0\u67e5\u662f\u5426\u4e3a\u6700\u7ec8\u4e8b\u4ef6\n        if event.Done &amp;&amp; !c.isToolEvent(event) {\n            fmt.Printf(\"\\n\")\n            break\n        }\n    }\n\n    return nil\n}\n\n// handleEvent \u5904\u7406\u5355\u4e2a\u4e8b\u4ef6\nfunc (c *multiTurnChat) handleEvent(\n    event *event.Event,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n    fullContent *string,\n) error {\n    // 1. \u5904\u7406\u9519\u8bef\u4e8b\u4ef6\n    if event.Error != nil {\n        fmt.Printf(\"\\n\u274c Error: %s\\n\", event.Error.Message)\n        return nil\n    }\n\n    // 2. \u5904\u7406\u5de5\u5177\u8c03\u7528\n    if c.handleToolCalls(event, toolCallsDetected, assistantStarted) {\n        return nil\n    }\n\n    // 3. \u5904\u7406\u5de5\u5177\u54cd\u5e94\n    if c.handleToolResponses(event) {\n        return nil\n    }\n\n    // 4. \u5904\u7406\u5185\u5bb9\n    c.handleContent(event, toolCallsDetected, assistantStarted, fullContent)\n\n    return nil\n}\n\n// handleToolCalls \u68c0\u6d4b\u5e76\u663e\u793a\u5de5\u5177\u8c03\u7528\nfunc (c *multiTurnChat) handleToolCalls(\n    event *event.Event,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n) bool {\n    if len(event.Choices) &gt; 0 &amp;&amp; len(event.Choices[0].Message.ToolCalls) &gt; 0 {\n        *toolCallsDetected = true\n        if *assistantStarted {\n            fmt.Printf(\"\\n\")\n        }\n        fmt.Printf(\"\ud83d\udd27 Tool calls initiated:\\n\")\n        for _, toolCall := range event.Choices[0].Message.ToolCalls {\n            fmt.Printf(\"   \u2022 %s (ID: %s)\\n\", toolCall.Function.Name, toolCall.ID)\n            if len(toolCall.Function.Arguments) &gt; 0 {\n                fmt.Printf(\"     Args: %s\\n\", string(toolCall.Function.Arguments))\n            }\n        }\n        fmt.Printf(\"\\n\ud83d\udd04 Executing tools...\\n\")\n        return true\n    }\n    return false\n}\n\n// handleToolResponses \u68c0\u6d4b\u5e76\u663e\u793a\u5de5\u5177\u54cd\u5e94\nfunc (c *multiTurnChat) handleToolResponses(event *event.Event) bool {\n    if event.Response != nil &amp;&amp; len(event.Response.Choices) &gt; 0 {\n        for _, choice := range event.Response.Choices {\n            if choice.Message.Role == model.RoleTool &amp;&amp; choice.Message.ToolID != \"\" {\n                fmt.Printf(\"\u2705 Tool response (ID: %s): %s\\n\",\n                    choice.Message.ToolID,\n                    strings.TrimSpace(choice.Message.Content))\n                return true\n            }\n        }\n    }\n    return false\n}\n\n// handleContent \u5904\u7406\u5e76\u663e\u793a\u5185\u5bb9\nfunc (c *multiTurnChat) handleContent(\n    event *event.Event,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n    fullContent *string,\n) {\n    if len(event.Choices) &gt; 0 {\n        choice := event.Choices[0]\n        content := c.extractContent(choice)\n\n        if content != \"\" {\n            c.displayContent(content, toolCallsDetected, assistantStarted, fullContent)\n        }\n    }\n}\n\n// extractContent \u6839\u636e\u6d41\u5f0f\u6a21\u5f0f\u63d0\u53d6\u5185\u5bb9\nfunc (c *multiTurnChat) extractContent(choice model.Choice) string {\n    if c.streaming {\n        // \u6d41\u5f0f\u6a21\u5f0f\uff1a\u4f7f\u7528\u589e\u91cf\u5185\u5bb9\n        return choice.Delta.Content\n    }\n    // \u975e\u6d41\u5f0f\u6a21\u5f0f\uff1a\u4f7f\u7528\u5b8c\u6574\u6d88\u606f\u5185\u5bb9\n    return choice.Message.Content\n}\n\n// displayContent \u5c06\u5185\u5bb9\u6253\u5370\u5230\u63a7\u5236\u53f0\nfunc (c *multiTurnChat) displayContent(\n    content string,\n    toolCallsDetected *bool,\n    assistantStarted *bool,\n    fullContent *string,\n) {\n    if !*assistantStarted {\n        if *toolCallsDetected {\n            fmt.Printf(\"\\n\ud83e\udd16 Assistant: \")\n        }\n        *assistantStarted = true\n    }\n    fmt.Print(content)\n    *fullContent += content\n}\n\n// isToolEvent \u68c0\u67e5\u4e8b\u4ef6\u662f\u5426\u4e3a\u5de5\u5177\u54cd\u5e94\nfunc (c *multiTurnChat) isToolEvent(event *event.Event) bool {\n    if event.Response == nil {\n        return false\n    }\n\n    // \u68c0\u67e5\u662f\u5426\u6709\u5de5\u5177\u8c03\u7528\n    if len(event.Choices) &gt; 0 &amp;&amp; len(event.Choices[0].Message.ToolCalls) &gt; 0 {\n        return true\n    }\n\n    // \u68c0\u67e5\u662f\u5426\u6709\u5de5\u5177 ID\n    if len(event.Choices) &gt; 0 &amp;&amp; event.Choices[0].Message.ToolID != \"\" {\n        return true\n    }\n\n    // \u68c0\u67e5\u662f\u5426\u4e3a\u5de5\u5177\u89d2\u8272\n    for _, choice := range event.Response.Choices {\n        if choice.Message.Role == model.RoleTool {\n            return true\n        }\n    }\n\n    return false\n}\n</code></pre>"},{"location":"zh/graph/","title":"Graph \u5305\u4f7f\u7528\u6307\u5357","text":"<p>Graph \u5305\u662f trpc-agent-go \u4e2d\u7528\u4e8e\u6784\u5efa\u548c\u6267\u884c\u5de5\u4f5c\u6d41\u7684\u6838\u5fc3\u7ec4\u4ef6\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b\u578b\u5b89\u5168\u3001\u53ef\u6269\u5c55\u7684\u56fe\u6267\u884c\u5f15\u64ce\uff0c\u652f\u6301\u590d\u6742\u7684 AI \u5de5\u4f5c\u6d41\u7f16\u6392\u3002</p>"},{"location":"zh/graph/#_1","title":"\u6982\u8ff0","text":"<p>Graph \u5305\u5141\u8bb8\u60a8\u5c06\u590d\u6742\u7684 AI \u5de5\u4f5c\u6d41\u5efa\u6a21\u4e3a\u6709\u5411\u56fe\uff0c\u5176\u4e2d\u8282\u70b9\u4ee3\u8868\u5904\u7406\u6b65\u9aa4\uff0c\u8fb9\u4ee3\u8868\u6570\u636e\u6d41\u548c\u63a7\u5236\u6d41\u3002\u5b83\u7279\u522b\u9002\u5408\u6784\u5efa\u9700\u8981\u6761\u4ef6\u8def\u7531\u3001\u72b6\u6001\u7ba1\u7406\u548c\u591a\u6b65\u9aa4\u5904\u7406\u7684 AI \u5e94\u7528\u3002</p>"},{"location":"zh/graph/#_2","title":"\u4f7f\u7528\u6a21\u5f0f","text":"<p>Graph \u5305\u7684\u4f7f\u7528\u9075\u5faa\u4ee5\u4e0b\u6a21\u5f0f\uff1a</p> <ol> <li>\u521b\u5efa Graph\uff1a\u4f7f\u7528 <code>StateGraph</code> \u6784\u5efa\u5668\u5b9a\u4e49\u5de5\u4f5c\u6d41\u7ed3\u6784</li> <li>\u521b\u5efa GraphAgent\uff1a\u5c06\u7f16\u8bd1\u540e\u7684 Graph \u5305\u88c5\u4e3a Agent</li> <li>\u521b\u5efa Runner\uff1a\u4f7f\u7528 Runner \u7ba1\u7406\u4f1a\u8bdd\u548c\u6267\u884c\u73af\u5883</li> <li>\u6267\u884c\u5de5\u4f5c\u6d41\uff1a\u901a\u8fc7 Runner \u6267\u884c\u5de5\u4f5c\u6d41\u5e76\u5904\u7406\u7ed3\u679c</li> </ol> <p>\u8fd9\u79cd\u6a21\u5f0f\u63d0\u4f9b\u4e86\uff1a</p> <ul> <li>\u7c7b\u578b\u5b89\u5168\uff1a\u901a\u8fc7\u72b6\u6001\u6a21\u5f0f\u786e\u4fdd\u6570\u636e\u4e00\u81f4\u6027</li> <li>\u4f1a\u8bdd\u7ba1\u7406\uff1a\u652f\u6301\u591a\u7528\u6237\u3001\u591a\u4f1a\u8bdd\u7684\u5e76\u53d1\u6267\u884c</li> <li>\u4e8b\u4ef6\u6d41\uff1a\u5b9e\u65f6\u76d1\u63a7\u5de5\u4f5c\u6d41\u6267\u884c\u8fdb\u5ea6</li> <li>\u9519\u8bef\u5904\u7406\uff1a\u7edf\u4e00\u7684\u9519\u8bef\u5904\u7406\u548c\u6062\u590d\u673a\u5236</li> </ul>"},{"location":"zh/graph/#agent","title":"Agent \u96c6\u6210","text":"<p>GraphAgent \u5b9e\u73b0\u4e86 <code>agent.Agent</code> \u63a5\u53e3\uff0c\u53ef\u4ee5\uff1a</p> <ul> <li>\u4f5c\u4e3a\u72ec\u7acb Agent\uff1a\u901a\u8fc7 Runner \u76f4\u63a5\u6267\u884c</li> <li>\u4f5c\u4e3a SubAgent\uff1a\u88ab\u5176\u4ed6 Agent\uff08\u5982 LLMAgent\uff09\u4f5c\u4e3a\u5b50 Agent \u4f7f\u7528</li> <li>\u6302\u8f7d SubAgent\uff1a\u901a\u8fc7 <code>graphagent.WithSubAgents</code> \u914d\u7f6e\u5b50 Agent\uff0c\u5e76\u5728\u56fe\u4e2d\u4f7f\u7528 <code>AddAgentNode</code> \u59d4\u6258\u6267\u884c</li> </ul> <p>\u8fd9\u79cd\u8bbe\u8ba1\u4f7f\u5f97 GraphAgent \u65e2\u80fd\u63a5\u5165\u5176\u4ed6 Agent\uff0c\u4e5f\u80fd\u5728\u81ea\u8eab\u5de5\u4f5c\u6d41\u4e2d\u7075\u6d3b\u8c03\u5ea6\u5b50 Agent\u3002</p>"},{"location":"zh/graph/#_3","title":"\u4e3b\u8981\u7279\u6027","text":"<ul> <li>\u7c7b\u578b\u5b89\u5168\u7684\u72b6\u6001\u7ba1\u7406\uff1a\u4f7f\u7528 Schema \u5b9a\u4e49\u72b6\u6001\u7ed3\u6784\uff0c\u652f\u6301\u81ea\u5b9a\u4e49 Reducer</li> <li>\u6761\u4ef6\u8def\u7531\uff1a\u57fa\u4e8e\u72b6\u6001\u52a8\u6001\u9009\u62e9\u6267\u884c\u8def\u5f84</li> <li>LLM \u8282\u70b9\u96c6\u6210\uff1a\u5185\u7f6e\u5bf9\u5927\u578b\u8bed\u8a00\u6a21\u578b\u7684\u652f\u6301</li> <li>\u5de5\u5177\u8282\u70b9\uff1a\u652f\u6301\u51fd\u6570\u8c03\u7528\u548c\u5916\u90e8\u5de5\u5177\u96c6\u6210</li> <li>Agent \u8282\u70b9\uff1a\u901a\u8fc7\u5b50 Agent \u5c06\u5176\u4ed6 Agent \u878d\u5165\u56fe\u4e2d</li> <li>\u6d41\u5f0f\u6267\u884c\uff1a\u652f\u6301\u5b9e\u65f6\u4e8b\u4ef6\u6d41\u548c\u8fdb\u5ea6\u8ddf\u8e2a</li> <li>\u5e76\u53d1\u5b89\u5168\uff1a\u7ebf\u7a0b\u5b89\u5168\u7684\u56fe\u6267\u884c</li> <li>\u57fa\u4e8e\u68c0\u67e5\u70b9\u7684\u65f6\u95f4\u65c5\u884c\uff1a\u6d4f\u89c8\u6267\u884c\u5386\u53f2\u5e76\u6062\u590d\u4e4b\u524d\u7684\u72b6\u6001</li> <li>\u4eba\u673a\u534f\u4f5c (HITL)\uff1a\u652f\u6301\u5e26\u6709\u4e2d\u65ad\u548c\u6062\u590d\u529f\u80fd\u7684\u4ea4\u4e92\u5f0f\u5de5\u4f5c\u6d41</li> <li>\u539f\u5b50\u68c0\u67e5\u70b9\uff1a\u539f\u5b50\u5b58\u50a8\u68c0\u67e5\u70b9\u548c\u5f85\u5199\u5165\u6570\u636e\uff0c\u786e\u4fdd\u53ef\u9760\u7684\u6062\u590d</li> <li>\u68c0\u67e5\u70b9\u8c31\u7cfb\uff1a\u8ddf\u8e2a\u5f62\u6210\u6267\u884c\u7ebf\u7a0b\u7684\u76f8\u5173\u68c0\u67e5\u70b9\u53ca\u5176\u7236\u5b50\u5173\u7cfb</li> </ul>"},{"location":"zh/graph/#_4","title":"\u6838\u5fc3\u6982\u5ff5","text":""},{"location":"zh/graph/#1-graph","title":"1. \u56fe (Graph)","text":"<p>\u56fe\u662f\u5de5\u4f5c\u6d41\u7684\u6838\u5fc3\u7ed3\u6784\uff0c\u7531\u8282\u70b9\u548c\u8fb9\u7ec4\u6210\uff1a</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\n// \u521b\u5efa\u72b6\u6001\u6a21\u5f0f\nschema := graph.NewStateSchema()\n\n// \u521b\u5efa\u56fe\ngraph := graph.New(schema)\n</code></pre> <p>\u865a\u62df\u8282\u70b9\uff1a</p> <ul> <li><code>Start</code>\uff1a\u865a\u62df\u8d77\u59cb\u8282\u70b9\uff0c\u901a\u8fc7 <code>SetEntryPoint()</code> \u81ea\u52a8\u8fde\u63a5</li> <li><code>End</code>\uff1a\u865a\u62df\u7ed3\u675f\u8282\u70b9\uff0c\u901a\u8fc7 <code>SetFinishPoint()</code> \u81ea\u52a8\u8fde\u63a5</li> <li>\u8fd9\u4e9b\u8282\u70b9\u4e0d\u9700\u8981\u663e\u5f0f\u521b\u5efa\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u5904\u7406\u8fde\u63a5</li> </ul>"},{"location":"zh/graph/#executor-executioncontext","title":"\u8fd0\u884c\u6001\u9694\u79bb\uff08Executor \u4e0e ExecutionContext\uff09","text":"<ul> <li>Executor \u8bbe\u8ba1\u4e3a\u53ef\u590d\u7528\uff0c\u4e14\u5728\u5e76\u53d1\u573a\u666f\u4e0b\u662f\u5b89\u5168\u7684\uff1a\u5b83\u4e0d\u6301\u6709\u5355\u6b21\u8fd0\u884c\u7684\u53ef\u53d8\u72b6\u6001\u3002</li> <li>\u5355\u6b21\u8fd0\u884c\u76f8\u5173\u7684\u6570\u636e\uff08\u4f8b\u5982\u4ece\u68c0\u67e5\u70b9\u6062\u590d\u5f97\u5230\u7684 lastCheckpoint\u3001versionsSeen\u3001pendingWrites\uff09\u5747\u5b58\u653e\u5728\u672c\u6b21\u8fd0\u884c\u521b\u5efa\u7684 ExecutionContext \u4e2d\u3002</li> <li>\u50cf resumeFromCheckpoint \u8fd9\u6837\u7684\u8f85\u52a9\u51fd\u6570\u53ea\u4ece\u68c0\u67e5\u70b9\u5b58\u50a8\u8bfb\u53d6\u5e76\u91cd\u5efa\u72b6\u6001\uff0c\u4e0d\u4f1a\u6539\u5199 Executor\uff1b\u8c03\u7528\u65b9\u5e94\u5c06\u9700\u8981\u7684\u68c0\u67e5\u70b9\u4fe1\u606f\u4f20\u5165\u672c\u6b21\u8fd0\u884c\u7684 ExecutionContext\u3002</li> <li>\u5b8c\u6210\u4e8b\u4ef6\u7684\u5e8f\u5217\u5316\u57fa\u4e8e\u6df1\u62f7\u8d1d\u5feb\u7167\uff0c\u5e76\u8df3\u8fc7\u4e0d\u53ef\u5e8f\u5217\u5316/\u5185\u90e8\u952e\uff0c\u907f\u514d\u6570\u636e\u7ade\u4e89\u5e76\u7f29\u51cf\u8d1f\u8f7d\u3002</li> </ul>"},{"location":"zh/graph/#2-node","title":"2. \u8282\u70b9 (Node)","text":"<p>\u8282\u70b9\u4ee3\u8868\u5de5\u4f5c\u6d41\u4e2d\u7684\u4e00\u4e2a\u5904\u7406\u6b65\u9aa4\uff1a</p> <pre><code>import (\n    \"context\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\n// \u8282\u70b9\u51fd\u6570\u7b7e\u540d\ntype NodeFunc func(ctx context.Context, state graph.State) (any, error)\n\n// \u521b\u5efa\u8282\u70b9\nnode := &amp;graph.Node{\n    ID:          \"process_data\",\n    Name:        \"\u6570\u636e\u5904\u7406\",\n    Description: \"\u5904\u7406\u8f93\u5165\u6570\u636e\",\n    Function:    processDataFunc,\n}\n</code></pre>"},{"location":"zh/graph/#3-state","title":"3. \u72b6\u6001 (State)","text":"<p>\u72b6\u6001\u662f\u5728\u8282\u70b9\u95f4\u4f20\u9012\u7684\u6570\u636e\u5bb9\u5668\uff1a</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\n// \u72b6\u6001\u662f\u4e00\u4e2a\u952e\u503c\u5bf9\u6620\u5c04\ntype State map[string]any\n\n// \u7528\u6237\u81ea\u5b9a\u4e49\u7684\u72b6\u6001\u952e\nconst (\n    StateKeyInput         = \"input\"          // \u8f93\u5165\u6570\u636e\n    StateKeyResult        = \"result\"         // \u5904\u7406\u7ed3\u679c\n    StateKeyProcessedData = \"processed_data\" // \u5904\u7406\u540e\u7684\u6570\u636e\n    StateKeyStatus        = \"status\"         // \u5904\u7406\u72b6\u6001\n)\n</code></pre> <p>\u5185\u7f6e\u72b6\u6001\u952e\uff1a</p> <p>Graph \u5305\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5185\u7f6e\u72b6\u6001\u952e\uff0c\u4e3b\u8981\u7528\u4e8e\u7cfb\u7edf\u5185\u90e8\u901a\u4fe1\uff1a</p> <p>\u7528\u6237\u53ef\u8bbf\u95ee\u7684\u5185\u7f6e\u952e\uff1a</p> <ul> <li><code>StateKeyUserInput</code>\uff1a\u7528\u6237\u8f93\u5165\uff08\u4e00\u6b21\u6027\uff0c\u6d88\u8d39\u540e\u6e05\u7a7a\uff0c\u7531 LLM \u8282\u70b9\u81ea\u52a8\u6301\u4e45\u5316\uff09</li> <li><code>StateKeyOneShotMessages</code>\uff1a\u4e00\u6b21\u6027\u6d88\u606f\uff08\u5b8c\u6574\u8986\u76d6\u672c\u8f6e\u8f93\u5165\uff0c\u6d88\u8d39\u540e\u6e05\u7a7a\uff09</li> <li><code>StateKeyLastResponse</code>\uff1a\u6700\u540e\u54cd\u5e94\uff08\u7528\u4e8e\u8bbe\u7f6e\u6700\u7ec8\u8f93\u51fa\uff0cExecutor \u4f1a\u8bfb\u53d6\u6b64\u503c\u4f5c\u4e3a\u7ed3\u679c\uff09</li> <li><code>StateKeyMessages</code>\uff1a\u6d88\u606f\u5386\u53f2\uff08\u6301\u4e45\u5316\uff0c\u652f\u6301 append + MessageOp \u8865\u4e01\u64cd\u4f5c\uff09</li> <li><code>StateKeyNodeResponses</code>\uff1a\u6309\u8282\u70b9\u5b58\u50a8\u7684\u54cd\u5e94\u6620\u5c04\u3002\u952e\u4e3a\u8282\u70b9 ID\uff0c\u503c\u4e3a\u8be5   \u8282\u70b9\u7684\u6700\u7ec8\u6587\u672c\u54cd\u5e94\u3002<code>StateKeyLastResponse</code> \u7528\u4e8e\u4e32\u884c\u8def\u5f84\u4e0a\u7684\u6700\u7ec8\u8f93   \u51fa\uff1b\u5f53\u591a\u4e2a\u5e76\u884c\u8282\u70b9\u5728\u67d0\u5904\u6c47\u5408\u65f6\uff0c\u5e94\u4ece <code>StateKeyNodeResponses</code> \u4e2d\u6309\u8282   \u70b9\u8bfb\u53d6\u5404\u81ea\u7684\u8f93\u51fa\u3002</li> <li><code>StateKeyMetadata</code>\uff1a\u5143\u6570\u636e\uff08\u7528\u6237\u53ef\u7528\u7684\u901a\u7528\u5143\u6570\u636e\u5b58\u50a8\uff09</li> </ul> <p>\u7cfb\u7edf\u5185\u90e8\u952e\uff08\u7528\u6237\u4e0d\u5e94\u76f4\u63a5\u4f7f\u7528\uff09\uff1a</p> <ul> <li><code>StateKeySession</code>\uff1a\u4f1a\u8bdd\u4fe1\u606f\uff08\u7531 GraphAgent \u81ea\u52a8\u8bbe\u7f6e\uff09</li> <li><code>StateKeyExecContext</code>\uff1a\u6267\u884c\u4e0a\u4e0b\u6587\uff08\u7531 Executor \u81ea\u52a8\u8bbe\u7f6e\uff09</li> <li><code>StateKeyToolCallbacks</code>\uff1a\u5de5\u5177\u56de\u8c03\uff08\u7531 Executor \u81ea\u52a8\u8bbe\u7f6e\uff09</li> <li><code>StateKeyModelCallbacks</code>\uff1a\u6a21\u578b\u56de\u8c03\uff08\u7531 Executor \u81ea\u52a8\u8bbe\u7f6e\uff09</li> </ul> <p>\u7528\u6237\u5e94\u8be5\u4f7f\u7528\u81ea\u5b9a\u4e49\u72b6\u6001\u952e\u6765\u5b58\u50a8\u4e1a\u52a1\u6570\u636e\uff0c\u53ea\u5728\u5fc5\u8981\u65f6\u4f7f\u7528\u7528\u6237\u53ef\u8bbf\u95ee\u7684\u5185\u7f6e\u72b6\u6001\u952e\u3002</p>"},{"location":"zh/graph/#4-stateschema","title":"4. \u72b6\u6001\u6a21\u5f0f (StateSchema)","text":"<p>\u72b6\u6001\u6a21\u5f0f\u5b9a\u4e49\u72b6\u6001\u7684\u7ed3\u6784\u548c\u884c\u4e3a\uff1a</p> <pre><code>import (\n    \"reflect\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\n// \u521b\u5efa\u72b6\u6001\u6a21\u5f0f\nschema := graph.NewStateSchema()\n\n// \u6dfb\u52a0\u5b57\u6bb5\u5b9a\u4e49\nschema.AddField(\"counter\", graph.StateField{\n    Type:    reflect.TypeOf(0),\n    Reducer: graph.DefaultReducer,\n    Default: func() any { return 0 },\n})\n</code></pre>"},{"location":"zh/graph/#_5","title":"\u4f7f\u7528\u6307\u5357","text":""},{"location":"zh/graph/#io","title":"\u8282\u70b9 I/O \u7ea6\u5b9a","text":"<p>\u8282\u70b9\u4e4b\u95f4\u4ec5\u901a\u8fc7\u5171\u4eab\u72b6\u6001 State \u4f20\u9012\u6570\u636e\u3002\u6bcf\u4e2a\u8282\u70b9\u8fd4\u56de\u4e00\u4e2a state delta\uff0c\u6309 Schema \u7684 Reducer \u5408\u5e76\u5230\u5168\u5c40 State\uff0c\u4e0b\u6e38\u8282\u70b9\u4ece State \u8bfb\u53d6\u4e0a\u6e38\u4ea7\u51fa\u3002</p> <ul> <li>\u5e38\u7528\u5185\u7f6e\u952e\uff08\u5bf9\u7528\u6237\u53ef\u89c1\uff09<ul> <li><code>user_input</code>\uff1a\u4e00\u6b21\u6027\u7528\u6237\u8f93\u5165\uff0c\u88ab\u4e0b\u4e00\u4e2a LLM/Agent \u8282\u70b9\u6d88\u8d39\u540e\u6e05\u7a7a</li> <li><code>one_shot_messages</code>\uff1a\u4e00\u6b21\u6027\u5b8c\u6574\u6d88\u606f\u8986\u76d6\uff0c\u7528\u4e8e\u4e0b\u4e00\u6b21 LLM \u8c03\u7528\uff0c\u6267\u884c\u540e\u6e05\u7a7a</li> <li><code>messages</code>\uff1a\u6301\u4e45\u5316\u7684\u6d88\u606f\u5386\u53f2\uff08LLM/Tools \u4f1a\u8ffd\u52a0\uff09\uff0c\u652f\u6301 MessageOp \u8865\u4e01</li> <li><code>last_response</code>\uff1a\u6700\u8fd1\u4e00\u6b21\u52a9\u624b\u6587\u672c\u56de\u590d</li> <li><code>node_responses</code>\uff1amap[nodeID]any\uff0c\u6309\u8282\u70b9\u4fdd\u5b58\u6700\u7ec8\u6587\u672c\u56de\u590d\u3002\u6700\u8fd1\u7ed3\u679c\u7528 <code>last_response</code></li> </ul> </li> </ul> <ul> <li>\u51fd\u6570\u8282\u70b9\uff08Function node\uff09<ul> <li>\u8f93\u5165\uff1a\u5b8c\u6574 State</li> <li>\u8f93\u51fa\uff1a\u8fd4\u56de <code>graph.State</code> \u589e\u91cf\uff0c\u5199\u5165\u81ea\u5b9a\u4e49\u952e\uff08\u9700\u5728 Schema \u4e2d\u58f0\u660e\uff09\uff0c\u5982 <code>{\"parsed_time\":\"...\"}</code></li> </ul> </li> </ul> <ul> <li>LLM \u8282\u70b9<ul> <li>\u8f93\u5165\u4f18\u5148\u7ea7\uff1a<code>one_shot_messages</code> \u2192 <code>user_input</code> \u2192 <code>messages</code></li> <li>\u8f93\u51fa\uff1a<ul> <li>\u5411 <code>messages</code> \u8ffd\u52a0\u52a9\u624b\u6d88\u606f</li> <li>\u8bbe\u7f6e <code>last_response</code></li> <li>\u8bbe\u7f6e <code>node_responses[&lt;llm_node_id&gt;]</code></li> </ul> </li> </ul> </li> </ul> <ul> <li>Tools \u8282\u70b9<ul> <li>\u8f93\u5165\uff1a\u4ece <code>messages</code> \u4e2d\u5bfb\u627e\u6700\u65b0\u7684\u5e26 <code>tool_calls</code> \u7684\u52a9\u624b\u6d88\u606f</li> <li>\u8f93\u51fa\uff1a\u5411 <code>messages</code> \u8ffd\u52a0\u5de5\u5177\u8fd4\u56de\u6d88\u606f</li> </ul> </li> </ul> <ul> <li>Agent \u8282\u70b9\uff08\u5b50\u4ee3\u7406\uff09<ul> <li>\u8f93\u5165\uff1aGraph \u7684 State \u901a\u8fc7 <code>Invocation.RunOptions.RuntimeState</code> \u4f20\u5165\u5b50\u4ee3\u7406<ul> <li>\u5b50\u4ee3\u7406\u7684 Model/Tool \u56de\u8c03\u53ef\u901a\u8fc7 <code>agent.InvocationFromContext(ctx)</code> \u8bbf\u95ee</li> </ul> </li> <li>\u7ed3\u675f\u8f93\u51fa\uff1a<ul> <li>\u8bbe\u7f6e <code>last_response</code></li> <li>\u8bbe\u7f6e <code>node_responses[&lt;agent_node_id&gt;]</code></li> <li>\u6e05\u7a7a <code>user_input</code></li> </ul> </li> </ul> </li> </ul> <p>\u63a8\u8350\u7528\u6cd5</p> <ul> <li>\u5728 Schema \u4e2d\u58f0\u660e\u4e1a\u52a1\u5b57\u6bb5\uff08\u5982 <code>parsed_time</code>\u3001<code>final_payload</code>\uff09\uff0c\u51fd\u6570\u8282\u70b9\u5199\u5165/\u8bfb\u53d6\u3002</li> <li>\u9700\u8981\u7ed9 LLM \u8282\u70b9\u6ce8\u5165\u7ed3\u6784\u5316\u63d0\u793a\u65f6\uff0c\u53ef\u5728\u524d\u7f6e\u8282\u70b9\u5199\u5165 <code>one_shot_messages</code>\uff08\u4f8b\u5982\u52a0\u5165\u5305\u542b\u89e3\u6790\u4fe1\u606f\u7684 system message\uff09\u3002</li> <li>\u9700\u8981\u6d88\u8d39\u4e0a\u6e38\u6587\u672c\u7ed3\u679c\u65f6\uff1a\u7d27\u90bb\u4e0b\u6e38\u8bfb\u53d6 <code>last_response</code>\uff0c\u6216\u5728\u4efb\u610f\u540e\u7eed\u8282\u70b9\u8bfb\u53d6 <code>node_responses[\u8282\u70b9ID]</code>\u3002</li> </ul> <p>\u793a\u4f8b\uff1a</p> <ul> <li><code>examples/graph/io_conventions</code>\uff1a\u51fd\u6570 + LLM + Agent \u7684 I/O \u6f14\u793a</li> <li><code>examples/graph/io_conventions_tools</code>\uff1a\u52a0\u5165 Tools \u8282\u70b9\uff0c\u5c55\u793a\u5982\u4f55\u83b7\u53d6\u5de5\u5177 JSON \u5e76\u843d\u5165 State</li> </ul>"},{"location":"zh/graph/#_6","title":"\u72b6\u6001\u952e\u5e38\u91cf\u4e0e\u6765\u6e90\uff08\u53ef\u76f4\u63a5\u5f15\u7528\uff09","text":"<ul> <li>\u5bfc\u5165\u5305\uff1a<code>import \"trpc.group/trpc-go/trpc-agent-go/graph\"</code></li> <li>\u5e38\u91cf\u5b9a\u4e49\u4f4d\u7f6e\uff1a<code>graph/state.go</code></li> </ul> <ul> <li>\u7528\u6237\u53ef\u89c1\u3001\u5e38\u7528\u952e<ul> <li><code>user_input</code> \u2192 \u5e38\u91cf <code>graph.StateKeyUserInput</code></li> <li><code>one_shot_messages</code> \u2192 \u5e38\u91cf <code>graph.StateKeyOneShotMessages</code></li> <li><code>messages</code> \u2192 \u5e38\u91cf <code>graph.StateKeyMessages</code></li> <li><code>last_response</code> \u2192 \u5e38\u91cf <code>graph.StateKeyLastResponse</code></li> <li><code>node_responses</code> \u2192 \u5e38\u91cf <code>graph.StateKeyNodeResponses</code></li> </ul> </li> </ul> <ul> <li>\u5176\u4ed6\u5e38\u7528\u952e<ul> <li><code>session</code> \u2192 <code>graph.StateKeySession</code></li> <li><code>metadata</code> \u2192 <code>graph.StateKeyMetadata</code></li> <li><code>current_node_id</code> \u2192 <code>graph.StateKeyCurrentNodeID</code></li> <li><code>exec_context</code> \u2192 <code>graph.StateKeyExecContext</code></li> <li><code>tool_callbacks</code> \u2192 <code>graph.StateKeyToolCallbacks</code></li> <li><code>model_callbacks</code> \u2192 <code>graph.StateKeyModelCallbacks</code></li> <li><code>agent_callbacks</code> \u2192 <code>graph.StateKeyAgentCallbacks</code></li> <li><code>parent_agent</code> \u2192 <code>graph.StateKeyParentAgent</code></li> </ul> </li> </ul> <p>\u4f7f\u7528\u793a\u4f8b\uff1a</p> <pre><code>import (\n    \"context\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\nfunc myNode(ctx context.Context, state graph.State) (any, error) {\n    // \u8bfb\u53d6\u4e0a\u4e00\u8282\u70b9\u6587\u672c\u8f93\u51fa\n    last, _ := state[graph.StateKeyLastResponse].(string)\n    // \u5199\u5165\u81ea\u5b9a\u4e49\u5b57\u6bb5\n    return graph.State{\"my_key\": last}, nil\n}\n</code></pre>"},{"location":"zh/graph/#statedelta","title":"\u4e8b\u4ef6\u5143\u6570\u636e\u952e\uff08StateDelta\uff09","text":"<ul> <li>\u5bfc\u5165\u5305\uff1a<code>import \"trpc.group/trpc-go/trpc-agent-go/graph\"</code></li> <li>\u5e38\u91cf\u5b9a\u4e49\u4f4d\u7f6e\uff1a<code>graph/events.go</code></li> </ul> <ul> <li>\u6a21\u578b\u5143\u6570\u636e\uff1a<code>_model_metadata</code> \u2192 <code>graph.MetadataKeyModel</code>\uff08\u7ed3\u6784\u4f53 <code>graph.ModelExecutionMetadata</code>\uff09</li> <li>\u5de5\u5177\u5143\u6570\u636e\uff1a<code>_tool_metadata</code> \u2192 <code>graph.MetadataKeyTool</code>\uff08\u7ed3\u6784\u4f53 <code>graph.ToolExecutionMetadata</code>\uff09</li> </ul> <p>\u4f7f\u7528\u793a\u4f8b\uff1a</p> <pre><code>if b, ok := event.StateDelta[graph.MetadataKeyModel]; ok {\n    var md graph.ModelExecutionMetadata\n    _ = json.Unmarshal(b, &amp;md)\n}\n</code></pre>"},{"location":"zh/graph/#1-graphagent-runner","title":"1. \u521b\u5efa GraphAgent \u548c Runner","text":"<p>\u7528\u6237\u4e3b\u8981\u901a\u8fc7\u521b\u5efa GraphAgent \u7136\u540e\u901a\u8fc7 Runner \u6765\u4f7f\u7528 Graph \u5305\u3002\u8fd9\u662f\u63a8\u8350\u7684\u4f7f\u7528\u6a21\u5f0f\uff1a</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/graphagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/event\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n)\n\nfunc main() {\n    // 1. \u521b\u5efa\u72b6\u6001\u6a21\u5f0f\n    schema := graph.MessagesStateSchema()\n\n    // 2. \u521b\u5efa\u72b6\u6001\u56fe\u6784\u5efa\u5668\n    stateGraph := graph.NewStateGraph(schema)\n\n    // 3. \u6dfb\u52a0\u8282\u70b9\n    stateGraph.AddNode(\"start\", startNodeFunc).\n        AddNode(\"process\", processNodeFunc)\n\n    // 4. \u8bbe\u7f6e\u8fb9\n    stateGraph.AddEdge(\"start\", \"process\")\n\n    // 5. \u8bbe\u7f6e\u5165\u53e3\u70b9\u548c\u7ed3\u675f\u70b9\n    // SetEntryPoint \u4f1a\u81ea\u52a8\u521b\u5efa\u865a\u62df Start \u8282\u70b9\u5230 \"start\" \u8282\u70b9\u7684\u8fb9\n    // SetFinishPoint \u4f1a\u81ea\u52a8\u521b\u5efa \"process\" \u8282\u70b9\u5230\u865a\u62df End \u8282\u70b9\u7684\u8fb9\n    stateGraph.SetEntryPoint(\"start\").\n        SetFinishPoint(\"process\")\n\n    // 6. \u7f16\u8bd1\u56fe\n    compiledGraph, err := stateGraph.Compile()\n    if err != nil {\n        panic(err)\n    }\n\n    // 7. \u521b\u5efa GraphAgent\n    graphAgent, err := graphagent.New(\"simple-workflow\", compiledGraph,\n        graphagent.WithDescription(\"\u7b80\u5355\u7684\u5de5\u4f5c\u6d41\u793a\u4f8b\"),\n        graphagent.WithInitialState(graph.State{}),\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    // 8. \u521b\u5efa\u4f1a\u8bdd\u670d\u52a1\n    sessionService := inmemory.NewSessionService()\n\n    // 9. \u521b\u5efa Runner\n    appRunner := runner.NewRunner(\n        \"simple-app\",\n        graphAgent,\n        runner.WithSessionService(sessionService),\n    )\n\n    // 10. \u6267\u884c\u5de5\u4f5c\u6d41\n    ctx := context.Background()\n    userID := \"user\"\n    sessionID := fmt.Sprintf(\"session-%d\", time.Now().Unix())\n\n    // \u521b\u5efa\u7528\u6237\u6d88\u606f\uff08Runner \u4f1a\u81ea\u52a8\u5c06\u6d88\u606f\u5185\u5bb9\u653e\u5165 StateKeyUserInput\uff09\n    message := model.NewUserMessage(\"Hello World\")\n\n    // \u901a\u8fc7 Runner \u6267\u884c\n    eventChan, err := appRunner.Run(ctx, userID, sessionID, message)\n    if err != nil {\n        panic(err)\n    }\n\n    // \u5904\u7406\u4e8b\u4ef6\u6d41\n    for event := range eventChan {\n        if event.Error != nil {\n            fmt.Printf(\"\u9519\u8bef: %s\\n\", event.Error.Message)\n            continue\n        }\n\n        if len(event.Choices) &gt; 0 {\n            choice := event.Choices[0]\n            if choice.Delta.Content != \"\" {\n                fmt.Print(choice.Delta.Content)\n            }\n        }\n\n        if event.Done {\n            break\n        }\n    }\n}\n\n// \u8282\u70b9\u51fd\u6570\u5b9e\u73b0\nfunc startNodeFunc(ctx context.Context, state graph.State) (any, error) {\n    // \u4ece\u5185\u7f6e\u7684 StateKeyUserInput \u83b7\u53d6\u7528\u6237\u8f93\u5165\uff08\u7531 Runner \u81ea\u52a8\u8bbe\u7f6e\uff09\n    input := state[graph.StateKeyUserInput].(string)\n    return graph.State{\n        StateKeyProcessedData: fmt.Sprintf(\"\u5904\u7406\u540e\u7684: %s\", input),\n    }, nil\n}\n\nfunc processNodeFunc(ctx context.Context, state graph.State) (any, error) {\n    processed := state[StateKeyProcessedData].(string)\n    result := fmt.Sprintf(\"\u7ed3\u679c: %s\", processed)\n    return graph.State{\n        StateKeyResult: result,\n        // \u4f7f\u7528\u5185\u7f6e\u7684 StateKeyLastResponse \u6765\u8bbe\u7f6e\u6700\u7ec8\u8f93\u51fa\n        graph.StateKeyLastResponse: fmt.Sprintf(\"\u6700\u7ec8\u7ed3\u679c: %s\", result),\n    }, nil\n}\n</code></pre>"},{"location":"zh/graph/#2-llm","title":"2. \u4f7f\u7528 LLM \u8282\u70b9","text":"<p>LLM \u8282\u70b9\u5b9e\u73b0\u4e86\u56fa\u5b9a\u7684\u4e09\u6bb5\u5f0f\u8f93\u5165\u89c4\u5219\uff0c\u65e0\u9700\u914d\u7f6e\uff1a</p> <ol> <li>OneShot \u4f18\u5148\uff1a\u82e5\u5b58\u5728 <code>one_shot_messages</code>\uff0c\u4ee5\u5b83\u4e3a\u672c\u8f6e\u8f93\u5165\u3002</li> <li>UserInput \u5176\u6b21\uff1a\u5426\u5219\u82e5\u5b58\u5728 <code>user_input</code>\uff0c\u81ea\u52a8\u6301\u4e45\u5316\u4e00\u6b21\u3002</li> <li>\u5386\u53f2\u9ed8\u8ba4\uff1a\u5426\u5219\u4ee5\u6301\u4e45\u5316\u5386\u53f2\u4f5c\u4e3a\u8f93\u5165\u3002</li> </ol> <pre><code>// \u521b\u5efa LLM \u6a21\u578b\nmodel := openai.New(\"gpt-4\")\n\n// \u6dfb\u52a0 LLM \u8282\u70b9\nstateGraph.AddLLMNode(\"analyze\", model,\n    `\u4f60\u662f\u4e00\u4e2a\u6587\u6863\u5206\u6790\u4e13\u5bb6\u3002\u5206\u6790\u63d0\u4f9b\u7684\u6587\u6863\u5e76\uff1a\n1. \u5206\u7c7b\u6587\u6863\u7c7b\u578b\u548c\u590d\u6742\u5ea6\n2. \u63d0\u53d6\u5173\u952e\u4e3b\u9898\n3. \u8bc4\u4f30\u5185\u5bb9\u8d28\u91cf\n\u8bf7\u63d0\u4f9b\u7ed3\u6784\u5316\u7684\u5206\u6790\u7ed3\u679c\u3002`,\n    nil) // \u5de5\u5177\u6620\u5c04\n</code></pre> <p>\u91cd\u8981\u8bf4\u660e\uff1a</p> <ul> <li>SystemPrompt \u4ec5\u7528\u4e8e\u672c\u6b21\u8f93\u5165\uff0c\u4e0d\u843d\u6301\u4e45\u5316\u72b6\u6001\u3002</li> <li>\u4e00\u6b21\u6027\u952e\uff08<code>user_input</code>/<code>one_shot_messages</code>\uff09\u5728\u6210\u529f\u6267\u884c\u540e\u81ea\u52a8\u6e05\u7a7a\u3002</li> <li>\u6240\u6709\u72b6\u6001\u66f4\u65b0\u90fd\u662f\u539f\u5b50\u6027\u7684\uff0c\u786e\u4fdd\u4e00\u81f4\u6027\u3002</li> <li>GraphAgent/Runner \u4ec5\u8bbe\u7f6e <code>user_input</code>\uff0c\u4e0d\u518d\u9884\u5148\u628a\u7528\u6237\u6d88\u606f\u5199\u5165   <code>messages</code>\u3002\u8fd9\u6837\u53ef\u4ee5\u5141\u8bb8\u5728 LLM \u8282\u70b9\u4e4b\u524d\u7684\u4efb\u610f\u8282\u70b9\u5bf9 <code>user_input</code>   \u8fdb\u884c\u4fee\u6539\uff0c\u5e76\u80fd\u5728\u540c\u4e00\u8f6e\u751f\u6548\u3002</li> </ul>"},{"location":"zh/graph/#_7","title":"\u4e09\u79cd\u8f93\u5165\u8303\u5f0f","text":"<ul> <li> <p>OneShot\uff08<code>StateKeyOneShotMessages</code>\uff09\uff1a</p> <ul> <li>\u5f53\u8be5\u952e\u5b58\u5728\u65f6\uff0c\u672c\u8f6e\u4ec5\u4f7f\u7528\u8fd9\u91cc\u63d0\u4f9b\u7684 <code>[]model.Message</code> \u8c03\u7528\u6a21\u578b\uff0c   \u901a\u5e38\u5305\u542b\u5b8c\u6574\u7684 system prompt \u4e0e user prompt\u3002\u8c03\u7528\u540e\u81ea\u52a8\u6e05\u7a7a\u3002</li> <li>\u9002\u7528\u573a\u666f\uff1a\u524d\u7f6e\u8282\u70b9\u4e13\u95e8\u6784\u9020 prompt \u7684\u5de5\u4f5c\u6d41\uff0c\u9700\u5b8c\u5168\u8986\u76d6\u672c\u8f6e\u8f93\u5165\u3002</li> </ul> </li> </ul> <ul> <li> <p>UserInput\uff08<code>StateKeyUserInput</code>\uff09\uff1a</p> <ul> <li>\u5f53 <code>user_input</code> \u975e\u7a7a\u65f6\uff0cLLM \u8282\u70b9\u4f1a\u53d6\u6301\u4e45\u5316\u5386\u53f2 <code>messages</code>\uff0c\u5e76\u5c06   \u672c\u8f6e\u7684\u7528\u6237\u8f93\u5165\u5408\u5e76\u540e\u53d1\u8d77\u8c03\u7528\u3002\u7ed3\u675f\u540e\u4f1a\u628a\u7528\u6237\u8f93\u5165\u4e0e\u52a9\u624b\u56de\u590d\u901a\u8fc7   <code>MessageOp</code>\uff08\u4f8b\u5982 <code>AppendMessages</code>\u3001<code>ReplaceLastUser</code>\uff09\u539f\u5b50\u6027\u5199\u5165   \u5230 <code>messages</code>\uff0c\u5e76\u81ea\u52a8\u6e05\u7a7a <code>user_input</code> \u4ee5\u907f\u514d\u91cd\u590d\u8ffd\u52a0\u3002</li> <li>\u9002\u7528\u573a\u666f\uff1a\u666e\u901a\u5bf9\u8bdd\u5f0f\u5de5\u4f5c\u6d41\uff0c\u5141\u8bb8\u5728\u524d\u7f6e\u8282\u70b9\u52a8\u6001\u8c03\u6574\u7528\u6237\u8f93\u5165\u3002</li> </ul> </li> </ul> <ul> <li>Messages only\uff08\u4ec5 <code>StateKeyMessages</code>\uff09\uff1a<ul> <li>\u591a\u7528\u4e8e\u5de5\u5177\u8c03\u7528\u56de\u8def\u3002\u5f53\u7b2c\u4e00\u8f6e\u7ecf\u7531 <code>user_input</code> \u53d1\u8d77\u540e\uff0c\u8def\u7531\u5230\u5de5\u5177   \u8282\u70b9\u6267\u884c\uff0c\u518d\u56de\u5230 LLM \u8282\u70b9\u65f6\uff0c\u56e0\u4e3a <code>user_input</code> \u5df2\u88ab\u6e05\u7a7a\uff0cLLM \u5c06\u8d70   \u201cMessages only\u201d \u5206\u652f\uff0c\u4ee5\u5386\u53f2\u4e2d\u7684 tool \u54cd\u5e94\u7ee7\u7eed\u63a8\u7406\u3002</li> </ul> </li> </ul>"},{"location":"zh/graph/#llm","title":"LLM \u6307\u4ee4\u4e2d\u7684\u5360\u4f4d\u7b26","text":"<p>LLM \u8282\u70b9\u7684 <code>instruction</code> \u652f\u6301\u5360\u4f4d\u7b26\u6ce8\u5165\uff08\u4e0e LLMAgent \u89c4\u5219\u4e00\u81f4\uff09\uff1a</p> <ul> <li><code>{key}</code> \u2192 \u66ff\u6362\u4e3a <code>session.State[\"key\"]</code></li> <li><code>{key?}</code> \u2192 \u53ef\u9009\uff0c\u7f3a\u5931\u65f6\u66ff\u6362\u4e3a\u7a7a</li> <li><code>{user:subkey}</code>\u3001<code>{app:subkey}</code>\u3001<code>{temp:subkey}</code> \u2192 \u8bbf\u95ee\u7528\u6237/\u5e94\u7528/\u4e34\u65f6\u547d\u540d\u7a7a\u95f4\uff08SessionService \u4f1a\u5c06 app/user \u4f5c\u7528\u57df\u5408\u5e76\u5230 session\uff0c\u5e76\u5e26\u4e0a\u524d\u7f00\uff09</li> </ul> <p>\u8bf4\u660e\uff1a</p> <ul> <li>GraphAgent \u4f1a\u628a\u5f53\u524d <code>*session.Session</code> \u5199\u5165\u56fe\u72b6\u6001\u7684 <code>StateKeySession</code>\uff0cLLM \u8282\u70b9\u636e\u6b64\u8bfb\u53d6\u6ce8\u5165\u503c</li> <li>\u65e0\u524d\u7f00\u952e\uff08\u5982 <code>research_topics</code>\uff09\u9700\u8981\u76f4\u63a5\u5b58\u5728\u4e8e <code>session.State</code></li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>mdl := openai.New(modelName)\nstateGraph.AddLLMNode(\n  \"research\",\n  mdl,\n  \"You are a research assistant. Focus: {research_topics}. User: {user:topics?}. App: {app:banner?}.\",\n  nil,\n)\n</code></pre> <p>\u53ef\u53c2\u8003\u53ef\u8fd0\u884c\u793a\u4f8b\uff1a<code>examples/graph/placeholder</code>\u3002</p>"},{"location":"zh/graph/#reducer-messageop","title":"\u901a\u8fc7 Reducer \u4e0e MessageOp \u5b9e\u73b0\u7684\u539f\u5b50\u66f4\u65b0","text":"<p>Graph \u5305\u7684\u6d88\u606f\u72b6\u6001\u652f\u6301 <code>MessageOp</code> \u8865\u4e01\u64cd\u4f5c\uff08\u5982 <code>ReplaceLastUser</code>\u3001 <code>AppendMessages</code> \u7b49\uff09\uff0c\u7531 <code>MessageReducer</code> \u5b9e\u73b0\u539f\u5b50\u5408\u5e76\u3002\u8fd9\u5e26\u6765\u4e24\u4e2a \u76f4\u63a5\u6536\u76ca\uff1a</p> <ul> <li>\u5141\u8bb8\u5728 LLM \u8282\u70b9\u4e4b\u524d\u4fee\u6539 <code>user_input</code>\uff0cLLM \u8282\u70b9\u4f1a\u636e\u6b64\u5728\u4e00\u6b21\u8fd4\u56de\u4e2d\u5c06   \u9700\u8981\u7684\u64cd\u4f5c\uff08\u4f8b\u5982\u66ff\u6362\u6700\u540e\u4e00\u6761\u7528\u6237\u6d88\u606f\u3001\u8ffd\u52a0\u52a9\u624b\u6d88\u606f\uff09\u4ee5\u8865\u4e01\u5f62\u5f0f\u8fd4\u56de\uff0c   \u6267\u884c\u5668\u4e00\u6b21\u6027\u843d\u5e93\uff0c\u907f\u514d\u7ade\u6001\u4e0e\u91cd\u590d\u3002`</li> <li>\u517c\u5bb9\u4f20\u7edf\u7684\u76f4\u63a5 <code>[]Message</code> \u8ffd\u52a0\u7528\u6cd5\uff0c\u540c\u65f6\u4e3a\u590d\u6742\u66f4\u65b0\u63d0\u4f9b\u66f4\u9ad8\u7684\u8868\u8fbe\u529b\u3002</li> </ul> <p>\u793a\u4f8b\uff1a\u5728\u524d\u7f6e\u8282\u70b9\u4fee\u6539 <code>user_input</code>\uff0c\u968f\u540e\u8fdb\u5165 LLM \u8282\u70b9\u3002</p> <pre><code>stateGraph.\n    AddNode(\"prepare_input\", func(ctx context.Context, s graph.State) (any, error) {\n        // \u6e05\u6d17/\u6539\u5199\u7528\u6237\u8f93\u5165\uff0c\u4f7f\u5176\u5728\u672c\u8f6e LLM \u4e2d\u751f\u6548\u3002\n        cleaned := strings.TrimSpace(s[graph.StateKeyUserInput].(string))\n        return graph.State{graph.StateKeyUserInput: cleaned}, nil\n    }).\n    AddLLMNode(\"ask\", modelInstance,\n        \"\u4f60\u662f\u4e00\u4e2a\u6709\u5e2e\u52a9\u7684\u52a9\u624b\u3002\u8bf7\u7b80\u6d01\u56de\u7b54\u3002\",\n        nil).\n    SetEntryPoint(\"prepare_input\").\n    SetFinishPoint(\"ask\")\n</code></pre>"},{"location":"zh/graph/#3-graphagent","title":"3. GraphAgent \u914d\u7f6e\u9009\u9879","text":"<p>GraphAgent \u652f\u6301\u591a\u79cd\u914d\u7f6e\u9009\u9879\uff1a</p> <pre><code>// \u521b\u5efa GraphAgent \u65f6\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u9009\u9879\ngraphAgent, err := graphagent.New(\n    \"workflow-name\",\n    compiledGraph,\n    graphagent.WithDescription(\"\u5de5\u4f5c\u6d41\u63cf\u8ff0\"),\n    graphagent.WithInitialState(graph.State{\n        \"initial_data\": \"\u521d\u59cb\u6570\u636e\",\n    }),\n    graphagent.WithChannelBufferSize(1024),           // \u8c03\u6574\u4e8b\u4ef6\u901a\u9053\u7f13\u51b2\u533a\n    graphagent.WithCheckpointSaver(memorySaver),      // \u4f7f\u7528\u6301\u4e45\u5316\u68c0\u67e5\u70b9\n    graphagent.WithSubAgents([]agent.Agent{subAgent}), // \u914d\u7f6e\u5b50 Agent\n    graphagent.WithAgentCallbacks(&amp;agent.Callbacks{\n        // Agent \u7ea7\u56de\u8c03\u914d\u7f6e\n    }),\n)\n</code></pre> <p>\u6a21\u578b/\u5de5\u5177\u56de\u8c03\u9700\u8981\u5728\u8282\u70b9\u7ea7\u914d\u7f6e\uff0c\u4f8b\u5982 <code>AddLLMNode(..., graph.WithModelCallbacks(...))</code> \u6216 <code>AddToolsNode(..., graph.WithToolCallbacks(...))</code>\u3002</p> <p>\u914d\u7f6e\u4e86\u5b50 Agent \u540e\uff0c\u53ef\u4ee5\u5728\u56fe\u4e2d\u4f7f\u7528 Agent \u8282\u70b9\u59d4\u6258\u6267\u884c\uff1a</p> <pre><code>// \u5047\u8bbe subAgent.Info().Name == \"assistant\"\nstateGraph.AddAgentNode(\"assistant\",\n    graph.WithName(\"\u5b50 Agent \u8c03\u5ea6\"),\n    graph.WithDescription(\"\u8c03\u7528\u9884\u5148\u6ce8\u518c\u7684 assistant Agent\"),\n)\n\n// \u6267\u884c\u65f6 GraphAgent \u4f1a\u5728\u81ea\u8eab\u7684 SubAgents \u4e2d\u67e5\u627e\u540c\u540d Agent \u5e76\u53d1\u8d77\u8c03\u7528\n</code></pre> <p>Agent \u8282\u70b9\u4f1a\u4ee5\u8282\u70b9 ID \u4f5c\u4e3a\u67e5\u627e\u952e\uff0c\u56e0\u6b64\u9700\u786e\u4fdd <code>AddAgentNode(\"assistant\")</code> \u4e0e <code>subAgent.Info().Name == \"assistant\"</code> \u4e00\u81f4\u3002</p>"},{"location":"zh/graph/#4","title":"4. \u6761\u4ef6\u8def\u7531","text":"<pre><code>// \u5b9a\u4e49\u6761\u4ef6\u51fd\u6570\nfunc complexityCondition(ctx context.Context, state graph.State) (string, error) {\n    complexity := state[\"complexity\"].(string)\n    if complexity == \"simple\" {\n        return \"simple_process\", nil\n    }\n    return \"complex_process\", nil\n}\n\n// \u6dfb\u52a0\u6761\u4ef6\u8fb9\nstateGraph.AddConditionalEdges(\"analyze\", complexityCondition, map[string]string{\n    \"simple_process\":  \"simple_node\",\n    \"complex_process\": \"complex_node\",\n})\n</code></pre>"},{"location":"zh/graph/#5","title":"5. \u5de5\u5177\u8282\u70b9\u96c6\u6210","text":"<pre><code>// \u521b\u5efa\u5de5\u5177\ntools := map[string]tool.Tool{\n    \"calculator\": calculatorTool,\n    \"search\":     searchTool,\n}\n\n// \u6dfb\u52a0\u5de5\u5177\u8282\u70b9\nstateGraph.AddToolsNode(\"tools\", tools)\n\n// \u6dfb\u52a0 LLM \u5230\u5de5\u5177\u7684\u6761\u4ef6\u8def\u7531\nstateGraph.AddToolsConditionalEdges(\"llm_node\", \"tools\", \"fallback_node\")\n</code></pre> <p>\u5de5\u5177\u8c03\u7528\u914d\u5bf9\u673a\u5236\u4e0e\u4e8c\u6b21\u8fdb\u5165 LLM\uff1a</p> <ul> <li>\u4ece <code>messages</code> \u5c3e\u90e8\u5411\u524d\u626b\u63cf\u6700\u8fd1\u7684 <code>assistant(tool_calls)</code>\uff1b\u9047\u5230 <code>user</code>   \u5219\u505c\u6b62\uff0c\u786e\u4fdd\u914d\u5bf9\u6b63\u786e\u3002</li> <li>\u5f53\u5de5\u5177\u8282\u70b9\u5b8c\u6210\u540e\u8fd4\u56de\u5230 LLM \u8282\u70b9\u65f6\uff0c<code>user_input</code> \u5df2\u88ab\u6e05\u7a7a\uff0cLLM \u5c06\u8d70   \u201cMessages only\u201d \u5206\u652f\uff0c\u4ee5\u5386\u53f2\u4e2d\u7684 tool \u54cd\u5e94\u7ee7\u7eed\u63a8\u7406\u3002</li> </ul>"},{"location":"zh/graph/#6-runner","title":"6. Runner \u914d\u7f6e","text":"<p>Runner \u63d0\u4f9b\u4e86\u4f1a\u8bdd\u7ba1\u7406\u548c\u6267\u884c\u73af\u5883\uff1a</p> <pre><code>// \u521b\u5efa\u4f1a\u8bdd\u670d\u52a1\nsessionService := inmemory.NewSessionService()\n// \u6216\u8005\u4f7f\u7528 Redis \u4f1a\u8bdd\u670d\u52a1\n// sessionService, err := redis.NewService(redis.WithRedisClientURL(\"redis://localhost:6379\"))\n\n// \u521b\u5efa Runner\nappRunner := runner.NewRunner(\n    \"app-name\",\n    graphAgent,\n    runner.WithSessionService(sessionService),\n    // \u53ef\u4ee5\u6dfb\u52a0\u66f4\u591a\u914d\u7f6e\u9009\u9879\n)\n\n// \u4f7f\u7528 Runner \u6267\u884c\u5de5\u4f5c\u6d41\n// Runner \u4ec5\u8bbe\u7f6e StateKeyUserInput\uff0c\u4e0d\u518d\u9884\u5148\u5199\u5165 StateKeyMessages\u3002\nmessage := model.NewUserMessage(\"\u7528\u6237\u8f93\u5165\")\neventChan, err := appRunner.Run(ctx, userID, sessionID, message)\n</code></pre>"},{"location":"zh/graph/#7","title":"7. \u6d88\u606f\u72b6\u6001\u6a21\u5f0f","text":"<p>\u5bf9\u4e8e\u5bf9\u8bdd\u5f0f\u5e94\u7528\uff0c\u53ef\u4ee5\u4f7f\u7528\u9884\u5b9a\u4e49\u7684\u6d88\u606f\u72b6\u6001\u6a21\u5f0f\uff1a</p> <pre><code>// \u4f7f\u7528\u6d88\u606f\u72b6\u6001\u6a21\u5f0f\nschema := graph.MessagesStateSchema()\n\n// \u8fd9\u4e2a\u6a21\u5f0f\u5305\u542b\uff1a\n// - messages: \u5bf9\u8bdd\u5386\u53f2\uff08StateKeyMessages\uff09\n// - user_input: \u7528\u6237\u8f93\u5165\uff08StateKeyUserInput\uff09\n// - last_response: \u6700\u540e\u54cd\u5e94\uff08StateKeyLastResponse\uff09\n// - node_responses: \u8282\u70b9\u54cd\u5e94\u6620\u5c04\uff08StateKeyNodeResponses\uff09\n// - metadata: \u5143\u6570\u636e\uff08StateKeyMetadata\uff09\n</code></pre>"},{"location":"zh/graph/#8","title":"8. \u72b6\u6001\u952e\u4f7f\u7528\u573a\u666f","text":"<p>\u7528\u6237\u81ea\u5b9a\u4e49\u72b6\u6001\u952e\uff1a\u7528\u4e8e\u5b58\u50a8\u4e1a\u52a1\u903b\u8f91\u6570\u636e</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\n// \u63a8\u8350\uff1a\u4f7f\u7528\u81ea\u5b9a\u4e49\u72b6\u6001\u952e\nconst (\n    StateKeyDocumentLength = \"document_length\"\n    StateKeyComplexityLevel = \"complexity_level\"\n    StateKeyProcessingStage = \"processing_stage\"\n)\n\n// \u5728\u8282\u70b9\u4e2d\u4f7f\u7528\nreturn graph.State{\n    StateKeyDocumentLength: len(input),\n    StateKeyComplexityLevel: \"simple\",\n    StateKeyProcessingStage: \"completed\",\n}, nil\n</code></pre> <p>\u5185\u7f6e\u72b6\u6001\u952e\uff1a\u7528\u4e8e\u7cfb\u7edf\u96c6\u6210</p> <pre><code>import (\n    \"time\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\n// \u83b7\u53d6\u7528\u6237\u8f93\u5165\uff08\u7531\u7cfb\u7edf\u81ea\u52a8\u8bbe\u7f6e\uff09\nuserInput := state[graph.StateKeyUserInput].(string)\n\n// \u8bbe\u7f6e\u6700\u7ec8\u8f93\u51fa\uff08\u7cfb\u7edf\u4f1a\u8bfb\u53d6\u6b64\u503c\uff09\nreturn graph.State{\n    graph.StateKeyLastResponse: \"\u5904\u7406\u5b8c\u6210\",\n}, nil\n\n// \u5f53\u591a\u4e2a\u8282\u70b9\uff08\u4f8b\u5982\u5e76\u884c\u7684 LLM \u8282\u70b9\uff09\u540c\u65f6\u4ea7\u51fa\u7ed3\u679c\u65f6\uff0c\u4f7f\u7528\u6309\u8282\u70b9\u54cd\u5e94\u3002\n// \u8be5\u503c\u662f map[nodeID]any\uff0c\u4f1a\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u5408\u5e76\u3002\u4e32\u884c\u8def\u5f84\u4f7f\u7528\n// LastResponse\uff1b\u5e76\u884c\u8282\u70b9\u6c47\u5408\u65f6\u4f7f\u7528 NodeResponses\u3002\nresponses, _ := state[graph.StateKeyNodeResponses].(map[string]any)\nnews := responses[\"news\"].(string)\ndialog := responses[\"dialog\"].(string)\n\n// \u5206\u522b\u4f7f\u7528\u6216\u7ec4\u5408\u6210\u6700\u7ec8\u8f93\u51fa\u3002\nreturn graph.State{\n    \"news_output\":   news,\n    \"dialog_output\": dialog,\n    graph.StateKeyLastResponse: news + \"\\n\" + dialog,\n}, nil\n\n// \u5b58\u50a8\u5143\u6570\u636e\nreturn graph.State{\n    graph.StateKeyMetadata: map[string]any{\n        \"timestamp\": time.Now(),\n        \"version\": \"1.0\",\n    },\n}, nil\n</code></pre>"},{"location":"zh/graph/#_8","title":"\u9ad8\u7ea7\u529f\u80fd","text":""},{"location":"zh/graph/#1","title":"1. \u4e2d\u65ad\u548c\u6062\u590d\uff08\u4eba\u673a\u534f\u4f5c\uff09","text":"<p>Graph \u5305\u901a\u8fc7\u4e2d\u65ad\u548c\u6062\u590d\u529f\u80fd\u652f\u6301\u4eba\u673a\u534f\u4f5c (HITL) \u5de5\u4f5c\u6d41\u3002\u8fd9\u4f7f\u5f97\u5de5\u4f5c\u6d41\u53ef\u4ee5\u6682\u505c\u6267\u884c\uff0c\u7b49\u5f85\u4eba\u5de5\u8f93\u5165\u6216\u5ba1\u6279\uff0c\u7136\u540e\u4ece\u4e2d\u65ad\u7684\u786e\u5207\u4f4d\u7f6e\u6062\u590d\u3002</p>"},{"location":"zh/graph/#_9","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>import (\n    \"context\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\n// \u521b\u5efa\u4e00\u4e2a\u53ef\u4ee5\u4e2d\u65ad\u6267\u884c\u7b49\u5f85\u4eba\u5de5\u8f93\u5165\u7684\u8282\u70b9\nb.AddNode(\"approval_node\", func(ctx context.Context, s graph.State) (any, error) {\n    // \u4f7f\u7528 Interrupt \u52a9\u624b\u51fd\u6570\u8fdb\u884c\u5e72\u51c0\u7684\u4e2d\u65ad/\u6062\u590d\u5904\u7406\n    prompt := map[string]any{\n        \"message\": \"\u8bf7\u5ba1\u6279\u6b64\u64cd\u4f5c (yes/no):\",\n        \"data\":    s[\"some_data\"],\n    }\n\n    // \u4e2d\u65ad\u6267\u884c\u5e76\u7b49\u5f85\u7528\u6237\u8f93\u5165\n    // \u952e \"approval\" \u6807\u8bc6\u8fd9\u4e2a\u7279\u5b9a\u7684\u4e2d\u65ad\u70b9\n    resumeValue, err := graph.Interrupt(ctx, s, \"approval\", prompt)\n    if err != nil {\n        return nil, err\n    }\n\n    // \u5f53\u6267\u884c\u7ee7\u7eed\u65f6\u5904\u7406\u6062\u590d\u503c\n    approved := false\n    if resumeStr, ok := resumeValue.(string); ok {\n        approved = resumeStr == \"yes\"\n    }\n\n    return graph.State{\n        \"approved\": approved,\n    }, nil\n})\n</code></pre>"},{"location":"zh/graph/#_10","title":"\u591a\u9636\u6bb5\u5ba1\u6279\u793a\u4f8b","text":"<pre><code>// \u7b2c\u4e00\u4e2a\u5ba1\u6279\u9636\u6bb5\nb.AddNode(\"first_approval\", func(ctx context.Context, s graph.State) (any, error) {\n    prompt := map[string]any{\n        \"message\": \"\u9700\u8981\u7ecf\u7406\u5ba1\u6279:\",\n        \"level\": 1,\n    }\n\n    approval, err := graph.Interrupt(ctx, s, \"manager_approval\", prompt)\n    if err != nil {\n        return nil, err\n    }\n\n    if approval != \"yes\" {\n        return graph.State{\"rejected_at\": \"manager\"}, nil\n    }\n\n    return graph.State{\"manager_approved\": true}, nil\n})\n\n// \u7b2c\u4e8c\u4e2a\u5ba1\u6279\u9636\u6bb5\uff08\u4ec5\u5728\u7b2c\u4e00\u4e2a\u5ba1\u6279\u901a\u8fc7\u540e\uff09\nb.AddNode(\"second_approval\", func(ctx context.Context, s graph.State) (any, error) {\n    if !s[\"manager_approved\"].(bool) {\n        return s, nil // \u5982\u679c\u7ecf\u7406\u672a\u6279\u51c6\u5219\u8df3\u8fc7\n    }\n\n    prompt := map[string]any{\n        \"message\": \"\u9700\u8981\u603b\u76d1\u5ba1\u6279:\",\n        \"level\": 2,\n    }\n\n    approval, err := graph.Interrupt(ctx, s, \"director_approval\", prompt)\n    if err != nil {\n        return nil, err\n    }\n\n    return graph.State{\n        \"director_approved\": approval == \"yes\",\n        \"final_approval\": approval == \"yes\",\n    }, nil\n})\n</code></pre>"},{"location":"zh/graph/#_11","title":"\u4ece\u4e2d\u65ad\u6062\u590d","text":"<pre><code>// \u4f7f\u7528 ResumeMap \u643a\u5e26\u7528\u6237\u8f93\u5165\u6062\u590d\u6267\u884c\ncmd := &amp;graph.Command{\n    ResumeMap: map[string]any{\n        \"approval\": \"yes\", // \"approval\" \u4e2d\u65ad\u952e\u7684\u6062\u590d\u503c\n    },\n}\n\n// \u901a\u8fc7\u72b6\u6001\u4f20\u9012\u547d\u4ee4\nstate := graph.State{\n    graph.StateKeyCommand: cmd,\n}\n\n// \u4f7f\u7528\u6062\u590d\u547d\u4ee4\u6267\u884c\nevents, err := executor.Execute(ctx, state, invocation)\n\n// \u6062\u590d\u5408\u5e76\u89c4\u5219\uff1a\n// \u6062\u590d\u6267\u884c\u65f6\uff0c\u5982\u679c\u8c03\u7528\u8005\u63d0\u4f9b\u4e86\u521d\u59cb\u72b6\u6001\u4e2d\u4e0d\u4ee5\u4e0b\u5212\u7ebf\uff08\"_\"\uff09\u5f00\u5934\uff0c\u4e14\u5728\u68c0\u67e5\u70b9\n// \u6062\u590d\u72b6\u6001\u4e2d\u4e0d\u5b58\u5728\u7684\u952e\uff0c\u8fd9\u4e9b\u952e\u4f1a\u88ab\u5408\u5e76\u8fdb\u6267\u884c\u72b6\u6001\uff1b\u6846\u67b6\u5185\u90e8\u952e\uff08\u4ee5 \"_\" \u5f00\u5934\uff09\n// \u4e0d\u53c2\u4e0e\u8be5\u5408\u5e76\u3002\n</code></pre>"},{"location":"zh/graph/#_12","title":"\u6062\u590d\u52a9\u624b\u51fd\u6570","text":"<pre><code>// \u7c7b\u578b\u5b89\u5168\u7684\u6062\u590d\u503c\u63d0\u53d6\nif value, ok := graph.ResumeValue[string](ctx, state, \"approval\"); ok {\n    // \u4f7f\u7528\u6062\u590d\u503c\n}\n\n// \u5e26\u9ed8\u8ba4\u503c\u7684\u6062\u590d\nvalue := graph.ResumeValueOrDefault(ctx, state, \"approval\", \"no\")\n\n// \u68c0\u67e5\u6062\u590d\u503c\u662f\u5426\u5b58\u5728\nif graph.HasResumeValue(state, \"approval\") {\n    // \u5904\u7406\u6062\u590d\u60c5\u51b5\n}\n\n// \u6e05\u9664\u6062\u590d\u503c\ngraph.ClearResumeValue(state, \"approval\")\ngraph.ClearAllResumeValues(state)\n</code></pre>"},{"location":"zh/graph/#2","title":"2. \u57fa\u4e8e\u68c0\u67e5\u70b9\u7684\u65f6\u95f4\u65c5\u884c","text":"<p>\u68c0\u67e5\u70b9\u63d0\u4f9b\u4e86\"\u65f6\u95f4\u65c5\u884c\"\u529f\u80fd\uff0c\u5141\u8bb8\u60a8\u6d4f\u89c8\u6267\u884c\u5386\u53f2\u5e76\u6062\u590d\u4e4b\u524d\u7684\u72b6\u6001\u3002\u8fd9\u5bf9\u4e8e\u8c03\u8bd5\u3001\u5ba1\u8ba1\u548c\u5b9e\u73b0\u590d\u6742\u7684\u6062\u590d\u7b56\u7565\u81f3\u5173\u91cd\u8981\u3002</p>"},{"location":"zh/graph/#_13","title":"\u68c0\u67e5\u70b9\u914d\u7f6e","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph/checkpoint/sqlite\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph/checkpoint/inmemory\"\n)\n\n// \u521b\u5efa\u68c0\u67e5\u70b9\u4fdd\u5b58\u5668\uff08\u5185\u5b58\u6216 SQLite\uff09\n// \u5185\u5b58\u4fdd\u5b58\u5668 - \u9002\u5408\u5f00\u53d1/\u6d4b\u8bd5\nmemorySaver := inmemory.NewSaver()\n\n// SQLite \u4fdd\u5b58\u5668 - \u751f\u4ea7\u73af\u5883\u7684\u6301\u4e45\u5316\u5b58\u50a8\nsqliteSaver, err := sqlite.NewCheckpointSaver(\"checkpoints.db\")\n\n// \u521b\u5efa\u5e26\u68c0\u67e5\u70b9\u652f\u6301\u7684\u6267\u884c\u5668\nexecutor, err := graph.NewExecutor(compiledGraph,\n    graph.WithCheckpointSaver(sqliteSaver),\n    graph.WithCheckpointSaveTimeout(30*time.Second), // \u53ef\u914d\u7f6e\u7684\u8d85\u65f6\u65f6\u95f4\n    graph.WithMaxSteps(100),\n)\n</code></pre>"},{"location":"zh/graph/#_14","title":"\u68c0\u67e5\u70b9\u8c31\u7cfb\u548c\u5206\u652f","text":"<pre><code>// \u68c0\u67e5\u70b9\u5f62\u6210\u8c31\u7cfb - \u4e00\u4e2a\u6267\u884c\u7ebf\u7a0b\nlineageID := \"user-session-123\"\nnamespace := \"\" // \u53ef\u9009\u7684\u547d\u540d\u7a7a\u95f4\u7528\u4e8e\u5206\u652f\n// \u6ce8\u610f\uff1a\u5f53\u547d\u540d\u7a7a\u95f4\u4e3a\u7a7a\uff08\"\"\uff09\u65f6\uff0cLatest/List/GetTuple \u5c06\u5728\u540c\u4e00\u8c31\u7cfb\u5185\u8fdb\u884c\u8de8\n// \u547d\u540d\u7a7a\u95f4\u67e5\u8be2\uff1b\u82e5\u5e0c\u671b\u9650\u5b9a\u8303\u56f4\uff0c\u8bf7\u6307\u5b9a\u5177\u4f53\u547d\u540d\u7a7a\u95f4\u3002\n\n// \u521b\u5efa\u68c0\u67e5\u70b9\u914d\u7f6e\nconfig := graph.NewCheckpointConfig(lineageID).\n    WithNamespace(namespace)\n\n// \u5e26\u68c0\u67e5\u70b9\u652f\u6301\u6267\u884c\nstate := graph.State{\n    \"lineage_id\": lineageID,\n    \"checkpoint_ns\": namespace,\n}\n\nevents, err := executor.Execute(ctx, state, invocation)\n</code></pre>"},{"location":"zh/graph/#_15","title":"\u68c0\u67e5\u70b9\u7ba1\u7406","text":"<pre><code>// \u521b\u5efa\u68c0\u67e5\u70b9\u7ba1\u7406\u5668\nmanager := graph.NewCheckpointManager(saver)\n\n// \u5217\u51fa\u8c31\u7cfb\u7684\u6240\u6709\u68c0\u67e5\u70b9\ncheckpoints, err := manager.ListCheckpoints(ctx, config.ToMap(), &amp;graph.CheckpointFilter{\n    Limit: 10, // \u7ed3\u679c\u6309\u65f6\u95f4\u5012\u5e8f\uff08\u6700\u65b0\u4f18\u5148\uff09\n})\n\n// \u83b7\u53d6\u6700\u65b0\u7684\u68c0\u67e5\u70b9\n// \u5f53 namespace \u4e3a\u7a7a\uff08\"\"\uff09\u65f6\uff0cLatest \u4f1a\u5728\u8c31\u7cfb\u5185\u8de8\u547d\u540d\u7a7a\u95f4\u67e5\u8be2\nlatest, err := manager.Latest(ctx, lineageID, namespace)\nif latest != nil &amp;&amp; latest.Checkpoint.IsInterrupted() {\n    fmt.Printf(\"\u5de5\u4f5c\u6d41\u5728\u6b64\u5904\u4e2d\u65ad: %s\\n\", latest.Checkpoint.InterruptState.NodeID)\n}\n\n// \u83b7\u53d6\u7279\u5b9a\u7684\u68c0\u67e5\u70b9\nckptConfig := graph.CreateCheckpointConfig(lineageID, checkpointID, namespace)\ntuple, err := manager.GetTuple(ctx, ckptConfig)\n\n// \u5220\u9664\u4e00\u4e2a\u8c31\u7cfb\uff08\u6240\u6709\u76f8\u5173\u68c0\u67e5\u70b9\uff09\nerr = manager.DeleteLineage(ctx, lineageID)\n</code></pre>"},{"location":"zh/graph/#_16","title":"\u68c0\u67e5\u70b9\u6811\u53ef\u89c6\u5316","text":"<pre><code>// \u6784\u5efa\u663e\u793a\u7236\u5b50\u5173\u7cfb\u7684\u68c0\u67e5\u70b9\u6811\ntree, err := manager.GetCheckpointTree(ctx, lineageID)\n\n// \u53ef\u89c6\u5316\u6811\u7ed3\u6784\nfor _, node := range tree {\n    indent := strings.Repeat(\"  \", node.Level)\n    marker := \"\ud83d\udccd\"\n    if node.Checkpoint.IsInterrupted() {\n        marker = \"\ud83d\udd34\" // \u4e2d\u65ad\u7684\u68c0\u67e5\u70b9\n    }\n    fmt.Printf(\"%s%s %s (step=%d)\\n\", \n        indent, marker, node.ID[:8], node.Metadata.Step)\n}\n</code></pre>"},{"location":"zh/graph/#_17","title":"\u4ece\u7279\u5b9a\u68c0\u67e5\u70b9\u6062\u590d","text":"<pre><code>// \u4ece\u7279\u5b9a\u68c0\u67e5\u70b9\u6062\u590d\uff08\u65f6\u95f4\u65c5\u884c\uff09\nstate := graph.State{\n    \"lineage_id\": lineageID,\n    \"checkpoint_id\": checkpointID, // \u4ece\u8fd9\u4e2a\u68c0\u67e5\u70b9\u6062\u590d\n}\n\n// \u6267\u884c\u5668\u5c06\u52a0\u8f7d\u68c0\u67e5\u70b9\u5e76\u4ece\u90a3\u91cc\u7ee7\u7eed\nevents, err := executor.Execute(ctx, state, invocation)\n</code></pre>"},{"location":"zh/graph/#3","title":"3. \u68c0\u67e5\u70b9\u5b58\u50a8\u7b56\u7565","text":""},{"location":"zh/graph/#_18","title":"\u5185\u5b58\u5b58\u50a8","text":"<p>\u6700\u9002\u5408\u5f00\u53d1\u548c\u6d4b\u8bd5\uff1a <pre><code>saver := memory.NewCheckpointSaver()\n</code></pre></p>"},{"location":"zh/graph/#sqlite","title":"SQLite \u5b58\u50a8","text":"<p>\u6700\u9002\u5408\u9700\u8981\u6301\u4e45\u5316\u7684\u751f\u4ea7\u73af\u5883\uff1a <pre><code>saver, err := sqlite.NewCheckpointSaver(\"workflow.db\",\n    sqlite.WithMaxConnections(10),\n    sqlite.WithTimeout(30*time.Second),\n)\n</code></pre></p>"},{"location":"zh/graph/#_19","title":"\u68c0\u67e5\u70b9\u5143\u6570\u636e","text":"<p>\u6bcf\u4e2a\u68c0\u67e5\u70b9\u5b58\u50a8\uff1a - \u72b6\u6001\uff1a\u8be5\u65f6\u523b\u7684\u5b8c\u6574\u5de5\u4f5c\u6d41\u72b6\u6001 - \u5143\u6570\u636e\uff1a\u6765\u6e90 (input/loop/interrupt)\u3001\u6b65\u9aa4\u7f16\u53f7\u3001\u65f6\u95f4\u6233 - \u7236 ID\uff1a\u94fe\u63a5\u5230\u7236\u68c0\u67e5\u70b9\u5f62\u6210\u6811\u7ed3\u6784 - \u4e2d\u65ad\u72b6\u6001\uff1a\u5982\u679c\u4e2d\u65ad\uff0c\u5305\u542b\u8282\u70b9 ID\u3001\u4efb\u52a1 ID \u548c\u63d0\u793a\u4fe1\u606f - \u4e0b\u4e00\u8282\u70b9\uff1a\u6062\u590d\u65f6\u8981\u6267\u884c\u7684\u8282\u70b9 - \u901a\u9053\u7248\u672c\uff1a\u7528\u4e8e Pregel \u98ce\u683c\u7684\u6267\u884c - \u5f85\u5199\uff08Pending Writes\uff09\uff1a\u4e0e\u68c0\u67e5\u70b9\u539f\u5b50\u4fdd\u5b58\u7684\u672a\u63d0\u4ea4\u901a\u9053\u5199\u5165\uff0c\u7528\u4e8e\u6062\u590d\u65f6   \u786e\u5b9a\u6027\u5730\u91cd\u5efa\u524d\u6cbf - \u5df2\u89c1\u7248\u672c\uff08Versions Seen\uff09\uff1a\u6309\u8282\u70b9/\u901a\u9053\u8bb0\u5f55\u7684\u5df2\u89c2\u6d4b\u7248\u672c\uff0c\u7528\u4e8e\u907f\u514d\u8282\u70b9\u5728   \u6062\u590d\u540e\u91cd\u590d\u6267\u884c\uff08\u53ea\u6709\u89e6\u53d1\u901a\u9053\u51fa\u73b0\u65b0\u7248\u672c\u624d\u4f1a\u91cd\u65b0\u89e6\u53d1\uff09</p>"},{"location":"zh/graph/#4-reducer","title":"4. \u81ea\u5b9a\u4e49 Reducer","text":"<p>Reducer \u5b9a\u4e49\u5982\u4f55\u5408\u5e76\u72b6\u6001\u66f4\u65b0\uff1a</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\n// \u9ed8\u8ba4 Reducer\uff1a\u8986\u76d6\u73b0\u6709\u503c\ngraph.DefaultReducer(existing, update) any\n\n// \u5408\u5e76 Reducer\uff1a\u5408\u5e76\u6620\u5c04\ngraph.MergeReducer(existing, update) any\n\n// \u8ffd\u52a0 Reducer\uff1a\u8ffd\u52a0\u5230\u5207\u7247\ngraph.AppendReducer(existing, update) any\n\n// \u6d88\u606f Reducer\uff1a\u5904\u7406\u6d88\u606f\u6570\u7ec4\ngraph.MessageReducer(existing, update) any\n</code></pre>"},{"location":"zh/graph/#5_1","title":"5. \u547d\u4ee4\u6a21\u5f0f","text":"<p>\u8282\u70b9\u53ef\u4ee5\u8fd4\u56de\u547d\u4ee4\u6765\u540c\u65f6\u66f4\u65b0\u72b6\u6001\u548c\u6307\u5b9a\u8def\u7531\uff1a</p> <pre><code>import (\n    \"context\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\nfunc routingNodeFunc(ctx context.Context, state graph.State) (any, error) {\n    // \u6839\u636e\u6761\u4ef6\u51b3\u5b9a\u4e0b\u4e00\u6b65\n    if shouldGoToA(state) {\n        return &amp;graph.Command{\n            Update: graph.State{\"status\": \"going_to_a\"},\n            GoTo:   \"node_a\",\n        }, nil\n    }\n\n    return &amp;graph.Command{\n        Update: graph.State{\"status\": \"going_to_b\"},\n        GoTo:   \"node_b\",\n    }, nil\n}\n</code></pre> <p>Fan-out \u4e0e\u52a8\u6001\u8def\u7531\uff1a</p> <ul> <li>\u8282\u70b9\u8fd4\u56de <code>[]*graph.Command</code> \u5373\u53ef\u5728\u4e0b\u4e00\u6b65\u5e76\u884c\u521b\u5efa\u591a\u4e2a\u5206\u652f\u3002</li> <li>\u4f7f\u7528 <code>Command{ GoTo: \"target\" }</code> \u65f6\uff0c\u8def\u7531\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u89e6\u53d1\uff0c\u65e0\u9700\u9759\u6001\u53ef\u8fbe\u6027\u8fb9\u3002\u9700\u786e\u4fdd\u76ee\u6807\u8282\u70b9\u5b58\u5728\uff1b\u82e5\u4e3a\u7ec8\u70b9\uff0c\u8bf7\u4fdd\u7559 <code>SetFinishPoint(target)</code>\u3002</li> </ul> <p>\u793a\u4f8b\uff08\u5e76\u884c fan-out + \u52a8\u6001\u8def\u7531\uff09\uff1a</p> <pre><code>stateGraph.AddNode(\"fanout\", func(ctx context.Context, s graph.State) (any, error) {\n    tasks := []*graph.Command{\n        {Update: graph.State{\"param\": \"A\"}, GoTo: \"worker\"},\n        {Update: graph.State{\"param\": \"B\"}, GoTo: \"worker\"},\n        {Update: graph.State{\"param\": \"C\"}, GoTo: \"worker\"},\n    }\n    return tasks, nil\n})\n\nstateGraph.AddNode(\"worker\", func(ctx context.Context, s graph.State) (any, error) {\n    p, _ := s[\"param\"].(string)\n    if p == \"\" {\n        return graph.State{}, nil\n    }\n    return graph.State{\"results\": []string{p}}, nil\n})\n\n// \u5165\u53e3\u4e0e\u7ed3\u675f\nstateGraph.SetEntryPoint(\"fanout\")\nstateGraph.SetFinishPoint(\"worker\")\n\n// \u65e0\u9700\u6dfb\u52a0 fanout-&gt;worker \u7684\u9759\u6001\u8fb9\uff1b\u8def\u7531\u7531 GoTo \u9a71\u52a8\u3002\n</code></pre>"},{"location":"zh/graph/#6","title":"6. \u6267\u884c\u5668\u914d\u7f6e","text":"<pre><code>import (\n    \"time\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph/checkpoint/memory\"\n)\n\n// \u521b\u5efa\u5e26\u5168\u9762\u914d\u7f6e\u7684\u6267\u884c\u5668\nexecutor, err := graph.NewExecutor(compiledGraph,\n    graph.WithChannelBufferSize(1024),               // \u4e8b\u4ef6\u901a\u9053\u7f13\u51b2\u533a\u5927\u5c0f\n    graph.WithMaxSteps(50),                           // \u6700\u5927\u6267\u884c\u6b65\u9aa4\u6570\n    graph.WithStepTimeout(5*time.Minute),             // \u6bcf\u6b65\u9aa4\u8d85\u65f6\u65f6\u95f4\n    graph.WithNodeTimeout(2*time.Minute),             // \u6bcf\u8282\u70b9\u6267\u884c\u8d85\u65f6\u65f6\u95f4\n    graph.WithCheckpointSaver(memorySaver),           // \u542f\u7528\u68c0\u67e5\u70b9\n    graph.WithCheckpointSaveTimeout(30*time.Second),  // \u68c0\u67e5\u70b9\u4fdd\u5b58\u8d85\u65f6\u65f6\u95f4\n)\n</code></pre>"},{"location":"zh/graph/#7_1","title":"7. \u865a\u62df\u8282\u70b9\u548c\u8def\u7531","text":"<p>Graph \u5305\u4f7f\u7528\u865a\u62df\u8282\u70b9\u6765\u7b80\u5316\u5de5\u4f5c\u6d41\u7684\u5165\u53e3\u548c\u51fa\u53e3\uff1a</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\n// \u7279\u6b8a\u8282\u70b9\u6807\u8bc6\u7b26\nconst (\n    Start = \"__start__\"  // \u865a\u62df\u8d77\u59cb\u8282\u70b9\n    End   = \"__end__\"    // \u865a\u62df\u7ed3\u675f\u8282\u70b9\n)\n\n// \u8bbe\u7f6e\u5165\u53e3\u70b9\uff08\u81ea\u52a8\u521b\u5efa Start -&gt; nodeID \u7684\u8fb9\uff09\nstateGraph.SetEntryPoint(\"first_node\")\n\n// \u8bbe\u7f6e\u7ed3\u675f\u70b9\uff08\u81ea\u52a8\u521b\u5efa nodeID -&gt; End \u7684\u8fb9\uff09\nstateGraph.SetFinishPoint(\"last_node\")\n\n// \u4e0d\u9700\u8981\u663e\u5f0f\u6dfb\u52a0\u8fd9\u4e9b\u8fb9\uff1a\n// stateGraph.AddEdge(Start, \"first_node\")  // \u4e0d\u9700\u8981\n// stateGraph.AddEdge(\"last_node\", End)     // \u4e0d\u9700\u8981\n</code></pre> <p>\u8fd9\u79cd\u8bbe\u8ba1\u4f7f\u5f97\u5de5\u4f5c\u6d41\u5b9a\u4e49\u66f4\u52a0\u7b80\u6d01\uff0c\u5f00\u53d1\u8005\u53ea\u9700\u8981\u5173\u6ce8\u5b9e\u9645\u7684\u4e1a\u52a1\u8282\u70b9\u548c\u5b83\u4eec\u4e4b\u95f4\u7684\u8fde\u63a5\u3002</p>"},{"location":"zh/graph/#_20","title":"\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"zh/graph/#1_1","title":"1. \u72b6\u6001\u7ba1\u7406","text":"<ul> <li>\u4f7f\u7528\u5e38\u91cf\u5b9a\u4e49\u72b6\u6001\u952e\uff0c\u907f\u514d\u786c\u7f16\u7801\u5b57\u7b26\u4e32</li> <li>\u4e3a\u590d\u6742\u72b6\u6001\u521b\u5efa Helper \u51fd\u6570</li> <li>\u4f7f\u7528 Schema \u9a8c\u8bc1\u72b6\u6001\u7ed3\u6784</li> <li>\u533a\u5206\u5185\u7f6e\u72b6\u6001\u952e\u548c\u7528\u6237\u81ea\u5b9a\u4e49\u72b6\u6001\u952e</li> </ul> <pre><code>import (\n    \"errors\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\n// \u5b9a\u4e49\u7528\u6237\u81ea\u5b9a\u4e49\u72b6\u6001\u952e\u5e38\u91cf\nconst (\n    StateKeyInput        = \"input\"          // \u7528\u6237\u4e1a\u52a1\u6570\u636e\n    StateKeyResult       = \"result\"         // \u5904\u7406\u7ed3\u679c\n    StateKeyProcessedData = \"processed_data\" // \u5904\u7406\u540e\u7684\u6570\u636e\n    StateKeyStatus       = \"status\"         // \u5904\u7406\u72b6\u6001\n)\n\n// \u7528\u6237\u53ef\u8bbf\u95ee\u7684\u5185\u7f6e\u72b6\u6001\u952e\uff08\u8c28\u614e\u4f7f\u7528\uff09\n// StateKeyUserInput    - \u7528\u6237\u8f93\u5165\uff08\u4e00\u6b21\u6027\uff0c\u6d88\u8d39\u540e\u6e05\u7a7a\uff09\n// StateKeyOneShotMessages - \u4e00\u6b21\u6027\u6d88\u606f\uff08\u5b8c\u6574\u8986\u76d6\u672c\u8f6e\u8f93\u5165\uff09\n// StateKeyLastResponse - \u6700\u540e\u54cd\u5e94\uff08Executor \u8bfb\u53d6\u4f5c\u4e3a\u6700\u7ec8\u7ed3\u679c\uff09\n// StateKeyMessages     - \u6d88\u606f\u5386\u53f2\uff08\u652f\u6301 append + MessageOp \u8865\u4e01\u64cd\u4f5c\uff09\n// StateKeyMetadata     - \u5143\u6570\u636e\uff08\u7528\u6237\u53ef\u7528\u7684\u901a\u7528\u5b58\u50a8\uff09\n\n// \u7cfb\u7edf\u5185\u90e8\u72b6\u6001\u952e\uff08\u7528\u6237\u4e0d\u5e94\u76f4\u63a5\u4f7f\u7528\uff09\n// StateKeySession      - \u4f1a\u8bdd\u4fe1\u606f\uff08GraphAgent \u81ea\u52a8\u8bbe\u7f6e\uff09\n// StateKeyExecContext  - \u6267\u884c\u4e0a\u4e0b\u6587\uff08Executor \u81ea\u52a8\u8bbe\u7f6e\uff09\n// StateKeyToolCallbacks - \u5de5\u5177\u56de\u8c03\uff08Executor \u81ea\u52a8\u8bbe\u7f6e\uff09\n// StateKeyModelCallbacks - \u6a21\u578b\u56de\u8c03\uff08Executor \u81ea\u52a8\u8bbe\u7f6e\uff09\n\n// MessageOp \u8865\u4e01\u64cd\u4f5c\n\n// Graph \u5305\u652f\u6301\u901a\u8fc7 MessageOp \u63a5\u53e3\u5bf9\u6d88\u606f\u72b6\u6001\u8fdb\u884c\u539f\u5b50\u6027\u8865\u4e01\u64cd\u4f5c\uff1a\n\nimport (\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n)\n\n// \u66ff\u6362\u6700\u540e\u4e00\u6761\u7528\u6237\u6d88\u606f\nreplaceOp := graph.ReplaceLastUser{Content: \"\u65b0\u7684\u7528\u6237\u8f93\u5165\"}\n\n// \u8ffd\u52a0\u6d88\u606f\nappendOp := graph.AppendMessages{Items: []model.Message{\n    model.NewAssistantMessage(\"AI \u56de\u590d\"),\n}}\n\n// \u6e05\u7a7a\u6240\u6709\u6d88\u606f\uff08\u7528\u4e8e\u91cd\u5efa\uff09\nclearOp := graph.RemoveAllMessages{}\n\n// \u7ec4\u5408\u591a\u4e2a\u64cd\u4f5c\uff08\u539f\u5b50\u6027\u6267\u884c\uff09\nops := []graph.MessageOp{replaceOp, appendOp}\nreturn graph.State{\n    graph.StateKeyMessages: ops,\n}, nil\n\n// **\u8865\u4e01\u64cd\u4f5c\u7684\u4f18\u52bf**\uff1a\n// - **\u539f\u5b50\u6027**\uff1a\u591a\u4e2a\u64cd\u4f5c\u5728\u5355\u6b21\u72b6\u6001\u66f4\u65b0\u4e2d\u6267\u884c\n// - **\u7c7b\u578b\u5b89\u5168**\uff1a\u7f16\u8bd1\u65f6\u68c0\u67e5\u64cd\u4f5c\u7c7b\u578b\n// - **\u5411\u540e\u517c\u5bb9**\uff1a\u4ecd\u652f\u6301\u4f20\u7edf\u7684 `[]Message` append \u64cd\u4f5c\n// - **\u7075\u6d3b\u6027**\uff1a\u652f\u6301\u590d\u6742\u7684\u6d88\u606f\u72b6\u6001\u64cd\u4f5c\n\n// \u521b\u5efa\u72b6\u6001 Helper\ntype StateHelper struct {\n    state graph.State\n}\n\nfunc (h *StateHelper) GetInput() (string, error) {\n    if input, ok := h.state[StateKeyInput].(string); ok {\n        return input, nil\n    }\n    return \"\", errors.New(\"input not found\")\n}\n\nfunc (h *StateHelper) GetUserInput() (string, error) {\n    if input, ok := h.state[graph.StateKeyUserInput].(string); ok {\n        return input, nil\n    }\n    return \"\", errors.New(\"user_input not found\")\n}\n</code></pre>"},{"location":"zh/graph/#2_1","title":"2. \u9519\u8bef\u5904\u7406","text":"<ul> <li>\u5728\u8282\u70b9\u51fd\u6570\u4e2d\u8fd4\u56de\u6709\u610f\u4e49\u7684\u9519\u8bef</li> <li>\u4f7f\u7528\u9519\u8bef\u7c7b\u578b\u5e38\u91cf\u8fdb\u884c\u5206\u7c7b</li> <li>\u5728\u6761\u4ef6\u51fd\u6570\u4e2d\u5904\u7406\u5f02\u5e38\u60c5\u51b5</li> </ul> <pre><code>import (\n    \"context\"\n    \"fmt\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\nfunc safeNodeFunc(ctx context.Context, state graph.State) (any, error) {\n    input, ok := state[\"input\"].(string)\n    if !ok {\n        return nil, fmt.Errorf(\"input field not found or wrong type\")\n    }\n\n    if input == \"\" {\n        return nil, fmt.Errorf(\"input cannot be empty\")\n    }\n\n    // \u5904\u7406\u903b\u8f91...\n    return result, nil\n}\n</code></pre>"},{"location":"zh/graph/#3_1","title":"3. \u6027\u80fd\u4f18\u5316","text":"<ul> <li>\u5408\u7406\u8bbe\u7f6e\u6267\u884c\u5668\u7f13\u51b2\u533a\u5927\u5c0f</li> <li>\u4f7f\u7528\u6700\u5927\u6b65\u6570\u9650\u5236\u9632\u6b62\u65e0\u9650\u5faa\u73af</li> <li>\u8003\u8651\u5e76\u884c\u6267\u884c\u8def\u5f84\uff08\u5982\u679c\u652f\u6301\uff09</li> </ul>"},{"location":"zh/graph/#4_1","title":"4. \u6d4b\u8bd5","text":"<pre><code>import (\n    \"context\"\n    \"testing\"\n\n    \"github.com/stretchr/testify/assert\"\n    \"github.com/stretchr/testify/require\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\nfunc TestWorkflow(t *testing.T) {\n    // \u521b\u5efa\u6d4b\u8bd5\u56fe\n    graph := createTestGraph()\n\n    // \u521b\u5efa\u6267\u884c\u5668\n    executor, err := graph.NewExecutor(graph)\n    require.NoError(t, err)\n\n    // \u6267\u884c\u6d4b\u8bd5\n    initialState := graph.State{\"test_input\": \"test\"}\n    eventChan, err := executor.Execute(context.Background(), initialState, nil)\n    require.NoError(t, err)\n\n    // \u9a8c\u8bc1\u7ed3\u679c\n    for event := range eventChan {\n        // \u9a8c\u8bc1\u4e8b\u4ef6\u5185\u5bb9\n        assert.NotNil(t, event)\n    }\n}\n</code></pre>"},{"location":"zh/graph/#_21","title":"\u5e38\u89c1\u7528\u4f8b","text":""},{"location":"zh/graph/#1_2","title":"1. \u6587\u6863\u5904\u7406\u5de5\u4f5c\u6d41","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u6587\u6863\u5904\u7406\u5de5\u4f5c\u6d41\u793a\u4f8b\uff0c\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 GraphAgent \u548c Runner\uff1a</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"strings\"\n    \"time\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/graphagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/event\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\n// \u7528\u6237\u81ea\u5b9a\u4e49\u7684\u72b6\u6001\u952e\nconst (\n    StateKeyDocumentLength  = \"document_length\"\n    StateKeyWordCount       = \"word_count\"\n    StateKeyComplexityLevel = \"complexity_level\"\n    StateKeyProcessingStage = \"processing_stage\"\n)\n\ntype documentWorkflow struct {\n    modelName string\n    runner    runner.Runner\n    userID    string\n    sessionID string\n}\n\nfunc (w *documentWorkflow) setup() error {\n    // 1. \u521b\u5efa\u6587\u6863\u5904\u7406\u56fe\n    workflowGraph, err := w.createDocumentProcessingGraph()\n    if err != nil {\n        return fmt.Errorf(\"failed to create graph: %w\", err)\n    }\n\n    // 2. \u521b\u5efa GraphAgent\n    graphAgent, err := graphagent.New(\"document-processor\", workflowGraph,\n        graphagent.WithDescription(\"\u7efc\u5408\u6587\u6863\u5904\u7406\u5de5\u4f5c\u6d41\"),\n        graphagent.WithInitialState(graph.State{}),\n    )\n    if err != nil {\n        return fmt.Errorf(\"failed to create graph agent: %w\", err)\n    }\n\n    // 3. \u521b\u5efa\u4f1a\u8bdd\u670d\u52a1\n    sessionService := inmemory.NewSessionService()\n\n    // 4. \u521b\u5efa Runner\n    w.runner = runner.NewRunner(\n        \"document-workflow\",\n        graphAgent,\n        runner.WithSessionService(sessionService),\n    )\n\n    // 5. \u8bbe\u7f6e\u6807\u8bc6\u7b26\n    w.userID = \"user\"\n    w.sessionID = fmt.Sprintf(\"workflow-session-%d\", time.Now().Unix())\n\n    return nil\n}\n\nfunc (w *documentWorkflow) createDocumentProcessingGraph() (*graph.Graph, error) {\n    // \u521b\u5efa\u72b6\u6001\u6a21\u5f0f\n    schema := graph.MessagesStateSchema()\n\n    // \u521b\u5efa\u6a21\u578b\u5b9e\u4f8b\n    modelInstance := openai.New(w.modelName)\n\n    // \u521b\u5efa\u5206\u6790\u5de5\u5177\n    complexityTool := function.NewFunctionTool(\n        w.analyzeComplexity,\n        function.WithName(\"analyze_complexity\"),\n        function.WithDescription(\"\u5206\u6790\u6587\u6863\u590d\u6742\u5ea6\u7ea7\u522b\"),\n    )\n\n    // \u521b\u5efa\u72b6\u6001\u56fe\n    stateGraph := graph.NewStateGraph(schema)\n    tools := map[string]tool.Tool{\n        \"analyze_complexity\": complexityTool,\n    }\n\n    // \u6784\u5efa\u5de5\u4f5c\u6d41\u56fe\n    stateGraph.\n        AddNode(\"preprocess\", w.preprocessDocument).\n        AddLLMNode(\"analyze\", modelInstance,\n            `\u4f60\u662f\u4e00\u4e2a\u6587\u6863\u5206\u6790\u4e13\u5bb6\u3002\u5206\u6790\u63d0\u4f9b\u7684\u6587\u6863\u5e76\uff1a\n1. \u5206\u7c7b\u6587\u6863\u7c7b\u578b\u548c\u590d\u6742\u5ea6\uff08\u7b80\u5355\u3001\u4e2d\u7b49\u3001\u590d\u6742\uff09\n2. \u63d0\u53d6\u5173\u952e\u4e3b\u9898\n3. \u8bc4\u4f30\u5185\u5bb9\u8d28\u91cf\n\u4f7f\u7528 analyze_complexity \u5de5\u5177\u8fdb\u884c\u8be6\u7ec6\u5206\u6790\u3002\n\u53ea\u8fd4\u56de\u590d\u6742\u5ea6\u7ea7\u522b\uff1a\"simple\" \u6216 \"complex\"\u3002`,\n            tools).\n        AddToolsNode(\"tools\", tools).\n        AddNode(\"route_complexity\", w.routeComplexity).\n        AddLLMNode(\"summarize\", modelInstance,\n            `\u4f60\u662f\u4e00\u4e2a\u6587\u6863\u6458\u8981\u4e13\u5bb6\u3002\u521b\u5efa\u6587\u6863\u7684\u5168\u9762\u800c\u7b80\u6d01\u7684\u6458\u8981\u3002\n\u4e13\u6ce8\u4e8e\uff1a\n1. \u5173\u952e\u70b9\u548c\u4e3b\u8981\u8bba\u70b9\n2. \u91cd\u8981\u7ec6\u8282\u548c\u89c1\u89e3\n3. \u903b\u8f91\u7ed3\u6784\u548c\u6d41\u7a0b\n4. \u7ed3\u8bba\u548c\u5f71\u54cd\n\u63d0\u4f9b\u7ed3\u6784\u826f\u597d\u7684\u6458\u8981\uff0c\u4fdd\u7559\u91cd\u8981\u4fe1\u606f\u3002\n\u8bb0\u4f4f\uff1a\u53ea\u8f93\u51fa\u6700\u7ec8\u7ed3\u679c\u672c\u8eab\uff0c\u4e0d\u8981\u5176\u4ed6\u6587\u672c\u3002`,\n            map[string]tool.Tool{}).\n        AddLLMNode(\"enhance\", modelInstance,\n            `\u4f60\u662f\u4e00\u4e2a\u5185\u5bb9\u589e\u5f3a\u4e13\u5bb6\u3002\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u6539\u8fdb\u63d0\u4f9b\u7684\u5185\u5bb9\uff1a\n1. \u63d0\u9ad8\u6e05\u6670\u5ea6\u548c\u53ef\u8bfb\u6027\n2. \u6539\u8fdb\u7ed3\u6784\u548c\u7ec4\u7ec7\n3. \u5728\u9002\u5f53\u7684\u5730\u65b9\u6dfb\u52a0\u76f8\u5173\u7ec6\u8282\n4. \u786e\u4fdd\u4e00\u81f4\u6027\u548c\u8fde\u8d2f\u6027\n\u4e13\u6ce8\u4e8e\u4f7f\u5185\u5bb9\u66f4\u6709\u5438\u5f15\u529b\u548c\u4e13\u4e1a\u6027\uff0c\u540c\u65f6\u4fdd\u6301\u539f\u610f\u3002\n\u8bb0\u4f4f\uff1a\u53ea\u8f93\u51fa\u6700\u7ec8\u7ed3\u679c\u672c\u8eab\uff0c\u4e0d\u8981\u5176\u4ed6\u6587\u672c\u3002`,\n            map[string]tool.Tool{}).\n        AddNode(\"format_output\", w.formatOutput).\n        SetEntryPoint(\"preprocess\").\n        SetFinishPoint(\"format_output\")\n\n    // \u6dfb\u52a0\u5de5\u4f5c\u6d41\u8fb9\n    stateGraph.AddEdge(\"preprocess\", \"analyze\")\n    stateGraph.AddToolsConditionalEdges(\"analyze\", \"tools\", \"route_complexity\")\n    stateGraph.AddEdge(\"tools\", \"analyze\")\n\n    // \u6dfb\u52a0\u590d\u6742\u5ea6\u6761\u4ef6\u8def\u7531\n    stateGraph.AddConditionalEdges(\"route_complexity\", w.complexityCondition, map[string]string{\n        \"simple\":  \"enhance\",\n        \"complex\": \"summarize\",\n    })\n\n    stateGraph.AddEdge(\"enhance\", \"format_output\")\n    stateGraph.AddEdge(\"summarize\", \"format_output\")\n\n    // SetEntryPoint \u548c SetFinishPoint \u4f1a\u81ea\u52a8\u5904\u7406\u4e0e\u865a\u62df Start/End \u8282\u70b9\u7684\u8fde\u63a5\n\n    return stateGraph.Compile()\n}\n\n// \u8282\u70b9\u51fd\u6570\u5b9e\u73b0\nfunc (w *documentWorkflow) preprocessDocument(ctx context.Context, state graph.State) (any, error) {\n    var input string\n    if userInput, ok := state[graph.StateKeyUserInput].(string); ok {\n        input = userInput\n    }\n    if input == \"\" {\n        return nil, fmt.Errorf(\"no input document found\")\n    }\n\n    input = strings.TrimSpace(input)\n    if len(input) &lt; 10 {\n        return nil, fmt.Errorf(\"document too short for processing (minimum 10 characters)\")\n    }\n\n    return graph.State{\n        StateKeyDocumentLength:  len(input),\n        StateKeyWordCount:       len(strings.Fields(input)),\n        graph.StateKeyUserInput: input,\n        StateKeyProcessingStage: \"preprocessing\",\n    }, nil\n}\n\nfunc (w *documentWorkflow) routeComplexity(ctx context.Context, state graph.State) (any, error) {\n    return graph.State{\n        StateKeyProcessingStage: \"complexity_routing\",\n    }, nil\n}\n\nfunc (w *documentWorkflow) complexityCondition(ctx context.Context, state graph.State) (string, error) {\n    if msgs, ok := state[graph.StateKeyMessages].([]model.Message); ok {\n        if len(msgs) &gt; 0 {\n            lastMsg := msgs[len(msgs)-1]\n            if strings.Contains(strings.ToLower(lastMsg.Content), \"simple\") {\n                return \"simple\", nil\n            }\n        }\n    }\n    return \"complex\", nil\n}\n\nfunc (w *documentWorkflow) formatOutput(ctx context.Context, state graph.State) (any, error) {\n    var result string\n    if lastResponse, ok := state[graph.StateKeyLastResponse].(string); ok {\n        result = lastResponse\n    }\n\n    finalOutput := fmt.Sprintf(`DOCUMENT PROCESSING RESULTS\n========================\nProcessing Stage: %s\nDocument Length: %d characters\nWord Count: %d words\nComplexity Level: %s\n\nProcessed Content:\n%s\n`,\n        state[StateKeyProcessingStage],\n        state[StateKeyDocumentLength],\n        state[StateKeyWordCount],\n        state[StateKeyComplexityLevel],\n        result,\n    )\n\n    return graph.State{\n        graph.StateKeyLastResponse: finalOutput,\n    }, nil\n}\n\n// \u5de5\u5177\u51fd\u6570\nfunc (w *documentWorkflow) analyzeComplexity(ctx context.Context, args map[string]any) (any, error) {\n    text, ok := args[\"text\"].(string)\n    if !ok {\n        return nil, fmt.Errorf(\"text argument is required\")\n    }\n\n    wordCount := len(strings.Fields(text))\n    sentenceCount := len(strings.Split(text, \".\"))\n\n    var level string\n    var score float64\n\n    if wordCount &lt; 100 {\n        level = \"simple\"\n        score = 0.3\n    } else if wordCount &lt; 500 {\n        level = \"moderate\"\n        score = 0.6\n    } else {\n        level = \"complex\"\n        score = 0.9\n    }\n\n    return map[string]any{\n        \"level\":          level,\n        \"score\":          score,\n        \"word_count\":     wordCount,\n        \"sentence_count\": sentenceCount,\n    }, nil\n}\n\n// \u6267\u884c\u5de5\u4f5c\u6d41\nfunc (w *documentWorkflow) processDocument(ctx context.Context, content string) error {\n    message := model.NewUserMessage(content)\n    eventChan, err := w.runner.Run(ctx, w.userID, w.sessionID, message)\n    if err != nil {\n        return fmt.Errorf(\"failed to run workflow: %w\", err)\n    }\n    return w.processStreamingResponse(eventChan)\n}\n\nfunc (w *documentWorkflow) processStreamingResponse(eventChan &lt;-chan *event.Event) error {\n    var workflowStarted bool\n    var finalResult string\n\n    for event := range eventChan {\n        if event.Error != nil {\n            fmt.Printf(\"\u274c Error: %s\\n\", event.Error.Message)\n            continue\n        }\n\n        if len(event.Choices) &gt; 0 {\n            choice := event.Choices[0]\n            if choice.Delta.Content != \"\" {\n                if !workflowStarted {\n                    fmt.Print(\"\ud83e\udd16 Workflow: \")\n                    workflowStarted = true\n                }\n                fmt.Print(choice.Delta.Content)\n            }\n\n            if choice.Message.Content != \"\" &amp;&amp; event.Done {\n                finalResult = choice.Message.Content\n            }\n        }\n\n        if event.Done {\n            if finalResult != \"\" &amp;&amp; strings.Contains(finalResult, \"DOCUMENT PROCESSING RESULTS\") {\n                fmt.Printf(\"\\n\\n%s\\n\", finalResult)\n            }\n            break\n        }\n    }\n    return nil\n}\n</code></pre>"},{"location":"zh/graph/#2_2","title":"2. \u5bf9\u8bdd\u673a\u5668\u4eba","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/graphagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n)\n\n// \u521b\u5efa\u5bf9\u8bdd\u673a\u5668\u4eba\nfunc createChatBot(modelName string) (*runner.Runner, error) {\n    // \u521b\u5efa\u72b6\u6001\u56fe\n    stateGraph := graph.NewStateGraph(graph.MessagesStateSchema())\n\n    // \u521b\u5efa\u6a21\u578b\u548c\u5de5\u5177\n    modelInstance := openai.New(modelName)\n    tools := map[string]tool.Tool{\n        \"calculator\": calculatorTool,\n        \"search\":     searchTool,\n    }\n\n    // \u6784\u5efa\u5bf9\u8bdd\u56fe\n    stateGraph.\n        AddLLMNode(\"chat\", modelInstance,\n            `\u4f60\u662f\u4e00\u4e2a\u6709\u7528\u7684AI\u52a9\u624b\u3002\u6839\u636e\u7528\u6237\u7684\u95ee\u9898\u63d0\u4f9b\u5e2e\u52a9\uff0c\u5e76\u5728\u9700\u8981\u65f6\u4f7f\u7528\u5de5\u5177\u3002`,\n            tools).\n        AddToolsNode(\"tools\", tools).\n        AddToolsConditionalEdges(\"chat\", \"tools\", \"chat\").\n        SetEntryPoint(\"chat\").\n        SetFinishPoint(\"chat\")\n\n    // \u7f16\u8bd1\u56fe\n    compiledGraph, err := stateGraph.Compile()\n    if err != nil {\n        return nil, err\n    }\n\n    // \u521b\u5efa GraphAgent\n    graphAgent, err := graphagent.New(\"chat-bot\", compiledGraph,\n        graphagent.WithDescription(\"\u667a\u80fd\u5bf9\u8bdd\u673a\u5668\u4eba\"),\n        graphagent.WithInitialState(graph.State{}),\n    )\n    if err != nil {\n        return nil, err\n    }\n\n    // \u521b\u5efa Runner\n    sessionService := inmemory.NewSessionService()\n    appRunner := runner.NewRunner(\n        \"chat-bot-app\",\n        graphAgent,\n        runner.WithSessionService(sessionService),\n    )\n\n    return appRunner, nil\n}\n</code></pre>"},{"location":"zh/graph/#3_2","title":"3. \u6570\u636e\u5904\u7406\u7ba1\u9053","text":"<pre><code>import (\n    \"reflect\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/graphagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n)\n\n// \u521b\u5efa\u6570\u636e\u5904\u7406\u7ba1\u9053\nfunc createDataPipeline() (*runner.Runner, error) {\n    // \u521b\u5efa\u81ea\u5b9a\u4e49\u72b6\u6001\u6a21\u5f0f\n    schema := graph.NewStateSchema()\n    schema.AddField(\"data\", graph.StateField{\n        Type:    reflect.TypeOf([]any{}),\n        Reducer: graph.AppendReducer,\n        Default: func() any { return []any{} },\n    })\n    schema.AddField(\"quality_score\", graph.StateField{\n        Type:    reflect.TypeOf(0.0),\n        Reducer: graph.DefaultReducer,\n    })\n\n    // \u521b\u5efa\u72b6\u6001\u56fe\n    stateGraph := graph.NewStateGraph(schema)\n\n    // \u6784\u5efa\u6570\u636e\u5904\u7406\u7ba1\u9053\n    stateGraph.\n        AddNode(\"extract\", extractData).\n        AddNode(\"validate\", validateData).\n        AddConditionalEdges(\"validate\", routeByQuality, map[string]string{\n            \"high\":   \"transform\",\n            \"medium\": \"clean\",\n            \"low\":    \"reject\",\n        }).\n        AddNode(\"clean\", cleanData).\n        AddNode(\"transform\", transformData).\n        AddNode(\"load\", loadData).\n        AddEdge(\"clean\", \"transform\").\n        AddEdge(\"transform\", \"load\").\n        SetEntryPoint(\"extract\").\n        SetFinishPoint(\"load\")\n\n    // \u7f16\u8bd1\u56fe\n    compiledGraph, err := stateGraph.Compile()\n    if err != nil {\n        return nil, err\n    }\n\n    // \u521b\u5efa GraphAgent\n    graphAgent, err := graphagent.New(\"data-pipeline\", compiledGraph,\n        graphagent.WithDescription(\"\u6570\u636e\u5904\u7406\u7ba1\u9053\"),\n        graphagent.WithInitialState(graph.State{}),\n    )\n    if err != nil {\n        return nil, err\n    }\n\n    // \u521b\u5efa Runner\n    sessionService := inmemory.NewSessionService()\n    appRunner := runner.NewRunner(\n        \"data-pipeline-app\",\n        graphAgent,\n        runner.WithSessionService(sessionService),\n    )\n\n    return appRunner, nil\n}\n</code></pre>"},{"location":"zh/graph/#4-graphagent-subagent","title":"4. GraphAgent \u4f5c\u4e3a SubAgent","text":"<p>GraphAgent \u53ef\u4ee5\u4f5c\u4e3a\u5176\u4ed6 Agent \u7684\u5b50 Agent\uff0c\u5b9e\u73b0\u590d\u6742\u7684\u591a Agent \u534f\u4f5c\uff1a</p> <pre><code>import (\n    \"context\"\n    \"log\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/graphagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n)\n\n// \u521b\u5efa\u6587\u6863\u5904\u7406 GraphAgent\nfunc createDocumentProcessor() (agent.Agent, error) {\n    // \u521b\u5efa\u6587\u6863\u5904\u7406\u56fe\n    stateGraph := graph.NewStateGraph(graph.MessagesStateSchema())\n\n    // \u6dfb\u52a0\u6587\u6863\u5904\u7406\u8282\u70b9\n    stateGraph.\n        AddNode(\"preprocess\", preprocessDocument).\n        AddLLMNode(\"analyze\", modelInstance, analysisPrompt, tools).\n        AddNode(\"format\", formatOutput).\n        SetEntryPoint(\"preprocess\").\n        SetFinishPoint(\"format\")\n\n    // \u7f16\u8bd1\u56fe\n    compiledGraph, err := stateGraph.Compile()\n    if err != nil {\n        return nil, err\n    }\n\n    // \u521b\u5efa GraphAgent\n    return graphagent.New(\"document-processor\", compiledGraph,\n        graphagent.WithDescription(\"\u4e13\u4e1a\u6587\u6863\u5904\u7406\u5de5\u4f5c\u6d41\"),\n    )\n}\n\n// \u521b\u5efa\u534f\u8c03\u5668 Agent\uff0c\u4f7f\u7528 GraphAgent \u4f5c\u4e3a\u5b50 Agent\nfunc createCoordinatorAgent() (agent.Agent, error) {\n    // \u521b\u5efa\u6587\u6863\u5904\u7406 GraphAgent\n    documentProcessor, err := createDocumentProcessor()\n    if err != nil {\n        return nil, err\n    }\n\n    // \u521b\u5efa\u5176\u4ed6\u5b50 Agent\n    mathAgent := llmagent.New(\"math-agent\",\n        llmagent.WithModel(modelInstance),\n        llmagent.WithDescription(\"\u6570\u5b66\u8ba1\u7b97\u4e13\u5bb6\"),\n        llmagent.WithTools([]tool.Tool{calculatorTool}),\n    )\n\n    // \u521b\u5efa\u534f\u8c03\u5668 Agent\n    coordinator := llmagent.New(\"coordinator\",\n        llmagent.WithModel(modelInstance),\n        llmagent.WithDescription(\"\u4efb\u52a1\u534f\u8c03\u5668\uff0c\u53ef\u4ee5\u59d4\u6258\u7ed9\u4e13\u4e1a\u5b50 Agent\"),\n        llmagent.WithInstruction(`\u4f60\u662f\u4e00\u4e2a\u534f\u8c03\u5668\uff0c\u53ef\u4ee5\u59d4\u6258\u4efb\u52a1\u7ed9\u4e13\u4e1a\u5b50 Agent\uff1a\n- document-processor: \u6587\u6863\u5904\u7406\u548c\u5206\u6790\n- math-agent: \u6570\u5b66\u8ba1\u7b97\u548c\u516c\u5f0f\u5904\u7406\n\n\u6839\u636e\u7528\u6237\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u5b50 Agent \u5904\u7406\u4efb\u52a1\u3002`),\n        llmagent.WithSubAgents([]agent.Agent{\n            documentProcessor,  // GraphAgent \u4f5c\u4e3a\u5b50 Agent\n            mathAgent,\n        }),\n    )\n\n    return coordinator, nil\n}\n\n// \u4f7f\u7528\u793a\u4f8b\nfunc main() {\n    // \u521b\u5efa\u534f\u8c03\u5668 Agent\n    coordinator, err := createCoordinatorAgent()\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // \u521b\u5efa Runner\n    runner := runner.NewRunner(\"coordinator-app\", coordinator)\n\n    // \u6267\u884c\u4efb\u52a1\uff08\u534f\u8c03\u5668\u4f1a\u81ea\u52a8\u9009\u62e9\u5408\u9002\u7684\u5b50 Agent\uff09\n    message := model.NewUserMessage(\"\u8bf7\u5206\u6790\u8fd9\u4efd\u6587\u6863\u5e76\u8ba1\u7b97\u5176\u4e2d\u7684\u7edf\u8ba1\u6570\u636e\")\n    eventChan, err := runner.Run(ctx, userID, sessionID, message)\n    // ...\n}\n</code></pre> <p>\u5173\u952e\u7279\u70b9\uff1a</p> <ul> <li>GraphAgent \u5b9e\u73b0\u4e86 <code>agent.Agent</code> \u63a5\u53e3\uff0c\u53ef\u4ee5\u88ab\u5176\u4ed6 Agent \u4f5c\u4e3a\u5b50 Agent \u4f7f\u7528</li> <li>\u534f\u8c03\u5668 Agent \u53ef\u4ee5\u901a\u8fc7 <code>transfer_to_agent</code> \u5de5\u5177\u6216\u81ea\u5b9a\u4e49\u903b\u8f91\u59d4\u6258\u4efb\u52a1\u7ed9 GraphAgent</li> <li>GraphAgent \u81ea\u8eab\u4e5f\u53ef\u4ee5\u901a\u8fc7 <code>graphagent.WithSubAgents</code> + <code>AddAgentNode</code> \u5728\u56fe\u5185\u8c03\u5ea6\u5176\u4ed6 Agent</li> <li>\u8fd9\u79cd\u8bbe\u8ba1\u5b9e\u73b0\u4e86\u590d\u6742\u5de5\u4f5c\u6d41\u4e0e\u591a Agent \u7cfb\u7edf\u7684\u53cc\u5411\u96c6\u6210</li> </ul>"},{"location":"zh/graph/#_22","title":"\u8bed\u4e49\u4e0e\u8fb9\u754c\uff1a\u8282\u70b9\u7ea7\u6062\u590d\u4e0e\u526f\u4f5c\u7528\u5e42\u7b49","text":"<p>\u5728\u6062\u590d\u673a\u5236\u4e0a\uff0c\u672c\u6846\u67b6\u91c7\u7528\u8282\u70b9\u7ea7\u6062\u590d\uff08node-level resume\uff09\u3002\u8fd9\u610f\u5473\u7740\uff1a</p> <ul> <li>\u4ec5\u6062\u590d\u5230\u88ab\u4e2d\u65ad\u7684\u8282\u70b9\u6216\u5176\u540e\u7ee7\u8282\u70b9\u7684\u6267\u884c\u8fb9\u754c\uff0c\u4e0d\u4f1a\u6574\u6b65\u56de\u6eda\u6574\u4e2a\u56fe\u3002</li> <li>\u5728\u4efb\u610f\u8282\u70b9\u5185\u4ea7\u751f\u7684\u5916\u90e8\u526f\u4f5c\u7528\uff08\u4f8b\u5982\uff1a\u6570\u636e\u5e93\u5199\u5165\u3001HTTP \u8c03\u7528\u3001\u6d88\u606f\u53d1\u9001\uff09\u5fc5\u987b\u5177\u5907\u4e00\u6b21\u8bed\u4e49\u4fdd\u969c\uff1a<ul> <li>\u5efa\u8bae\u5c01\u88c5\u4e3a\u5e42\u7b49\u64cd\u4f5c\uff08\u4f8b\u5982\u57fa\u4e8e\u4e1a\u52a1\u5e42\u7b49\u952e\u3001\u53bb\u91cd\u8868\u3001Upsert\uff09\u3002</li> <li>\u6216\u4f7f\u7528\u4e8b\u52a1\u6027\u8fb9\u754c\uff08\u4f8b\u5982\u672c\u5730\u4e8b\u52a1/\u5206\u5e03\u5f0f\u4e8b\u52a1/Outbox + Relay\uff09\u3002</li> </ul> </li> <li>\u6062\u590d\u540e\u4f1a\u91cd\u653e PendingWrites \u6784\u5efa\u6267\u884c\u524d\u6cbf\uff1b\u5199\u5165\u987a\u5e8f\u4f7f\u7528\u5355\u8c03\u81ea\u589e\u5e8f\u5217\u53f7\u4fdd\u8bc1\u8de8\u540e\u7aef\u4e00\u81f4\u6027\u3002</li> </ul> <p>\u751f\u4ea7\u5efa\u8bae\uff1a - \u4e3a\u6240\u6709\u5916\u90e8\u526f\u4f5c\u7528\u5b9a\u4e49\u5e42\u7b49\u952e\uff08\u5982 order_id + step_id\uff09\u3002 - \u5bf9\u4e0d\u53ef\u91cd\u590d\u7684\u8c03\u7528\uff08\u5982\u4e09\u65b9\u652f\u4ed8\uff09\u4f7f\u7528\u201c\u51c6\u5907-\u63d0\u4ea4/\u64a4\u9500\u201d\u6a21\u5f0f\uff0c\u786e\u4fdd at-least-once \u4e0e\u53ef\u8865\u507f\u3002 - \u5bf9\u66f4\u65b0\u578b\u5199\u5165\uff0c\u5c3d\u91cf Upsert \u5e76\u8bb0\u5f55\u7248\u672c\uff08version\uff09\u4e0e\u6765\u6e90\uff08source\uff09\uff0c\u4fbf\u4e8e\u5ba1\u8ba1\u4e0e\u8ffd\u8e2a\u3002</p>"},{"location":"zh/graph/#_23","title":"\u6545\u969c\u6392\u9664","text":""},{"location":"zh/graph/#_24","title":"\u5e38\u89c1\u9519\u8bef","text":"<ol> <li>\"node not found\"\uff1a\u68c0\u67e5\u8282\u70b9 ID \u662f\u5426\u6b63\u786e</li> <li>\"invalid graph\"\uff1a\u786e\u4fdd\u56fe\u6709\u5165\u53e3\u70b9\u548c\u6240\u6709\u8282\u70b9\u53ef\u8fbe</li> <li>\"maximum execution steps exceeded\"\uff1a\u68c0\u67e5\u662f\u5426\u6709\u5faa\u73af\u6216\u589e\u52a0\u6700\u5927\u6b65\u6570</li> <li>\"state validation failed\"\uff1a\u68c0\u67e5\u72b6\u6001\u6a21\u5f0f\u5b9a\u4e49</li> </ol>"},{"location":"zh/graph/#_25","title":"\u8c03\u8bd5\u6280\u5de7","text":"<ul> <li>\u4f7f\u7528\u4e8b\u4ef6\u6d41\u76d1\u63a7\u6267\u884c\u8fc7\u7a0b</li> <li>\u5728\u8282\u70b9\u51fd\u6570\u4e2d\u6dfb\u52a0\u65e5\u5fd7</li> <li>\u9a8c\u8bc1\u72b6\u6001\u6a21\u5f0f\u5b9a\u4e49</li> <li>\u68c0\u67e5\u6761\u4ef6\u51fd\u6570\u903b\u8f91</li> </ul>"},{"location":"zh/graph/#_26","title":"\u603b\u7ed3","text":"<p>Graph \u5305\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f3a\u5927\u800c\u7075\u6d3b\u7684\u5de5\u4f5c\u6d41\u7f16\u6392\u7cfb\u7edf\uff0c\u7279\u522b\u9002\u5408\u6784\u5efa\u590d\u6742\u7684 AI \u5e94\u7528\u3002\u901a\u8fc7 GraphAgent \u548c Runner \u7684\u7ec4\u5408\u4f7f\u7528\uff0c\u60a8\u53ef\u4ee5\u521b\u5efa\u9ad8\u6548\u3001\u53ef\u7ef4\u62a4\u7684\u5de5\u4f5c\u6d41\u5e94\u7528\u3002</p>"},{"location":"zh/graph/#_27","title":"\u5173\u952e\u8981\u70b9","text":"<p>\u5de5\u4f5c\u6d41\u521b\u5efa\uff1a</p> <ul> <li>\u4f7f\u7528 <code>StateGraph</code> \u6784\u5efa\u5668\u521b\u5efa\u56fe\u7ed3\u6784</li> <li>\u5b9a\u4e49\u6e05\u6670\u7684\u72b6\u6001\u6a21\u5f0f\u548c\u6570\u636e\u6d41</li> <li>\u5408\u7406\u4f7f\u7528\u6761\u4ef6\u8def\u7531\u548c\u5de5\u5177\u8282\u70b9</li> </ul> <p>\u5e94\u7528\u96c6\u6210\uff1a</p> <ul> <li>\u901a\u8fc7 <code>GraphAgent</code> \u5305\u88c5\u5de5\u4f5c\u6d41\u56fe</li> <li>\u4f7f\u7528 <code>Runner</code> \u7ba1\u7406\u4f1a\u8bdd\u548c\u6267\u884c\u73af\u5883</li> <li>\u5904\u7406\u6d41\u5f0f\u4e8b\u4ef6\u548c\u9519\u8bef\u54cd\u5e94</li> </ul> <p>Agent \u96c6\u6210\uff1a</p> <ul> <li>GraphAgent \u5b9e\u73b0\u4e86 <code>agent.Agent</code> \u63a5\u53e3</li> <li>\u53ef\u4ee5\u4f5c\u4e3a\u5176\u4ed6 Agent \u7684\u5b50 Agent \u4f7f\u7528</li> <li>\u4e5f\u53ef\u4ee5\u901a\u8fc7 <code>graphagent.WithSubAgents</code> \u4e0e <code>AddAgentNode</code> \u8c03\u5ea6\u5176\u4ed6 Agent</li> <li>\u652f\u6301\u590d\u6742\u7684\u591a Agent \u534f\u4f5c\u573a\u666f</li> </ul> <p>\u6700\u4f73\u5b9e\u8df5\uff1a</p> <ul> <li>\u4f7f\u7528\u7c7b\u578b\u5b89\u5168\u7684\u72b6\u6001\u952e\u5e38\u91cf</li> <li>\u5b9e\u73b0\u9002\u5f53\u7684\u9519\u8bef\u5904\u7406\u548c\u6062\u590d\u673a\u5236</li> <li>\u6d4b\u8bd5\u548c\u76d1\u63a7\u5de5\u4f5c\u6d41\u6267\u884c\u8fc7\u7a0b</li> <li>\u5408\u7406\u914d\u7f6e\u6267\u884c\u5668\u53c2\u6570\u548c\u7f13\u51b2\u533a\u5927\u5c0f</li> <li>\u8003\u8651\u5c06\u590d\u6742\u5de5\u4f5c\u6d41\u5c01\u88c5\u4e3a GraphAgent \u5b50 Agent</li> </ul>"},{"location":"zh/graph/#_28","title":"\u5178\u578b\u4f7f\u7528\u6d41\u7a0b","text":"<pre><code>import (\n    \"context\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/graphagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n)\n\n// 1. \u521b\u5efa\u548c\u7f16\u8bd1\u56fe\nstateGraph := graph.NewStateGraph(schema)\n// ... \u6dfb\u52a0\u8282\u70b9\u548c\u8fb9\ncompiledGraph, err := stateGraph.Compile()\n\n// 2. \u521b\u5efa GraphAgent\ngraphAgent, err := graphagent.New(\"workflow-name\", compiledGraph, opts...)\n\n// 3. \u521b\u5efa Runner\nappRunner := runner.NewRunner(\"app-name\", graphAgent, runnerOpts...)\n\n// 4. \u6267\u884c\u5de5\u4f5c\u6d41\nmessage := model.NewUserMessage(\"\u7528\u6237\u8f93\u5165\")\neventChan, err := appRunner.Run(ctx, userID, sessionID, message)\n</code></pre> <p>\u8fd9\u79cd\u6a21\u5f0f\u4f7f\u5f97 Graph \u5305\u7279\u522b\u9002\u5408\u6784\u5efa\u4f01\u4e1a\u7ea7\u7684 AI \u5de5\u4f5c\u6d41\u5e94\u7528\uff0c\u63d0\u4f9b\u4e86\u826f\u597d\u7684\u53ef\u6269\u5c55\u6027\u3001\u53ef\u7ef4\u62a4\u6027\u548c\u7528\u6237\u4f53\u9a8c\u3002</p>"},{"location":"zh/graph/#_29","title":"\u9ad8\u7ea7\u7279\u6027","text":""},{"location":"zh/graph/#1_3","title":"1. \u4e2d\u65ad\u548c\u6062\u590d","text":"<p>Graph \u5305\u652f\u6301\u4eba\u673a\u4ea4\u4e92\u5de5\u4f5c\u6d41\uff0c\u901a\u8fc7\u4e2d\u65ad\u548c\u6062\u590d\u529f\u80fd\uff0c\u5de5\u4f5c\u6d41\u53ef\u4ee5\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u6682\u505c\uff0c\u7b49\u5f85\u5916\u90e8\u8f93\u5165\uff0c\u7136\u540e\u4ece\u7cbe\u786e\u7684\u4e2d\u65ad\u70b9\u6062\u590d\u6267\u884c\u3002</p>"},{"location":"zh/graph/#_30","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>import (\n    \"context\"\n    \"trpc.group/trpc-go/trpc-agent-go/graph\"\n)\n\n// \u521b\u5efa\u4e00\u4e2a\u53ef\u4ee5\u4e2d\u65ad\u6267\u884c\u7684\u8282\u70b9\nb.AddNode(\"approval_node\", func(ctx context.Context, s graph.State) (any, error) {\n    // \u4f7f\u7528 Interrupt \u8f85\u52a9\u51fd\u6570\u8fdb\u884c\u6e05\u6670\u7684\u4e2d\u65ad/\u6062\u590d\u5904\u7406\n    prompt := map[string]any{\n        \"message\": \"\u8bf7\u6279\u51c6\u6b64\u64cd\u4f5c (yes/no):\",\n        \"data\":    s[\"some_data\"],\n    }\n\n    // \u6682\u505c\u6267\u884c\u5e76\u7b49\u5f85\u7528\u6237\u8f93\u5165\n    resumeValue, err := graph.Interrupt(ctx, s, \"approval\", prompt)\n    if err != nil {\n        return nil, err\n    }\n\n    // \u5904\u7406\u6062\u590d\u503c\n    approved := false\n    if resumeStr, ok := resumeValue.(string); ok {\n        approved = resumeStr == \"yes\"\n    }\n\n    return graph.State{\n        \"approved\": approved,\n    }, nil\n})\n</code></pre>"},{"location":"zh/graph/#_31","title":"\u4ece\u4e2d\u65ad\u6062\u590d","text":"<pre><code>// \u4f7f\u7528\u7528\u6237\u8f93\u5165\u6062\u590d\u6267\u884c\ncmd := &amp;graph.Command{\n    ResumeMap: map[string]any{\n        \"approval\": \"yes\", // \"approval\" \u952e\u7684\u6062\u590d\u503c\n    },\n}\n\nstate := graph.State{\n    \"__command__\": cmd,\n}\n\n// \u4f7f\u7528\u6062\u590d\u547d\u4ee4\u6267\u884c\nevents, err := exec.Execute(ctx, state, inv)\n</code></pre>"},{"location":"zh/graph/#_32","title":"\u6062\u590d\u8f85\u52a9\u51fd\u6570","text":"<pre><code>// \u7c7b\u578b\u5b89\u5168\u7684\u6062\u590d\u503c\u63d0\u53d6\nif value, ok := graph.ResumeValue[string](ctx, state, \"approval\"); ok {\n    // \u4f7f\u7528\u6062\u590d\u503c\n}\n\n// \u4f7f\u7528\u9ed8\u8ba4\u503c\u6062\u590d\nvalue := graph.ResumeValueOrDefault(ctx, state, \"approval\", \"no\")\n\n// \u68c0\u67e5\u6062\u590d\u503c\u662f\u5426\u5b58\u5728\nif graph.HasResumeValue(state, \"approval\") {\n    // \u5904\u7406\u6062\u590d\u60c5\u51b5\n}\n\n// \u6e05\u9664\u6062\u590d\u503c\ngraph.ClearResumeValue(state, \"approval\")\ngraph.ClearAllResumeValues(state)\n</code></pre>"},{"location":"zh/graph/#_33","title":"\u68c0\u67e5\u70b9\u7ba1\u7406","text":"<pre><code>// \u521b\u5efa\u68c0\u67e5\u70b9\u7ba1\u7406\u5668\nmanager := graph.NewCheckpointManager(saver)\n\n// \u5217\u51fa\u68c0\u67e5\u70b9\ncheckpoints, err := manager.List(ctx, lineageID, &amp;graph.CheckpointFilter{\n    Limit: 10,\n})\n\n// \u83b7\u53d6\u7279\u5b9a\u68c0\u67e5\u70b9\ncheckpoint, err := manager.Get(ctx, lineageID, checkpointID)\n</code></pre> <p>\u26a0\ufe0f \u751f\u4ea7\u73af\u5883\u91cd\u8981\u63d0\u793a: \u5f3a\u70c8\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u663e\u5f0f\u6307\u5b9a <code>namespace</code>\uff0c\u4f7f\u7528\u7a33\u5b9a\u7684\u4e1a\u52a1\u6807\u8bc6\u7b26\uff08\u5982 <code>svc:prod:graphX</code>\uff09\uff0c\u800c\u4e0d\u662f\u4f9d\u8d56\u81ea\u52a8\u751f\u6210\u7684 <code>default:{lineage_id}:{timestamp}</code> \u6a21\u5f0f\u3002\u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd\u5ba1\u8ba1\u8ffd\u8e2a\u7684\u4e00\u81f4\u6027\u548c\u4e1a\u52a1\u903b\u8f91\u7684\u6e05\u6670\u6027\u3002</p> <p>\u26a0\ufe0f \u7c7b\u578b\u5b89\u5168\u63d0\u793a: \u68c0\u67e5\u70b9\u4f7f\u7528 JSON \u6df1\u62f7\u8d1d\u8fdb\u884c\u72b6\u6001\u6301\u4e45\u5316\uff0c\u6570\u503c\u7c7b\u578b\u4f1a\u88ab\u8f6c\u6362\u4e3a <code>float64</code>\u3002\u5728\u4e1a\u52a1\u4ee3\u7801\u4e2d\u5904\u7406\u72b6\u6001\u65f6\uff0c\u5efa\u8bae\u4f7f\u7528\u7c7b\u578b\u65ad\u8a00\u6216\u7c7b\u578b\u8f6c\u6362\u51fd\u6570\uff0c\u907f\u514d\u76f4\u63a5\u65ad\u8a00\u4e3a <code>int</code>/<code>int64</code> \u7b49\u7c7b\u578b\u3002</p>"},{"location":"zh/graph/#2_3","title":"2. \u539f\u5b50\u68c0\u67e5\u70b9\u5b58\u50a8","text":"<p>Graph \u5305\u63d0\u4f9b\u4e86\u539f\u5b50\u68c0\u67e5\u70b9\u5b58\u50a8\u529f\u80fd\uff0c\u786e\u4fdd\u68c0\u67e5\u70b9\u548c\u5f85\u5199\u5165\u6570\u636e\u7684\u539f\u5b50\u6027\u4fdd\u5b58\uff0c\u907f\u514d\u6570\u636e\u4e0d\u4e00\u81f4\u95ee\u9898\u3002</p>"},{"location":"zh/graph/#_34","title":"\u7279\u6027","text":"<ul> <li>\u539f\u5b50\u6027\u4fdd\u5b58: \u4f7f\u7528 <code>PutFull</code> \u65b9\u6cd5\u539f\u5b50\u4fdd\u5b58\u68c0\u67e5\u70b9\u548c\u5f85\u5199\u5165\u6570\u636e</li> <li>\u6df1\u5ea6\u62f7\u8d1d: \u5b89\u5168\u7684\u6df1\u62f7\u8d1d\u5b9e\u73b0\uff0c\u652f\u6301\u6240\u6709\u6570\u636e\u7c7b\u578b</li> <li>\u6392\u5e8f\u548c\u8fc7\u6ee4: \u68c0\u67e5\u70b9\u5217\u8868\u652f\u6301\u65f6\u95f4\u6233\u6392\u5e8f\u548c\u6761\u4ef6\u8fc7\u6ee4</li> <li>\u8d85\u65f6\u63a7\u5236: \u652f\u6301\u6b65\u9aa4\u7ea7\u548c\u8282\u70b9\u7ea7\u8d85\u65f6\u63a7\u5236</li> </ul>"},{"location":"zh/graph/#_35","title":"\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>// \u521b\u5efa\u6267\u884c\u5668\u65f6\u542f\u7528\u68c0\u67e5\u70b9\nsaver := inmemory.NewSaver()\nexec, err := graph.NewExecutor(g, graph.WithCheckpointSaver(saver))\n\n// \u6267\u884c\u5668\u4f1a\u81ea\u52a8\u4f7f\u7528\u539f\u5b50\u4fdd\u5b58\n// \u65e0\u9700\u989d\u5916\u914d\u7f6e\uff0c\u6240\u6709\u68c0\u67e5\u70b9\u64cd\u4f5c\u90fd\u662f\u539f\u5b50\u7684\n</code></pre>"},{"location":"zh/knowledge/","title":"Knowledge \u4f7f\u7528\u6587\u6863","text":""},{"location":"zh/knowledge/#_1","title":"\u6982\u8ff0","text":"<p>Knowledge \u662f tRPC-Agent-Go \u6846\u67b6\u4e2d\u7684\u77e5\u8bc6\u7ba1\u7406\u7cfb\u7edf\uff0c\u4e3a Agent \u63d0\u4f9b\u68c0\u7d22\u589e\u5f3a\u751f\u6210\uff08Retrieval-Augmented Generation, RAG\uff09\u80fd\u529b\u3002\u901a\u8fc7\u96c6\u6210\u5411\u91cf\u6570\u636e\u3001embedding \u6a21\u578b\u548c\u6587\u6863\u5904\u7406\u7ec4\u4ef6\uff0cKnowledge \u7cfb\u7edf\u80fd\u591f\u5e2e\u52a9 Agent \u8bbf\u95ee\u548c\u68c0\u7d22\u76f8\u5173\u7684\u77e5\u8bc6\u4fe1\u606f\uff0c\u4ece\u800c\u63d0\u4f9b\u66f4\u51c6\u786e\u3001\u66f4\u6709\u4f9d\u636e\u7684\u54cd\u5e94\u3002</p>"},{"location":"zh/knowledge/#_2","title":"\u4f7f\u7528\u6a21\u5f0f","text":"<p>Knowledge \u7cfb\u7edf\u7684\u4f7f\u7528\u9075\u5faa\u4ee5\u4e0b\u6a21\u5f0f\uff1a</p> <ol> <li>\u521b\u5efa Knowledge\uff1a\u914d\u7f6e\u5411\u91cf\u5b58\u50a8\u3001Embedder \u548c\u77e5\u8bc6\u6e90</li> <li>\u52a0\u8f7d\u6587\u6863\uff1a\u4ece\u5404\u79cd\u6765\u6e90\u52a0\u8f7d\u548c\u7d22\u5f15\u6587\u6863</li> <li>\u96c6\u6210\u5230 Agent\uff1a\u4f7f\u7528 <code>WithKnowledge()</code> \u5c06 Knowledge \u96c6\u6210\u5230 LLM Agent \u4e2d</li> <li>Agent \u81ea\u52a8\u68c0\u7d22\uff1aAgent \u901a\u8fc7\u5185\u7f6e\u7684 <code>knowledge_search</code> \u5de5\u5177\u81ea\u52a8\u8fdb\u884c\u77e5\u8bc6\u68c0\u7d22</li> <li>\u77e5\u8bc6\u5e93\u7ba1\u7406\uff1a\u901a\u8fc7 <code>enableSourceSync</code> \u542f\u7528\u667a\u80fd\u540c\u6b65\u673a\u5236\uff0c\u786e\u4fdd\u5411\u91cf\u5b58\u50a8\u4e2d\u7684\u6570\u636e\u59cb\u7ec8\u4e0e\u7528\u6237\u914d\u7f6e\u7684 source \u4fdd\u6301\u4e00\u81f4</li> </ol> <p>\u8fd9\u79cd\u6a21\u5f0f\u63d0\u4f9b\u4e86\uff1a</p> <ul> <li>\u667a\u80fd\u68c0\u7d22\uff1a\u57fa\u4e8e\u5411\u91cf\u76f8\u4f3c\u5ea6\u7684\u8bed\u4e49\u641c\u7d22</li> <li>\u591a\u6e90\u652f\u6301\uff1a\u652f\u6301\u6587\u4ef6\u3001\u76ee\u5f55\u3001URL \u7b49\u591a\u79cd\u77e5\u8bc6\u6765\u6e90</li> <li>\u7075\u6d3b\u5b58\u50a8\uff1a\u652f\u6301\u5185\u5b58\u3001PostgreSQL\u3001TcVector \u7b49\u591a\u79cd\u5b58\u50a8\u540e\u7aef</li> <li>\u9ad8\u6027\u80fd\u5904\u7406\uff1a\u5e76\u53d1\u5904\u7406\u548c\u6279\u91cf\u6587\u6863\u52a0\u8f7d</li> <li>\u77e5\u8bc6\u8fc7\u6ee4\uff1a\u901a\u8fc7\u5143\u6570\u636e\uff0c\u652f\u6301\u77e5\u8bc6\u7684\u9759\u6001\u8fc7\u6ee4\u548c Agent \u667a\u80fd\u8fc7\u6ee4</li> <li>\u53ef\u6269\u5c55\u67b6\u6784\uff1a\u652f\u6301\u81ea\u5b9a\u4e49 Embedder\u3001Retriever \u548c Reranker</li> <li>\u52a8\u6001\u7ba1\u7406\uff1a\u652f\u6301\u8fd0\u884c\u65f6\u6dfb\u52a0\u3001\u79fb\u9664\u548c\u66f4\u65b0\u77e5\u8bc6\u6e90</li> <li>\u6570\u636e\u4e00\u81f4\u6027\u4fdd\u8bc1\uff1a\u901a\u8fc7 <code>enableSourceSync</code> \u5f00\u542f\u667a\u80fd\u540c\u6b65\u673a\u5236\uff0c\u786e\u4fdd\u5411\u91cf\u5b58\u50a8\u6570\u636e\u59cb\u7ec8\u4e0e\u7528\u6237\u914d\u7f6e\u7684 source \u4fdd\u6301\u4e00\u81f4\uff0c\u652f\u6301\u589e\u91cf\u5904\u7406\u3001\u53d8\u66f4\u68c0\u6d4b\u548c\u5b64\u513f\u6587\u6863\u81ea\u52a8\u6e05\u7406</li> </ul>"},{"location":"zh/knowledge/#agent","title":"Agent \u96c6\u6210","text":"<p>Knowledge \u7cfb\u7edf\u4e0e Agent \u7684\u96c6\u6210\u65b9\u5f0f\uff1a</p> <ul> <li>\u81ea\u52a8\u5de5\u5177\u6ce8\u518c\uff1a\u4f7f\u7528 <code>WithKnowledge()</code> \u9009\u9879\u81ea\u52a8\u6dfb\u52a0 <code>knowledge_search</code> \u5de5\u5177</li> <li>\u667a\u80fd\u8fc7\u6ee4\u5de5\u5177\uff1a\u4f7f\u7528 <code>WithEnableKnowledgeAgenticFilter(true)</code> \u542f\u7528 <code>knowledge_search_with_agentic_filter</code> \u5de5\u5177</li> <li>\u5de5\u5177\u8c03\u7528\uff1aAgent \u53ef\u4ee5\u8c03\u7528\u77e5\u8bc6\u641c\u7d22\u5de5\u5177\u83b7\u53d6\u76f8\u5173\u4fe1\u606f</li> <li>\u4e0a\u4e0b\u6587\u589e\u5f3a\uff1a\u68c0\u7d22\u5230\u7684\u77e5\u8bc6\u5185\u5bb9\u81ea\u52a8\u6dfb\u52a0\u5230 Agent \u7684\u4e0a\u4e0b\u6587\u4e2d</li> <li>\u5143\u6570\u636e\u8fc7\u6ee4\uff1a\u652f\u6301\u57fa\u4e8e\u6587\u6863\u5143\u6570\u636e\u8fdb\u884c\u7cbe\u51c6\u641c\u7d22</li> </ul>"},{"location":"zh/knowledge/#_3","title":"\u5feb\u901f\u5f00\u59cb","text":""},{"location":"zh/knowledge/#_4","title":"\u73af\u5883\u8981\u6c42","text":"<ul> <li>Go 1.24.1 \u6216\u66f4\u9ad8\u7248\u672c</li> <li>\u6709\u6548\u7684 LLM API \u5bc6\u94a5\uff08OpenAI \u517c\u5bb9\u63a5\u53e3\uff09</li> <li>\u5411\u91cf\u6570\u636e\u5e93\uff08\u53ef\u9009\uff0c\u7528\u4e8e\u751f\u4ea7\u73af\u5883\uff09</li> </ul>"},{"location":"zh/knowledge/#_5","title":"\u914d\u7f6e\u73af\u5883\u53d8\u91cf","text":"<pre><code># OpenAI API \u914d\u7f6e\nexport OPENAI_API_KEY=\"your-openai-api-key\"\nexport OPENAI_BASE_URL=\"your-openai-base-url\"\n\n# embedding \u6a21\u578b\u914d\u7f6e\uff08\u53ef\u9009\uff0c\u9700\u8981\u624b\u52a8\u8bfb\u53d6\uff09\nexport OPENAI_EMBEDDING_MODEL=\"text-embedding-3-small\"\n</code></pre>"},{"location":"zh/knowledge/#_6","title":"\u6700\u7b80\u793a\u4f8b","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n\n    // \u6838\u5fc3\u7ec4\u4ef6\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/event\"\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge\"\n    openaiembedder \"trpc.group/trpc-go/trpc-agent-go/knowledge/embedder/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge/source\"\n    dirsource \"trpc.group/trpc-go/trpc-agent-go/knowledge/source/dir\"\n    filesource \"trpc.group/trpc-go/trpc-agent-go/knowledge/source/file\"\n    vectorinmemory \"trpc.group/trpc-go/trpc-agent-go/knowledge/vectorstore/inmemory\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    // 1. \u521b\u5efa embedder\n    embedder := openaiembedder.New(\n        openaiembedder.WithModel(\"text-embedding-3-small\"),\n    )\n\n    // 2. \u521b\u5efa\u5411\u91cf\u5b58\u50a8\n    vectorStore := vectorinmemory.New()\n\n    // 3. \u521b\u5efa\u77e5\u8bc6\u6e90\uff08\u786e\u4fdd\u8fd9\u4e9b\u8def\u5f84\u5b58\u5728\u6216\u66ff\u6362\u4e3a\u4f60\u81ea\u5df1\u7684\u8def\u5f84\uff09\n    // \u4ee5\u4e0b\u6587\u4ef6\u5728 https://github.com/trpc-group/trpc-agent-go/tree/main/examples/knowledge\n    sources := []source.Source{\n        filesource.New([]string{\"./data/llm.md\"}),\n        dirsource.New([]string{\"./dir\"}),\n    }\n\n    // 4. \u521b\u5efa Knowledge\n    kb := knowledge.New(\n        knowledge.WithEmbedder(embedder),\n        knowledge.WithVectorStore(vectorStore),\n        knowledge.WithSources(sources),\n        knowledge.WithEnableSourceSync(true), // \u542f\u7528\u589e\u91cf\u540c\u6b65\uff0c\u4fdd\u6301\u5411\u91cf\u5b58\u50a8\u4e0e\u6e90\u4e00\u81f4\n    )\n\n    // 5. \u52a0\u8f7d\u6587\u6863\n    log.Println(\"\ud83d\ude80 \u5f00\u59cb\u52a0\u8f7d Knowledge ...\")\n    if err := kb.Load(ctx); err != nil {\n        log.Fatalf(\"Failed to load knowledge base: %v\", err)\n    }\n    log.Println(\"\u2705 Knowledge \u52a0\u8f7d\u5b8c\u6210\uff01\")\n\n    // 6. \u521b\u5efa LLM \u6a21\u578b\n    modelInstance := openai.New(\"claude-4-sonnet-20250514\")\n\n    // 7. \u521b\u5efa Agent \u5e76\u96c6\u6210 Knowledge\n    llmAgent := llmagent.New(\n        \"knowledge-assistant\",\n        llmagent.WithModel(modelInstance),\n        llmagent.WithDescription(\"\u5177\u6709 Knowledge \u8bbf\u95ee\u80fd\u529b\u7684\u667a\u80fd\u52a9\u624b\"),\n        llmagent.WithInstruction(\"\u4f7f\u7528 knowledge_search \u5de5\u5177\u4ece Knowledge \u68c0\u7d22\u76f8\u5173\u4fe1\u606f\uff0c\u5e76\u57fa\u4e8e\u68c0\u7d22\u5185\u5bb9\u56de\u7b54\u95ee\u9898\u3002\"),\n        llmagent.WithKnowledge(kb), // \u81ea\u52a8\u6dfb\u52a0 knowledge_search \u5de5\u5177\n    )\n\n    // 8. \u521b\u5efa Runner\n    sessionService := inmemory.NewSessionService()\n    appRunner := runner.NewRunner(\n        \"knowledge-chat\",\n        llmAgent,\n        runner.WithSessionService(sessionService),\n    )\n\n    // 9. \u6267\u884c\u5bf9\u8bdd\uff08Agent \u4f1a\u81ea\u52a8\u4f7f\u7528 knowledge_search \u5de5\u5177\uff09\n    log.Println(\"\ud83d\udd0d \u5f00\u59cb\u641c\u7d22 Knowledge ...\")\n    message := model.NewUserMessage(\"\u8bf7\u544a\u8bc9\u6211\u5173\u4e8e LLM \u7684\u4fe1\u606f\")\n    eventChan, err := appRunner.Run(ctx, \"user123\", \"session456\", message)\n    if err != nil {\n        log.Fatalf(\"Failed to run agent: %v\", err)\n    }\n}\n</code></pre>"},{"location":"zh/knowledge/#_7","title":"\u6838\u5fc3\u6982\u5ff5","text":"<p>knowledge \u6a21\u5757 \u662f tRPC-Agent-Go \u6846\u67b6\u7684\u77e5\u8bc6\u7ba1\u7406\u6838\u5fc3\uff0c\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684 RAG \u80fd\u529b\u3002\u8be5\u6a21\u5757\u91c7\u7528\u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u652f\u6301\u591a\u79cd\u6587\u6863\u6e90\u3001\u5411\u91cf\u5b58\u50a8\u540e\u7aef\u548c embedding \u6a21\u578b\u3002</p> <pre><code>knowledge/\n\u251c\u2500\u2500 knowledge.go          # \u6838\u5fc3\u63a5\u53e3\u5b9a\u4e49\u548c\u4e3b\u8981\u5b9e\u73b0\n\u251c\u2500\u2500 source/               # \u6587\u6863\u6e90\u7ba1\u7406\n\u2502   \u251c\u2500\u2500 source.go        # Source \u63a5\u53e3\u5b9a\u4e49\n\u2502   \u251c\u2500\u2500 file.go          # \u6587\u4ef6\u6e90\u5b9e\u73b0\n\u2502   \u251c\u2500\u2500 dir.go           # \u76ee\u5f55\u6e90\u5b9e\u73b0\n\u2502   \u251c\u2500\u2500 url.go           # URL \u6e90\u5b9e\u73b0\n\u2502   \u2514\u2500\u2500 auto.go          # \u81ea\u52a8\u6e90\u7c7b\u578b\u68c0\u6d4b\n\u251c\u2500\u2500 vectorstore/          # \u5411\u91cf\u5b58\u50a8\u540e\u7aef\n\u2502   \u251c\u2500\u2500 vectorstore.go   # VectorStore \u63a5\u53e3\u5b9a\u4e49\n\u2502   \u251c\u2500\u2500 inmemory/        # \u5185\u5b58\u5411\u91cf\u5b58\u50a8\uff08\u5f00\u53d1/\u6d4b\u8bd5\u7528\uff09\n\u2502   \u251c\u2500\u2500 pgvector/        # PostgreSQL + pgvector \u5b9e\u73b0\n\u2502   \u2514\u2500\u2500 tcvector/        # \u817e\u8baf\u4e91\u5411\u91cf\u6570\u636e\u5e93\u5b9e\u73b0\n\u251c\u2500\u2500 embedder/             # \u6587\u672c embedding \u6a21\u578b\n\u2502   \u251c\u2500\u2500 embedder.go      # Embedder \u63a5\u53e3\u5b9a\u4e49\n\u2502   \u251c\u2500\u2500 openai/          # OpenAI embedding \u6a21\u578b\n\u2502   \u2514\u2500\u2500 local/           # \u672c\u5730 embedding \u6a21\u578b\n\u251c\u2500\u2500 document/             # \u6587\u6863\u8868\u793a\n\u2502   \u2514\u2500\u2500 document.go      # Document \u7ed3\u6784\u5b9a\u4e49\n\u251c\u2500\u2500 query/                # \u67e5\u8be2\u589e\u5f3a\u5668\n\u2502   \u251c\u2500\u2500 query.go         # QueryEnhancer \u63a5\u53e3\u5b9a\u4e49\n\u2502   \u2514\u2500\u2500 passthrough.go   # \u9ed8\u8ba4\u900f\u4f20\u589e\u5f3a\u5668\n\u2514\u2500\u2500 loader/               # \u6587\u6863\u52a0\u8f7d\u5668\n    \u2514\u2500\u2500 loader.go        # \u6587\u6863\u52a0\u8f7d\u903b\u8f91\n</code></pre>"},{"location":"zh/knowledge/#_8","title":"\u4f7f\u7528\u6307\u5357","text":""},{"location":"zh/knowledge/#agent_1","title":"\u4e0e Agent \u96c6\u6210","text":"<p>\u4f7f\u7528 <code>llmagent.WithKnowledge(kb)</code> \u5c06 Knowledge \u96c6\u6210\u5230 Agent\uff0c\u6846\u67b6\u4f1a\u81ea\u52a8\u6ce8\u518c <code>knowledge_search</code> \u5de5\u5177\uff0c\u65e0\u9700\u624b\u52a8\u521b\u5efa\u81ea\u5b9a\u4e49\u5de5\u5177\u3002</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\" // \u53ef\u9009\uff1a\u9700\u8981\u9644\u52a0\u5176\u4ed6\u5de5\u5177\u65f6\u4f7f\u7528\n)\n\n// \u521b\u5efa Knowledge\n// kb := ...\n\n// \u521b\u5efa Agent \u5e76\u96c6\u6210 Knowledge\nllmAgent := llmagent.New(\n    \"knowledge-assistant\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"\u5177\u6709 Knowledge \u8bbf\u95ee\u80fd\u529b\u7684\u667a\u80fd\u52a9\u624b\"),\n    llmagent.WithInstruction(\"\u4f7f\u7528 knowledge_search \u5de5\u5177\u4ece Knowledge \u68c0\u7d22\u76f8\u5173\u4fe1\u606f\uff0c\u5e76\u57fa\u4e8e\u68c0\u7d22\u5185\u5bb9\u56de\u7b54\u95ee\u9898\u3002\"),\n    llmagent.WithKnowledge(kb), // \u81ea\u52a8\u6dfb\u52a0 knowledge_search \u5de5\u5177\n    // llmagent.WithTools([]tool.Tool{otherTool}), // \u53ef\u9009\uff1a\u9644\u52a0\u5176\u4ed6\u5de5\u5177\n)\n</code></pre>"},{"location":"zh/knowledge/#vectorstore","title":"\u5411\u91cf\u5b58\u50a8 (VectorStore)","text":"<p>\u5411\u91cf\u5b58\u50a8\u53ef\u5728\u4ee3\u7801\u4e2d\u901a\u8fc7\u9009\u9879\u914d\u7f6e\uff0c\u914d\u7f6e\u6765\u6e90\u53ef\u4ee5\u662f\u914d\u7f6e\u6587\u4ef6\u3001\u547d\u4ee4\u884c\u53c2\u6570\u6216\u73af\u5883\u53d8\u91cf\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u884c\u5b9e\u73b0\u3002</p>"},{"location":"zh/knowledge/#_9","title":"\u5411\u91cf\u5b58\u50a8\u914d\u7f6e\u793a\u4f8b","text":"<pre><code>import (\n    vectorinmemory \"trpc.group/trpc-go/trpc-agent-go/knowledge/vectorstore/inmemory\"\n    vectorpgvector \"trpc.group/trpc-go/trpc-agent-go/knowledge/vectorstore/pgvector\"\n    vectortcvector \"trpc.group/trpc-go/trpc-agent-go/knowledge/vectorstore/tcvector\"\n    vectorelasticsearch \"trpc.group/trpc-go/trpc-agent-go/knowledge/vectorstore/elasticsearch\"\n)\n\n// \u5185\u5b58\u5b9e\u73b0\uff0c\u53ef\u7528\u4e8e\u6d4b\u8bd5\nmemVS := vectorinmemory.New()\n\n// PostgreSQL + pgvector\npgVS, err := vectorpgvector.New(\n    vectorpgvector.WithHost(\"127.0.0.1\"),\n    vectorpgvector.WithPort(5432),\n    vectorpgvector.WithUser(\"postgres\"),\n    vectorpgvector.WithPassword(\"your-password\"),\n    vectorpgvector.WithDatabase(\"your-database\"),\n    // \u6839\u636e embedding \u6a21\u578b\u8bbe\u7f6e\u7d22\u5f15\u7ef4\u5ea6\uff08text-embedding-3-small \u4e3a 1536\uff09\u3002\n    pgvector.WithIndexDimension(1536),\n    // \u542f\u7528/\u5173\u95ed\u6587\u672c\u68c0\u7d22\u5411\u91cf\uff0c\u914d\u5408\u6df7\u5408\u68c0\u7d22\u6743\u91cd\u4f7f\u7528\u3002\n    pgvector.WithEnableTSVector(true),\n    // \u8c03\u6574\u6df7\u5408\u68c0\u7d22\u6743\u91cd\uff08\u5411\u91cf\u76f8\u4f3c\u5ea6\u6743\u91cd\u4e0e\u6587\u672c\u76f8\u5173\u6027\u6743\u91cd\uff09\u3002\n    pgvector.WithHybridSearchWeights(0.7, 0.3),\n    // \u5982\u5b89\u88c5\u4e86\u4e2d\u6587\u5206\u8bcd\u6269\u5c55\uff08\u5982 zhparser/jieba\uff09\uff0c\u53ef\u8bbe\u7f6e\u8bed\u8a00\u4ee5\u63d0\u5347\u6587\u672c\u53ec\u56de\u3002\n    pgvector.WithLanguageExtension(\"english\"),\n)\nif err != nil {\n    // \u5904\u7406 error\n}\n\n// TcVector\ntcVS, err := vectortcvector.New(\n    vectortcvector.WithURL(\"https://your-tcvector-endpoint\"),\n    vectortcvector.WithUsername(\"your-username\"),\n    vectortcvector.WithPassword(\"your-password\"),\n)\nif err != nil {\n    // \u5904\u7406 error\n}\n\n// \u4f20\u9012\u7ed9 Knowledge\nkb := knowledge.New(\n    knowledge.WithVectorStore(memVS), // pgVS, tcVS\n)\n</code></pre>"},{"location":"zh/knowledge/#elasticsearch","title":"Elasticsearch","text":"<pre><code>// \u521b\u5efa\u652f\u6301\u591a\u7248\u672c (v7, v8, v9) \u7684 Elasticsearch \u5411\u91cf\u5b58\u50a8\nesVS, err := vectorelasticsearch.New(\n    vectorelasticsearch.WithAddresses([]string{\"http://localhost:9200\"}),\n    vectorelasticsearch.WithUsername(os.Getenv(\"ELASTICSEARCH_USERNAME\")),\n    vectorelasticsearch.WithPassword(os.Getenv(\"ELASTICSEARCH_PASSWORD\")),\n    vectorelasticsearch.WithAPIKey(os.Getenv(\"ELASTICSEARCH_API_KEY\")),\n    vectorelasticsearch.WithIndexName(getEnvOrDefault(\"ELASTICSEARCH_INDEX_NAME\", \"trpc_agent_documents\")),\n    vectorelasticsearch.WithMaxRetries(3),\n    // \u7248\u672c\u53ef\u9009\uff1a\"v7\"\u3001\"v8\"\u3001\"v9\"\uff08\u9ed8\u8ba4 \"v9\"\uff09\n    vectorelasticsearch.WithVersion(\"v9\"),\n)\nif err != nil {\n    // \u5904\u7406 error\n}\n\nkb := knowledge.New(\n    knowledge.WithVectorStore(esVS),\n)\n</code></pre>"},{"location":"zh/knowledge/#embedder","title":"Embedder","text":"<p>Embedder \u8d1f\u8d23\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u5411\u91cf\u8868\u793a\uff0c\u662f Knowledge \u7cfb\u7edf\u7684\u6838\u5fc3\u7ec4\u4ef6\u3002\u76ee\u524d\u6846\u67b6\u4e3b\u8981\u652f\u6301 OpenAI embedding \u6a21\u578b\uff1a</p> <pre><code>import (\n    openaiembedder \"trpc.group/trpc-go/trpc-agent-go/knowledge/embedder/openai\"\n)\n\n// OpenAI Embedder \u914d\u7f6e\nembedder := openaiembedder.New(\n    openaiembedder.WithModel(\"text-embedding-3-small\"), // embedding \u6a21\u578b\uff0c\u4e5f\u53ef\u901a\u8fc7 OPENAI_EMBEDDING_MODEL \u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\n)\n\n// \u4f20\u9012\u7ed9 Knowledge\nkb := knowledge.New(\n    knowledge.WithEmbedder(embedder),\n)\n</code></pre> <p>\u652f\u6301\u7684 embedding \u6a21\u578b\uff1a</p> <ul> <li>OpenAI embedding \u6a21\u578b\uff08text-embedding-3-small \u7b49\uff09</li> <li>\u5176\u4ed6\u517c\u5bb9 OpenAI API \u7684 embedding \u670d\u52a1</li> <li>Gemini embedding \u6a21\u578b\uff08\u901a\u8fc7 <code>knowledge/embedder/gemini</code>\uff09</li> </ul> <p>\u6ce8\u610f:</p> <ul> <li>Retriever \u548c Reranker \u76ee\u524d\u7531 Knowledge \u5185\u90e8\u5b9e\u73b0\uff0c\u7528\u6237\u65e0\u9700\u5355\u72ec\u914d\u7f6e\u3002Knowledge \u4f1a\u81ea\u52a8\u5904\u7406\u6587\u6863\u68c0\u7d22\u548c\u7ed3\u679c\u6392\u5e8f\u3002</li> <li><code>OPENAI_EMBEDDING_MODEL</code> \u73af\u5883\u53d8\u91cf\u9700\u8981\u5728\u4ee3\u7801\u4e2d\u624b\u52a8\u8bfb\u53d6\uff0c\u6846\u67b6\u4e0d\u4f1a\u81ea\u52a8\u8bfb\u53d6\u3002\u53c2\u8003\u793a\u4f8b\u4ee3\u7801\u4e2d\u7684 <code>getEnvOrDefault(\"OPENAI_EMBEDDING_MODEL\", \"\")</code> \u5b9e\u73b0\u3002</li> </ul>"},{"location":"zh/knowledge/#_10","title":"\u6587\u6863\u6e90\u914d\u7f6e","text":"<p>\u6e90\u6a21\u5757\u63d0\u4f9b\u4e86\u591a\u79cd\u6587\u6863\u6e90\u7c7b\u578b\uff0c\u6bcf\u79cd\u7c7b\u578b\u90fd\u652f\u6301\u4e30\u5bcc\u7684\u914d\u7f6e\u9009\u9879\uff1a</p> <pre><code>import (\n    filesource \"trpc.group/trpc-go/trpc-agent-go/knowledge/source/file\"\n    dirsource \"trpc.group/trpc-go/trpc-agent-go/knowledge/source/dir\"\n    urlsource \"trpc.group/trpc-go/trpc-agent-go/knowledge/source/url\"\n    autosource \"trpc.group/trpc-go/trpc-agent-go/knowledge/source/auto\"\n)\n\n// \u6587\u4ef6\u6e90\uff1a\u5355\u4e2a\u6587\u4ef6\u5904\u7406\uff0c\u652f\u6301 .txt, .md, .go, .json \u7b49\u683c\u5f0f\nfileSrc := filesource.New(\n    []string{\"./data/llm.md\"},\n    filesource.WithChunkSize(1000),      // \u5206\u5757\u5927\u5c0f\n    filesource.WithChunkOverlap(200),    // \u5206\u5757\u91cd\u53e0\n    filesource.WithName(\"LLM Doc\"),\n    filesource.WithMetadataValue(\"type\", \"documentation\"),\n)\n\n// \u76ee\u5f55\u6e90\uff1a\u6279\u91cf\u5904\u7406\u76ee\u5f55\uff0c\u652f\u6301\u9012\u5f52\u548c\u8fc7\u6ee4\ndirSrc := dirsource.New(\n    []string{\"./docs\"},\n    dirsource.WithRecursive(true),                           // \u9012\u5f52\u5904\u7406\u5b50\u76ee\u5f55\n    dirsource.WithFileExtensions([]string{\".md\", \".txt\"}),   // \u6587\u4ef6\u6269\u5c55\u540d\u8fc7\u6ee4\n    dirsource.WithExcludePatterns([]string{\"*.tmp\", \"*.log\"}), // \u6392\u9664\u6a21\u5f0f\n    dirsource.WithChunkSize(800),\n    dirsource.WithName(\"Documentation\"),\n)\n\n// URL \u6e90\uff1a\u4ece\u7f51\u9875\u548c API \u83b7\u53d6\u5185\u5bb9\nurlSrc := urlsource.New(\n    []string{\"https://en.wikipedia.org/wiki/Artificial_intelligence\"},\n    urlsource.WithTimeout(30*time.Second),           // \u8bf7\u6c42\u8d85\u65f6\n    urlsource.WithUserAgent(\"MyBot/1.0\"),           // \u81ea\u5b9a\u4e49 User-Agent\n    urlsource.WithMaxContentLength(1024*1024),       // \u6700\u5927\u5185\u5bb9\u957f\u5ea6 (1MB)\n    urlsource.WithName(\"Web Content\"),\n)\n\n// \u81ea\u52a8\u6e90\uff1a\u667a\u80fd\u8bc6\u522b\u7c7b\u578b\uff0c\u81ea\u52a8\u9009\u62e9\u5904\u7406\u5668\nautoSrc := autosource.New(\n    []string{\n        \"Cloud computing provides on-demand access to computing resources.\",\n        \"https://docs.example.com/api\",\n        \"./config.yaml\",\n    },\n    autosource.WithName(\"Mixed Sources\"),\n    autosource.WithFallbackChunkSize(1000),\n)\n\n// \u7ec4\u5408\u4f7f\u7528\nsources := []source.Source{fileSrc, dirSrc, urlSrc, autoSrc}\n\n// \u4f20\u9012\u7ed9 Knowledge\nkb := knowledge.New(\n    knowledge.WithSources(sources),\n)\n\n// \u52a0\u8f7d\u6240\u6709\u6e90\nif err := kb.Load(ctx); err != nil {\n    log.Fatalf(\"Failed to load knowledge base: %v\", err)\n}\n</code></pre>"},{"location":"zh/knowledge/#_11","title":"\u6279\u91cf\u6587\u6863\u5904\u7406\u4e0e\u5e76\u53d1","text":"<p>Knowledge \u652f\u6301\u6279\u91cf\u6587\u6863\u5904\u7406\u548c\u5e76\u53d1\u52a0\u8f7d\uff0c\u53ef\u4ee5\u663e\u8457\u63d0\u5347\u5927\u91cf\u6587\u6863\u7684\u5904\u7406\u6027\u80fd\uff1a</p> <pre><code>err := kb.Load(ctx,\n    knowledge.WithShowProgress(true),      // \u6253\u5370\u8fdb\u5ea6\u65e5\u5fd7\n    knowledge.WithProgressStepSize(10),    // \u8fdb\u5ea6\u6b65\u957f\n    knowledge.WithShowStats(true),         // \u6253\u5370\u7edf\u8ba1\u4fe1\u606f\n    knowledge.WithSourceConcurrency(4),    // \u6e90\u7ea7\u5e76\u53d1\n    knowledge.WithDocConcurrency(64),      // \u6587\u6863\u7ea7\u5e76\u53d1\n)\n</code></pre> <p>\u5173\u4e8e\u6027\u80fd\u4e0e\u9650\u6d41\uff1a</p> <ul> <li>\u63d0\u9ad8\u5e76\u53d1\u4f1a\u589e\u52a0\u5bf9 Embedder \u670d\u52a1\uff08OpenAI/Gemini\uff09\u7684\u8c03\u7528\u9891\u7387\uff0c\u53ef\u80fd\u89e6\u53d1\u9650\u6d41\uff1b</li> <li>\u8bf7\u6839\u636e\u541e\u5410\u3001\u6210\u672c\u4e0e\u9650\u6d41\u60c5\u51b5\u8c03\u8282 <code>WithSourceConcurrency()</code>\u3001<code>WithDocConcurrency()</code>\uff1b</li> <li>\u9ed8\u8ba4\u503c\u5728\u591a\u6570\u573a\u666f\u4e0b\u8f83\u4e3a\u5747\u8861\uff1b\u9700\u8981\u66f4\u5feb\u901f\u5ea6\u53ef\u9002\u5f53\u4e0a\u8c03\uff0c\u9047\u5230\u9650\u6d41\u5219\u4e0b\u8c03\u3002</li> </ul>"},{"location":"zh/knowledge/#_12","title":"\u8fc7\u6ee4\u5668\u529f\u80fd","text":"<p>Knowledge \u7cfb\u7edf\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u8fc7\u6ee4\u5668\u529f\u80fd\uff0c\u5141\u8bb8\u57fa\u4e8e\u6587\u6863\u5143\u6570\u636e\u8fdb\u884c\u7cbe\u51c6\u641c\u7d22\u3002\u8fd9\u5305\u62ec\u9759\u6001\u8fc7\u6ee4\u5668\u548c\u667a\u80fd\u8fc7\u6ee4\u5668\u4e24\u79cd\u6a21\u5f0f\u3002</p>"},{"location":"zh/knowledge/#_13","title":"\u57fa\u7840\u8fc7\u6ee4\u5668","text":"<p>\u57fa\u7840\u8fc7\u6ee4\u5668\u652f\u6301\u4e24\u79cd\u8bbe\u7f6e\u65b9\u5f0f\uff1aAgent \u7ea7\u522b\u7684\u56fa\u5b9a\u8fc7\u6ee4\u5668\u548c Runner \u7ea7\u522b\u7684\u8fd0\u884c\u65f6\u8fc7\u6ee4\u5668\u3002</p>"},{"location":"zh/knowledge/#agent_2","title":"Agent \u7ea7\u8fc7\u6ee4\u5668","text":"<p>\u5728\u521b\u5efa Agent \u65f6\u9884\u8bbe\u56fa\u5b9a\u7684\u641c\u7d22\u8fc7\u6ee4\u6761\u4ef6\uff1a</p> <pre><code>// \u521b\u5efa\u5e26\u6709\u56fa\u5b9a\u8fc7\u6ee4\u5668\u7684 Agent\nllmAgent := llmagent.New(\n    \"knowledge-assistant\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithKnowledge(kb),\n    llmagent.WithKnowledgeFilter(map[string]interface{}{\n        \"category\": \"documentation\",\n        \"topic\":    \"programming\",\n    }),\n)\n</code></pre>"},{"location":"zh/knowledge/#runner","title":"Runner \u7ea7\u8fc7\u6ee4\u5668","text":"<p>\u5728\u8c03\u7528 <code>runner.Run()</code> \u65f6\u52a8\u6001\u4f20\u9012\u8fc7\u6ee4\u5668\uff0c\u9002\u7528\u4e8e\u9700\u8981\u6839\u636e\u4e0d\u540c\u8bf7\u6c42\u4e0a\u4e0b\u6587\u8fdb\u884c\u8fc7\u6ee4\u7684\u573a\u666f\uff1a</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/agent\"\n\n// \u5728\u8fd0\u884c\u65f6\u4f20\u9012\u8fc7\u6ee4\u5668\neventCh, err := runner.Run(\n    ctx,\n    userID,\n    sessionID,\n    message,\n    agent.WithKnowledgeFilter(map[string]interface{}{\n        \"user_level\": \"premium\",     // \u6839\u636e\u7528\u6237\u7ea7\u522b\u8fc7\u6ee4\n        \"region\":     \"china\",       // \u6839\u636e\u5730\u533a\u8fc7\u6ee4\n        \"language\":   \"zh\",          // \u6839\u636e\u8bed\u8a00\u8fc7\u6ee4\n    }),\n)\n</code></pre> <p>Runner \u7ea7\u8fc7\u6ee4\u5668\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e Agent \u7ea7\u8fc7\u6ee4\u5668\uff0c\u76f8\u540c\u952e\u7684\u503c\u4f1a\u88ab\u8986\u76d6\uff1a</p> <pre><code>// Agent \u7ea7\u8fc7\u6ee4\u5668\nllmAgent := llmagent.New(\n    \"assistant\",\n    llmagent.WithKnowledge(kb),\n    llmagent.WithKnowledgeFilter(map[string]interface{}{\n        \"category\": \"general\",\n        \"source\":   \"internal\",\n    }),\n)\n\n// Runner \u7ea7\u8fc7\u6ee4\u5668\u4f1a\u8986\u76d6\u76f8\u540c\u7684\u952e\neventCh, err := runner.Run(\n    ctx, userID, sessionID, message,\n    agent.WithKnowledgeFilter(map[string]interface{}{\n        \"source\": \"external\",  // \u8986\u76d6 Agent \u7ea7\u7684 \"internal\"\n        \"topic\":  \"api\",       // \u65b0\u589e\u8fc7\u6ee4\u6761\u4ef6\n    }),\n)\n\n// \u6700\u7ec8\u751f\u6548\u7684\u8fc7\u6ee4\u5668\uff1a\n// {\n//     \"category\": \"general\",   // \u6765\u81ea Agent \u7ea7\n//     \"source\":   \"external\",  // \u6765\u81ea Runner \u7ea7\uff08\u8986\u76d6\uff09\n//     \"topic\":    \"api\",       // \u6765\u81ea Runner \u7ea7\uff08\u65b0\u589e\uff09\n// }\n</code></pre>"},{"location":"zh/knowledge/#agentic-filter","title":"\u667a\u80fd\u8fc7\u6ee4\u5668 (Agentic Filter)","text":"<p>\u667a\u80fd\u8fc7\u6ee4\u5668\u662f Knowledge \u7cfb\u7edf\u7684\u9ad8\u7ea7\u529f\u80fd\uff0c\u5141\u8bb8 LLM Agent \u6839\u636e\u7528\u6237\u67e5\u8be2\u52a8\u6001\u9009\u62e9\u5408\u9002\u7684\u8fc7\u6ee4\u6761\u4ef6\u3002</p>"},{"location":"zh/knowledge/#_14","title":"\u542f\u7528\u667a\u80fd\u8fc7\u6ee4\u5668","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge/source\"\n)\n\n// \u83b7\u53d6\u6240\u6709\u6e90\u7684\u5143\u6570\u636e\u4fe1\u606f\nsourcesMetadata := source.GetAllMetadata(sources)\n\n// \u521b\u5efa\u652f\u6301\u667a\u80fd\u8fc7\u6ee4\u7684 Agent\nllmAgent := llmagent.New(\n    \"knowledge-assistant\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithKnowledge(kb),\n    llmagent.WithEnableKnowledgeAgenticFilter(true),           // \u542f\u7528\u667a\u80fd\u8fc7\u6ee4\u5668\n    llmagent.WithKnowledgeAgenticFilterInfo(sourcesMetadata), // \u63d0\u4f9b\u53ef\u7528\u7684\u8fc7\u6ee4\u5668\u4fe1\u606f\n)\n</code></pre>"},{"location":"zh/knowledge/#_15","title":"\u8fc7\u6ee4\u5668\u4f18\u5148\u7ea7","text":"<p>\u7cfb\u7edf\u652f\u6301\u591a\u5c42\u8fc7\u6ee4\u5668\uff0c\u6309\u4ee5\u4e0b\u4f18\u5148\u7ea7\u5408\u5e76\uff08\u540e\u8005\u8986\u76d6\u524d\u8005\uff09\uff1a</p> <ol> <li>Agent \u7ea7\u8fc7\u6ee4\u5668\uff1a<code>WithKnowledgeFilter()</code> \u8bbe\u7f6e\u7684\u56fa\u5b9a\u8fc7\u6ee4\u5668\uff08\u4f18\u5148\u7ea7\u6700\u4f4e\uff09</li> <li>Runner \u7ea7\u8fc7\u6ee4\u5668\uff1a\u8fd0\u884c\u65f6\u4f20\u9012\u7684\u8fc7\u6ee4\u5668\uff08\u4f18\u5148\u7ea7\u4e2d\u7b49\uff09</li> <li>\u667a\u80fd\u8fc7\u6ee4\u5668\uff1aLLM \u52a8\u6001\u751f\u6210\u7684\u8fc7\u6ee4\u5668\uff08\u4f18\u5148\u7ea7\u6700\u9ad8\uff09</li> </ol> <pre><code>// \u8fc7\u6ee4\u5668\u5408\u5e76\u903b\u8f91\uff08\u4f18\u5148\u7ea7\uff1aAgent &lt; Runner &lt; \u667a\u80fd\u8fc7\u6ee4\u5668\uff09\n// \u5982\u679c\u591a\u4e2a\u5c42\u7ea7\u8bbe\u7f6e\u4e86\u76f8\u540c\u7684\u952e\uff0c\u9ad8\u4f18\u5148\u7ea7\u7684\u503c\u4f1a\u8986\u76d6\u4f4e\u4f18\u5148\u7ea7\u7684\u503c\n\n// Agent \u7ea7\u8fc7\u6ee4\u5668\uff08\u57fa\u7840\u8fc7\u6ee4\u5668\uff09\nagentFilter := map[string]interface{}{\n    \"category\": \"documentation\",\n    \"source\":   \"internal\",\n}\n\n// Runner \u7ea7\u8fc7\u6ee4\u5668\uff08\u8fd0\u884c\u65f6\u8fc7\u6ee4\u5668\uff09\nrunnerFilter := map[string]interface{}{\n    \"source\": \"official\",  // \u8986\u76d6 Agent \u7ea7\u7684 \"internal\"\n    \"topic\":  \"api\",\n}\n\n// \u667a\u80fd\u8fc7\u6ee4\u5668\uff08LLM \u52a8\u6001\u751f\u6210\uff09\nintelligentFilter := map[string]interface{}{\n    \"topic\": \"programming\",  // \u8986\u76d6 Runner \u7ea7\u7684 \"api\"\n    \"level\": \"advanced\",\n}\n\n// \u6700\u7ec8\u5408\u5e76\u7ed3\u679c\nfinalFilter := {\n    \"category\": \"documentation\",  // \u6765\u81ea Agent \u7ea7\n    \"source\":   \"official\",       // \u6765\u81ea Runner \u7ea7\uff08\u8986\u76d6\u4e86 Agent \u7ea7\uff09\n    \"topic\":    \"programming\",     // \u6765\u81ea\u667a\u80fd\u8fc7\u6ee4\u5668\uff08\u8986\u76d6\u4e86 Runner \u7ea7\uff09\n    \"level\":    \"advanced\",       // \u6765\u81ea\u667a\u80fd\u8fc7\u6ee4\u5668\n}\n</code></pre>"},{"location":"zh/knowledge/#_16","title":"\u914d\u7f6e\u5143\u6570\u636e\u6e90","text":"<p>\u4e3a\u4e86\u4f7f\u667a\u80fd\u8fc7\u6ee4\u5668\u6b63\u5e38\u5de5\u4f5c\uff0c\u9700\u8981\u5728\u521b\u5efa\u6587\u6863\u6e90\u65f6\u6dfb\u52a0\u4e30\u5bcc\u7684\u5143\u6570\u636e\uff1a</p> <pre><code>sources := []source.Source{\n    // \u6587\u4ef6\u6e90\u914d\u7f6e\u5143\u6570\u636e\n    filesource.New(\n        []string{\"./docs/api.md\"},\n        filesource.WithName(\"API Documentation\"),\n        filesource.WithMetadataValue(\"category\", \"documentation\"),\n        filesource.WithMetadataValue(\"topic\", \"api\"),\n        filesource.WithMetadataValue(\"service_type\", \"gateway\"),\n        filesource.WithMetadataValue(\"protocol\", \"trpc-go\"),\n        filesource.WithMetadataValue(\"version\", \"v1.0\"),\n    ),\n\n    // \u76ee\u5f55\u6e90\u914d\u7f6e\u5143\u6570\u636e\n    dirsource.New(\n        []string{\"./tutorials\"},\n        dirsource.WithName(\"Tutorials\"),\n        dirsource.WithMetadataValue(\"category\", \"tutorial\"),\n        dirsource.WithMetadataValue(\"difficulty\", \"beginner\"),\n        dirsource.WithMetadataValue(\"topic\", \"programming\"),\n    ),\n\n    // URL \u6e90\u914d\u7f6e\u5143\u6570\u636e\n    urlsource.New(\n        []string{\"https://example.com/wiki/rpc\"},\n        urlsource.WithName(\"RPC Wiki\"),\n        urlsource.WithMetadataValue(\"category\", \"encyclopedia\"),\n        urlsource.WithMetadataValue(\"source_type\", \"web\"),\n        urlsource.WithMetadataValue(\"topic\", \"rpc\"),\n        urlsource.WithMetadataValue(\"language\", \"zh\"),\n    ),\n}\n</code></pre>"},{"location":"zh/knowledge/#_17","title":"\u5411\u91cf\u6570\u636e\u5e93\u8fc7\u6ee4\u5668\u652f\u6301","text":"<p>\u4e0d\u540c\u7684\u5411\u91cf\u6570\u636e\u5e93\u5bf9\u8fc7\u6ee4\u5668\u7684\u652f\u6301\u7a0b\u5ea6\u4e0d\u540c\uff1a</p>"},{"location":"zh/knowledge/#postgresql-pgvector","title":"PostgreSQL + pgvector","text":"<ul> <li>\u2705 \u652f\u6301\u6240\u6709\u5143\u6570\u636e\u5b57\u6bb5\u8fc7\u6ee4</li> <li>\u2705 \u652f\u6301\u590d\u6742\u67e5\u8be2\u6761\u4ef6</li> <li>\u2705 \u652f\u6301 JSONB \u5b57\u6bb5\u7d22\u5f15</li> </ul> <pre><code>vectorStore, err := vectorpgvector.New(\n    vectorpgvector.WithHost(\"127.0.0.1\"),\n    vectorpgvector.WithPort(5432),\n    // ... \u5176\u4ed6\u914d\u7f6e\n)\n</code></pre>"},{"location":"zh/knowledge/#tcvector","title":"TcVector","text":"<ul> <li>\u2705 \u652f\u6301\u9884\u5b9a\u4e49\u5b57\u6bb5\u8fc7\u6ee4</li> <li>\u26a0\ufe0f \u9700\u8981\u9884\u5148\u5efa\u7acb\u8fc7\u6ee4\u5b57\u6bb5\u7d22\u5f15</li> </ul> <pre><code>// \u83b7\u53d6\u6240\u6709\u5143\u6570\u636e\u952e\u7528\u4e8e\u5efa\u7acb\u7d22\u5f15\nmetadataKeys := source.GetAllMetadataKeys(sources)\n\nvectorStore, err := vectortcvector.New(\n    vectortcvector.WithURL(\"https://your-endpoint\"),\n    vectortcvector.WithFilterIndexFields(metadataKeys), // \u5efa\u7acb\u8fc7\u6ee4\u5b57\u6bb5\u7d22\u5f15\n    // ... \u5176\u4ed6\u914d\u7f6e\n)\n</code></pre>"},{"location":"zh/knowledge/#_18","title":"\u5185\u5b58\u5b58\u50a8","text":"<ul> <li>\u2705 \u652f\u6301\u6240\u6709\u8fc7\u6ee4\u5668\u529f\u80fd</li> <li>\u26a0\ufe0f \u4ec5\u9002\u7528\u4e8e\u5f00\u53d1\u548c\u6d4b\u8bd5</li> </ul>"},{"location":"zh/knowledge/#_19","title":"\u77e5\u8bc6\u5e93\u7ba1\u7406\u529f\u80fd","text":"<p>Knowledge \u7cfb\u7edf\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u77e5\u8bc6\u5e93\u7ba1\u7406\u529f\u80fd\uff0c\u652f\u6301\u52a8\u6001\u6e90\u7ba1\u7406\u548c\u667a\u80fd\u540c\u6b65\u673a\u5236\u3002</p>"},{"location":"zh/knowledge/#enablesourcesync","title":"\u542f\u7528\u6e90\u540c\u6b65 (enableSourceSync)","text":"<p>\u901a\u8fc7\u542f\u7528 <code>enableSourceSync</code>\uff0c\u77e5\u8bc6\u5e93\u4f1a\u59cb\u7ec8\u4fdd\u6301\u5411\u91cf\u5b58\u50a8\u6570\u636e\u548c\u914d\u7f6e\u7684\u6570\u636e\u6e90\u4e00\u81f4\uff0c\u8fd9\u91cc\u5982\u679c\u6ca1\u6709\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u529e\u6cd5\u6765\u7ba1\u7406\u77e5\u8bc6\u5e93\uff0c\u5efa\u8bae\u5f00\u542f\u6b64\u9009\u9879\uff1a</p> <pre><code>kb := knowledge.New(\n    knowledge.WithEmbedder(embedder),\n    knowledge.WithVectorStore(vectorStore),\n    knowledge.WithSources(sources),\n    knowledge.WithEnableSourceSync(true), // \u542f\u7528\u589e\u91cf\u540c\u6b65\n)\n</code></pre> <p>\u540c\u6b65\u673a\u5236\u7684\u5de5\u4f5c\u539f\u7406\uff1a</p> <ol> <li>\u52a0\u8f7d\u524d\u51c6\u5907\uff1a\u5237\u65b0\u6587\u6863\u4fe1\u606f\u7f13\u5b58\uff0c\u5efa\u7acb\u540c\u6b65\u72b6\u6001\u8ddf\u8e2a</li> <li>\u5904\u7406\u8fc7\u7a0b\u8ddf\u8e2a\uff1a\u8bb0\u5f55\u5df2\u5904\u7406\u7684\u6587\u6863\uff0c\u907f\u514d\u91cd\u590d\u5904\u7406</li> <li>\u52a0\u8f7d\u540e\u6e05\u7406\uff1a\u81ea\u52a8\u6e05\u7406\u4e0d\u518d\u5b58\u5728\u7684\u5b64\u513f\u6587\u6863</li> </ol> <p>\u542f\u7528\u540c\u6b65\u7684\u4f18\u52bf\uff1a</p> <ul> <li>\u6570\u636e\u4e00\u81f4\u6027\uff1a\u786e\u4fdd\u5411\u91cf\u5b58\u50a8\u4e0e\u6e90\u914d\u7f6e\u5b8c\u5168\u540c\u6b65</li> <li>\u589e\u91cf\u66f4\u65b0\uff1a\u53ea\u5904\u7406\u53d8\u66f4\u7684\u6587\u6863\uff0c\u63d0\u5347\u6027\u80fd</li> <li>\u5b64\u513f\u6e05\u7406\uff1a\u81ea\u52a8\u5220\u9664\u5df2\u79fb\u9664\u6e90\u7684\u76f8\u5173\u6587\u6863</li> <li>\u72b6\u6001\u8ddf\u8e2a\uff1a\u5b9e\u65f6\u76d1\u63a7\u540c\u6b65\u72b6\u6001\u548c\u5904\u7406\u8fdb\u5ea6</li> </ul>"},{"location":"zh/knowledge/#_20","title":"\u52a8\u6001\u6e90\u7ba1\u7406","text":"<p>Knowledge \u652f\u6301\u8fd0\u884c\u65f6\u52a8\u6001\u7ba1\u7406\u77e5\u8bc6\u6e90\uff0c\u786e\u4fdd\u5411\u91cf\u5b58\u50a8\u4e2d\u7684\u6570\u636e\u59cb\u7ec8\u4e0e\u7528\u6237\u914d\u7f6e\u7684 source \u4fdd\u6301\u4e00\u81f4\uff1a</p> <pre><code>// \u6dfb\u52a0\u65b0\u7684\u77e5\u8bc6\u6e90 - \u6570\u636e\u5c06\u4e0e\u914d\u7f6e\u7684\u6e90\u4fdd\u6301\u540c\u6b65\nnewSource := filesource.New([]string{\"./new-docs/api.md\"})\nif err := kb.AddSource(ctx, newSource); err != nil {\n    log.Printf(\"Failed to add source: %v\", err)\n}\n\n// \u91cd\u65b0\u52a0\u8f7d\u6307\u5b9a\u7684\u77e5\u8bc6\u6e90 - \u81ea\u52a8\u68c0\u6d4b\u53d8\u66f4\u5e76\u540c\u6b65\nif err := kb.ReloadSource(ctx, newSource); err != nil {\n    log.Printf(\"Failed to reload source: %v\", err)\n}\n\n// \u79fb\u9664\u6307\u5b9a\u7684\u77e5\u8bc6\u6e90 - \u7cbe\u786e\u5220\u9664\u76f8\u5173\u6587\u6863\nif err := kb.RemoveSource(ctx, \"API Documentation\"); err != nil {\n    log.Printf(\"Failed to remove source: %v\", err)\n}\n</code></pre> <p>\u52a8\u6001\u7ba1\u7406\u7684\u6838\u5fc3\u7279\u70b9\uff1a</p> <ul> <li>\u6570\u636e\u4e00\u81f4\u6027\u4fdd\u8bc1\uff1a\u5411\u91cf\u5b58\u50a8\u6570\u636e\u59cb\u7ec8\u4e0e\u7528\u6237\u914d\u7f6e\u7684 source \u4fdd\u6301\u4e00\u81f4</li> <li>\u667a\u80fd\u589e\u91cf\u540c\u6b65\uff1a\u53ea\u5904\u7406\u53d8\u66f4\u7684\u6587\u6863\uff0c\u907f\u514d\u91cd\u590d\u5904\u7406</li> <li>\u7cbe\u786e\u6e90\u63a7\u5236\uff1a\u652f\u6301\u6309\u6e90\u540d\u79f0\u7cbe\u786e\u6dfb\u52a0/\u79fb\u9664/\u91cd\u8f7d</li> <li>\u5b64\u513f\u6587\u6863\u6e05\u7406\uff1a\u81ea\u52a8\u6e05\u7406\u4e0d\u518d\u5c5e\u4e8e\u4efb\u4f55\u914d\u7f6e\u6e90\u7684\u6587\u6863</li> <li>\u70ed\u66f4\u65b0\u652f\u6301\uff1a\u65e0\u9700\u91cd\u542f\u5e94\u7528\u5373\u53ef\u66f4\u65b0\u77e5\u8bc6\u5e93</li> </ul>"},{"location":"zh/knowledge/#_21","title":"\u77e5\u8bc6\u5e93\u72b6\u6001\u76d1\u63a7","text":"<p>Knowledge \u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u72b6\u6001\u76d1\u63a7\u529f\u80fd\uff0c\u5e2e\u52a9\u7528\u6237\u4e86\u89e3\u5f53\u524d\u914d\u7f6e\u6e90\u7684\u540c\u6b65\u72b6\u6001\uff1a</p> <pre><code>// \u663e\u793a\u6240\u6709\u6587\u6863\u4fe1\u606f\ndocInfos, err := kb.ShowDocumentInfo(ctx)\nif err != nil {\n    log.Printf(\"Failed to show document info: %v\", err)\n    return\n}\n\n// \u6309\u6e90\u540d\u79f0\u8fc7\u6ee4\u663e\u793a\ndocInfos, err = kb.ShowDocumentInfo(ctx,\n    knowledge.WithShowDocumentInfoSourceName(\"APIDocumentation\"))\nif err != nil {\n    log.Printf(\"Failed to show source documents: %v\", err)\n    return\n}\n\n// \u6309\u6587\u6863ID\u8fc7\u6ee4\u663e\u793a\ndocInfos, err = kb.ShowDocumentInfo(ctx,\n    knowledge.WithShowDocumentInfoIDs([]string{\"doc1\", \"doc2\"}))\nif err != nil {\n    log.Printf(\"Failed to show specific documents: %v\", err)\n    return\n}\n\n// \u904d\u5386\u663e\u793a\u6587\u6863\u4fe1\u606f\nfor _, docInfo := range docInfos {\n    fmt.Printf(\"Document ID: %s\\n\", docInfo.DocumentID)\n    fmt.Printf(\"Source: %s\\n\", docInfo.SourceName)\n    fmt.Printf(\"URI: %s\\n\", docInfo.URI)\n    fmt.Printf(\"Chunk Index: %d\\n\", docInfo.ChunkIndex)\n}\n</code></pre> <p>\u72b6\u6001\u76d1\u63a7\u8f93\u51fa\u793a\u4f8b\uff1a</p> <pre><code>Document ID: a1b2c3d4e5f6...\nSource: Technical Documentation\nURI: /docs/api/authentication.md\nChunk Index: 0\n\nDocument ID: f6e5d4c3b2a1...\nSource: Technical Documentation\nURI: /docs/api/authentication.md\nChunk Index: 1\n</code></pre>"},{"location":"zh/knowledge/#queryenhancer","title":"QueryEnhancer","text":"<p>QueryEnhancer \u7528\u4e8e\u5728\u641c\u7d22\u524d\u5bf9\u7528\u6237\u67e5\u8be2\u8fdb\u884c\u9884\u5904\u7406\u548c\u4f18\u5316\u3002\u76ee\u524d\u6846\u67b6\u53ea\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u5b9e\u73b0\uff1a</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge\"\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge/query\"\n)\n\nkb := knowledge.New(\n    knowledge.WithQueryEnhancer(query.NewPassthroughEnhancer()), // \u9ed8\u8ba4\u589e\u5f3a\u5668\uff0c\u6309\u539f\u6837\u8fd4\u56de\u67e5\u8be2\n)\n</code></pre> <p>\u6ce8\u610f: QueryEnhancer \u4e0d\u662f\u5fc5\u987b\u7684\u7ec4\u4ef6\u3002\u5982\u679c\u4e0d\u6307\u5b9a\uff0cKnowledge \u4f1a\u76f4\u63a5\u4f7f\u7528\u539f\u59cb\u67e5\u8be2\u8fdb\u884c\u641c\u7d22\u3002\u53ea\u6709\u5728\u9700\u8981\u81ea\u5b9a\u4e49\u67e5\u8be2\u9884\u5904\u7406\u903b\u8f91\u65f6\u624d\u9700\u8981\u914d\u7f6e\u6b64\u9009\u9879\u3002</p>"},{"location":"zh/knowledge/#_22","title":"\u6027\u80fd\u4f18\u5316","text":"<p>Knowledge \u7cfb\u7edf\u63d0\u4f9b\u4e86\u591a\u79cd\u6027\u80fd\u4f18\u5316\u7b56\u7565\uff0c\u5305\u62ec\u5e76\u53d1\u5904\u7406\u3001\u5411\u91cf\u5b58\u50a8\u4f18\u5316\u548c\u7f13\u5b58\u673a\u5236\uff1a</p> <pre><code>// \u6839\u636e\u7cfb\u7edf\u8d44\u6e90\u8c03\u6574\u5e76\u53d1\u6570\nkb := knowledge.New(\n    knowledge.WithSources(sources),\n    knowledge.WithSourceConcurrency(runtime.NumCPU()),\n    knowledge.WithDocConcurrency(runtime.NumCPU()*2),\n)\n</code></pre>"},{"location":"zh/knowledge/#_23","title":"\u5b8c\u6574\u793a\u4f8b","text":"<p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u793a\u4f8b\uff0c\u5c55\u793a\u4e86\u5982\u4f55\u521b\u5efa\u5177\u6709 Knowledge \u8bbf\u95ee\u80fd\u529b\u7684 Agent\uff1a</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"flag\"\n    \"log\"\n    \"os\"\n    \"strconv\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n\n    // Embedder\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge/embedder\"\n    geminiembedder \"trpc.group/trpc-go/trpc-agent-go/knowledge/embedder/gemini\"\n    openaiembedder \"trpc.group/trpc-go/trpc-agent-go/knowledge/embedder/openai\"\n\n    // Source\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge/source\"\n    autosource \"trpc.group/trpc-go/trpc-agent-go/knowledge/source/auto\"\n    dirsource \"trpc.group/trpc-go/trpc-agent-go/knowledge/source/dir\"\n    filesource \"trpc.group/trpc-go/trpc-agent-go/knowledge/source/file\"\n    urlsource \"trpc.group/trpc-go/trpc-agent-go/knowledge/source/url\"\n\n    // Vector Store\n    \"trpc.group/trpc-go/trpc-agent-go/knowledge/vectorstore\"\n    vectorinmemory \"trpc.group/trpc-go/trpc-agent-go/knowledge/vectorstore/inmemory\"\n    vectorpgvector \"trpc.group/trpc-go/trpc-agent-go/knowledge/vectorstore/pgvector\"\n    vectortcvector \"trpc.group/trpc-go/trpc-agent-go/knowledge/vectorstore/tcvector\"\n)\n\nfunc main() {\n    var (\n        embedderType    = flag.String(\"embedder\", \"openai\", \"embedder type (openai, gemini)\")\n        vectorStoreType = flag.String(\"vectorstore\", \"inmemory\", \"vector store type (inmemory, pgvector, tcvector)\")\n        modelName       = flag.String(\"model\", \"claude-4-sonnet-20250514\", \"Name of the model to use\")\n    )\n\n    flag.Parse()\n\n    ctx := context.Background()\n\n    // 1. \u521b\u5efa embedder\uff08\u6839\u636e\u73af\u5883\u53d8\u91cf\u9009\u62e9\uff09\n    var embedder embedder.Embedder\n    var err error\n\n    switch *embedderType {\n    case \"gemini\":\n        embedder, err = geminiembedder.New(context.Background())\n        if err != nil {\n            log.Fatalf(\"Failed to create gemini embedder: %v\", err)\n        }\n    default: // openai\n        embedder = openaiembedder.New(\n            openaiembedder.WithModel(getEnvOrDefault(\"OPENAI_EMBEDDING_MODEL\", \"text-embedding-3-small\")),\n        )\n    }\n\n    // 2. \u521b\u5efa\u5411\u91cf\u5b58\u50a8\uff08\u6839\u636e\u53c2\u6570\u9009\u62e9\uff09\n    var vectorStore vectorstore.VectorStore\n\n    switch *vectorStoreType {\n    case \"pgvector\":\n        port, err := strconv.Atoi(getEnvOrDefault(\"PGVECTOR_PORT\", \"5432\"))\n        if err != nil {\n            log.Fatalf(\"Failed to convert PGVECTOR_PORT to int: %v\", err)\n        }\n\n        vectorStore, err = vectorpgvector.New(\n            vectorpgvector.WithHost(getEnvOrDefault(\"PGVECTOR_HOST\", \"127.0.0.1\")),\n            vectorpgvector.WithPort(port),\n            vectorpgvector.WithUser(getEnvOrDefault(\"PGVECTOR_USER\", \"postgres\")),\n            vectorpgvector.WithPassword(getEnvOrDefault(\"PGVECTOR_PASSWORD\", \"\")),\n            vectorpgvector.WithDatabase(getEnvOrDefault(\"PGVECTOR_DATABASE\", \"vectordb\")),\n            vectorpgvector.WithIndexDimension(1536),\n        )\n        if err != nil {\n            log.Fatalf(\"Failed to create pgvector store: %v\", err)\n        }\n    case \"tcvector\":\n        vectorStore, err = vectortcvector.New(\n            vectortcvector.WithURL(getEnvOrDefault(\"TCVECTOR_URL\", \"\")),\n            vectortcvector.WithUsername(getEnvOrDefault(\"TCVECTOR_USERNAME\", \"\")),\n            vectortcvector.WithPassword(getEnvOrDefault(\"TCVECTOR_PASSWORD\", \"\")),\n        )\n        if err != nil {\n            log.Fatalf(\"Failed to create tcvector store: %v\", err)\n        }\n    default: // inmemory\n        vectorStore = vectorinmemory.New()\n    }\n\n    // 3. \u521b\u5efa\u77e5\u8bc6\u6e90\n    sources := []source.Source{\n        // \u6587\u4ef6\u6e90\uff1a\u5355\u4e2a\u6587\u4ef6\u5904\u7406\n        filesource.New(\n            []string{\"./data/llm.md\"},\n            filesource.WithChunkSize(1000),\n            filesource.WithChunkOverlap(200),\n            filesource.WithName(\"LLM Documentation\"),\n            filesource.WithMetadataValue(\"type\", \"documentation\"),\n            filesource.WithMetadataValue(\"category\", \"ai\"),\n        ),\n\n        // \u76ee\u5f55\u6e90\uff1a\u6279\u91cf\u5904\u7406\u76ee\u5f55\n        dirsource.New(\n            []string{\"./dir\"},\n            dirsource.WithRecursive(true),\n            dirsource.WithFileExtensions([]string{\".md\", \".txt\"}),\n            dirsource.WithChunkSize(800),\n            dirsource.WithName(\"Documentation\"),\n            dirsource.WithMetadataValue(\"category\", \"docs\"),\n        ),\n\n        // URL \u6e90\uff1a\u4ece\u7f51\u9875\u83b7\u53d6\u5185\u5bb9\n        urlsource.New(\n            []string{\"https://en.wikipedia.org/wiki/Artificial_intelligence\"},\n            urlsource.WithName(\"Web Documentation\"),\n            urlsource.WithMetadataValue(\"source\", \"web\"),\n            urlsource.WithMetadataValue(\"category\", \"wikipedia\"),\n            urlsource.WithMetadataValue(\"language\", \"en\"),\n        ),\n\n        // \u81ea\u52a8\u6e90\uff1a\u6df7\u5408\u5185\u5bb9\u7c7b\u578b\n        autosource.New(\n            []string{\n                \"Cloud computing is the delivery of computing services over the internet, including servers, storage, databases, networking, software, and analytics. It provides on-demand access to shared computing resources.\",\n                \"Machine learning is a subset of artificial intelligence that enables systems to learn and improve from experience without being explicitly programmed.\",\n                \"./README.md\",\n            },\n            autosource.WithName(\"Mixed Knowledge Sources\"),\n            autosource.WithMetadataValue(\"category\", \"mixed\"),\n            autosource.WithMetadataValue(\"type\", \"custom\"),\n            autosource.WithMetadataValue(\"topics\", []string{\"cloud\", \"ml\", \"ai\"}),\n        ),\n    }\n\n    // 4. \u521b\u5efa Knowledge\n    kb := knowledge.New(\n        knowledge.WithEmbedder(embedder),\n        knowledge.WithVectorStore(vectorStore),\n        knowledge.WithSources(sources),\n    )\n\n    // 5. \u52a0\u8f7d\u6587\u6863\uff08\u5e26\u8fdb\u5ea6\u548c\u7edf\u8ba1\uff09\n    log.Println(\"\ud83d\ude80 \u5f00\u59cb\u52a0\u8f7d Knowledge ...\")\n    if err := kb.Load(\n        ctx,\n        knowledge.WithShowProgress(true),\n        knowledge.WithProgressStepSize(10),\n        knowledge.WithShowStats(true),\n        knowledge.WithSourceConcurrency(4),\n        knowledge.WithDocConcurrency(64),\n    ); err != nil {\n        log.Fatalf(\"\u274c Knowledge \u52a0\u8f7d\u5931\u8d25: %v\", err)\n    }\n    log.Println(\"\u2705 Knowledge \u52a0\u8f7d\u5b8c\u6210\uff01\")\n\n    // 6. \u521b\u5efa LLM \u6a21\u578b\n    modelInstance := openai.New(*modelName)\n\n    // \u83b7\u53d6\u6240\u6709\u6e90\u7684\u5143\u6570\u636e\u4fe1\u606f\uff08\u7528\u4e8e\u667a\u80fd\u8fc7\u6ee4\u5668\uff09\n    sourcesMetadata := source.GetAllMetadata(sources)\n\n    // 7. \u521b\u5efa Agent \u5e76\u96c6\u6210 Knowledge\n    llmAgent := llmagent.New(\n        \"knowledge-assistant\",\n        llmagent.WithModel(modelInstance),\n        llmagent.WithDescription(\"\u5177\u6709 Knowledge \u8bbf\u95ee\u80fd\u529b\u7684\u667a\u80fd\u52a9\u624b\"),\n        llmagent.WithInstruction(\"\u4f7f\u7528 knowledge_search \u6216 knowledge_search_with_filter \u5de5\u5177\u4ece Knowledge \u68c0\u7d22\u76f8\u5173\u4fe1\u606f\uff0c\u5e76\u57fa\u4e8e\u68c0\u7d22\u5185\u5bb9\u56de\u7b54\u95ee\u9898\u3002\u6839\u636e\u7528\u6237\u67e5\u8be2\u9009\u62e9\u5408\u9002\u7684\u8fc7\u6ee4\u6761\u4ef6\u3002\"),\n        llmagent.WithKnowledge(kb), // \u81ea\u52a8\u6dfb\u52a0 knowledge_search \u5de5\u5177\n        llmagent.WithEnableKnowledgeAgenticFilter(true),           // \u542f\u7528\u667a\u80fd\u8fc7\u6ee4\u5668\n        llmagent.WithKnowledgeAgenticFilterInfo(sourcesMetadata), // \u63d0\u4f9b\u53ef\u7528\u7684\u8fc7\u6ee4\u5668\u4fe1\u606f\n    )\n\n    // 8. \u521b\u5efa Runner\n    sessionService := inmemory.NewSessionService()\n    appRunner := runner.NewRunner(\n        \"knowledge-chat\",\n        llmAgent,\n        runner.WithSessionService(sessionService),\n    )\n\n    // 9. \u6267\u884c\u5bf9\u8bdd\uff08Agent \u4f1a\u81ea\u52a8\u4f7f\u7528 knowledge_search \u5de5\u5177\uff09\n    log.Println(\"\ud83d\udd0d \u5f00\u59cb\u641c\u7d22\u77e5\u8bc6\u5e93...\")\n    message := model.NewUserMessage(\"\u8bf7\u544a\u8bc9\u6211\u5173\u4e8e LLM \u7684\u4fe1\u606f\")\n    eventChan, err := appRunner.Run(ctx, \"user123\", \"session456\", message)\n    if err != nil {\n        log.Fatalf(\"Failed to run agent: %v\", err)\n    }\n\n    // 10. \u5904\u7406\u54cd\u5e94 ...\n\n    // 11. \u6f14\u793a\u77e5\u8bc6\u5e93\u7ba1\u7406\u529f\u80fd - \u67e5\u770b\u6587\u6863\u5143\u6570\u636e\n    log.Println(\"\ud83d\udcca \u663e\u793a\u5f53\u524d\u77e5\u8bc6\u5e93\u72b6\u6001...\")\n\n    // \u67e5\u8be2\u6240\u6709\u6587\u6863\u7684\u5143\u6570\u636e\u4fe1\u606f\uff0c\u4e5f\u652f\u6301\u67e5\u8be2\u6307\u5b9a source \u6216\u8005 metadata \u7684\u6570\u636e\u4fe1\u606f\n    docInfos, err := kb.ShowDocumentInfo(ctx)\n    if err != nil {\n        log.Printf(\"Failed to show document info: %v\", err)\n    } else {\n        log.Printf(\"\u77e5\u8bc6\u5e93\u4e2d\u603b\u5171\u6709 %d \u4e2a\u6587\u6863\u5757\", len(docInfos))\n    }\n\n\n    // 12. \u6f14\u793a\u52a8\u6001\u6dfb\u52a0\u6e90 - \u65b0\u6570\u636e\u5c06\u81ea\u52a8\u4e0e\u914d\u7f6e\u4fdd\u6301\u540c\u6b65\n    log.Println(\"\u6f14\u793a\u52a8\u6001\u6dfb\u52a0 source ...\")\n    newSource := filesource.New(\n        []string{\"./new-docs/changelog.md\"},\n        filesource.WithName(\"Changelog\"),\n        filesource.WithMetadataValue(\"category\", \"changelog\"),\n        filesource.WithMetadataValue(\"type\", \"updates\"),\n    )\n\n    if err := kb.AddSource(ctx, newSource); err != nil {\n        log.Printf(\"Failed to add new source: %v\", err)\n    }\n\n    // 13. \u6f14\u793a\u79fb\u9664source\uff08\u53ef\u9009\uff0c\u53d6\u6d88\u6ce8\u91ca\u4ee5\u6d4b\u8bd5\uff09\n    // if err := kb.RemoveSource(ctx, \"Changelog\"); err != nil {\n    //     log.Printf(\"Failed to remove source: %v\", err)\n    // }\n}\n\n// getEnvOrDefault returns the environment variable value or a default value if not set.\nfunc getEnvOrDefault(key, defaultValue string) string {\n    if value := os.Getenv(key); value != \"\" {\n        return value\n    }\n    return defaultValue\n}\n</code></pre> <p>\u5176\u4e2d\uff0c\u73af\u5883\u53d8\u91cf\u914d\u7f6e\u5982\u4e0b\uff1a</p> <pre><code># OpenAI API \u914d\u7f6e\uff08\u5f53\u4f7f\u7528 OpenAI embedder \u65f6\u5fc5\u9009\uff0c\u4f1a\u88ab OpenAI SDK \u81ea\u52a8\u8bfb\u53d6\uff09\nexport OPENAI_API_KEY=\"your-openai-api-key\"\nexport OPENAI_BASE_URL=\"your-openai-base-url\"\n# OpenAI embedding \u6a21\u578b\u914d\u7f6e\uff08\u53ef\u9009\uff0c\u9700\u8981\u5728\u4ee3\u7801\u4e2d\u624b\u52a8\u8bfb\u53d6\uff09\nexport OPENAI_EMBEDDING_MODEL=\"text-embedding-3-small\"\n\n# Google Gemini API \u914d\u7f6e\uff08\u5f53\u4f7f\u7528 Gemini embedder \u65f6\uff09\nexport GOOGLE_API_KEY=\"your-google-api-key\"\n\n# PostgreSQL + pgvector \u914d\u7f6e\uff08\u5f53\u4f7f\u7528 -vectorstore=pgvector \u65f6\u5fc5\u586b\uff09\nexport PGVECTOR_HOST=\"127.0.0.1\"\nexport PGVECTOR_PORT=\"5432\"\nexport PGVECTOR_USER=\"postgres\"\nexport PGVECTOR_PASSWORD=\"your-password\"\nexport PGVECTOR_DATABASE=\"vectordb\"\n\n# TcVector \u914d\u7f6e\uff08\u5f53\u4f7f\u7528 -vectorstore=tcvector \u65f6\u5fc5\u586b\uff09\nexport TCVECTOR_URL=\"https://your-tcvector-endpoint\"\nexport TCVECTOR_USERNAME=\"your-username\"\nexport TCVECTOR_PASSWORD=\"your-password\"\n\n# Elasticsearch \u914d\u7f6e\uff08\u5f53\u4f7f\u7528 -vectorstore=elasticsearch \u65f6\u5fc5\u586b\uff09\nexport ELASTICSEARCH_HOSTS=\"http://localhost:9200\"\nexport ELASTICSEARCH_USERNAME=\"\"\nexport ELASTICSEARCH_PASSWORD=\"\"\nexport ELASTICSEARCH_API_KEY=\"\"\nexport ELASTICSEARCH_INDEX_NAME=\"trpc_agent_documents\"\n</code></pre>"},{"location":"zh/knowledge/#_24","title":"\u547d\u4ee4\u884c\u53c2\u6570","text":"<pre><code># \u8fd0\u884c\u793a\u4f8b\u65f6\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570\u9009\u62e9\u7ec4\u4ef6\u7c7b\u578b\ngo run main.go -embedder openai -vectorstore inmemory\ngo run main.go -embedder gemini -vectorstore pgvector\ngo run main.go -embedder openai -vectorstore tcvector\ngo run main.go -embedder openai -vectorstore elasticsearch -es-version v9\n\n# \u53c2\u6570\u8bf4\u660e\uff1a\n# -embedder: \u9009\u62e9 embedder \u7c7b\u578b (openai, gemini)\uff0c \u9ed8\u8ba4\u4e3a openai\n# -vectorstore: \u9009\u62e9\u5411\u91cf\u5b58\u50a8\u7c7b\u578b (inmemory, pgvector, tcvector, elasticsearch)\uff0c\u9ed8\u8ba4\u4e3a inmemory\n# -es-version: \u6307\u5b9a Elasticsearch \u7248\u672c (v7, v8, v9)\uff0c\u4ec5\u5f53 vectorstore=elasticsearch \u65f6\u6709\u6548\n</code></pre>"},{"location":"zh/knowledge/#_25","title":"\u6545\u969c\u6392\u9664","text":""},{"location":"zh/knowledge/#_26","title":"\u5e38\u89c1\u95ee\u9898\u4e0e\u5904\u7406\u5efa\u8bae","text":"<ol> <li> <p>Create embedding failed/HTTP 4xx/5xx</p> <ul> <li>\u53ef\u80fd\u539f\u56e0\uff1aAPI Key \u65e0\u6548\u6216\u7f3a\u5931\uff1bBaseURL \u914d\u7f6e\u9519\u8bef\uff1b\u7f51\u7edc\u8bbf\u95ee\u53d7\u9650\uff1b\u6587\u672c\u8fc7\u957f\uff1b\u6240\u914d\u7f6e\u7684 BaseURL \u4e0d\u63d0\u4f9b Embeddings \u63a5\u53e3\u6216\u4e0d\u652f\u6301\u6240\u9009\u7684 embedding \u6a21\u578b\uff08\u4f8b\u5982\u8fd4\u56de 404 Not Found\uff09\u3002</li> <li>\u6392\u67e5\u6b65\u9aa4\uff1a<ul> <li>\u786e\u8ba4 <code>OPENAI_API_KEY</code> \u5df2\u8bbe\u7f6e\u4e14\u53ef\u7528\uff1b</li> <li>\u5982\u4f7f\u7528\u517c\u5bb9\u7f51\u5173\uff0c\u663e\u5f0f\u8bbe\u7f6e <code>WithBaseURL(os.Getenv(\"OPENAI_BASE_URL\"))</code>\uff1b</li> <li>\u786e\u8ba4 <code>WithModel(\"text-embedding-3-small\")</code> \u6216\u4f60\u6240\u7528\u670d\u52a1\u5b9e\u9645\u652f\u6301\u7684 embedding \u6a21\u578b\u540d\u79f0\uff1b</li> <li>\u4f7f\u7528\u6700\u5c0f\u5316\u6837\u4f8b\u8c03\u7528\u4e00\u6b21 embedding API \u9a8c\u8bc1\u8fde\u901a\u6027\uff1b</li> <li>\u7528 curl \u9a8c\u8bc1\u76ee\u6807 BaseURL \u662f\u5426\u5b9e\u73b0 <code>/v1/embeddings</code> \u4e14\u6a21\u578b\u5b58\u5728\uff1a    <pre><code>curl -sS -X POST \"$OPENAI_BASE_URL/embeddings\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"model\":\"text-embedding-3-small\",\"input\":\"ping\"}'\n</code></pre>    \u82e5\u8fd4\u56de 404/\u6a21\u578b\u4e0d\u5b58\u5728\uff0c\u8bf7\u66f4\u6362\u4e3a\u652f\u6301 Embeddings \u7684 BaseURL \u6216\u5207\u6362\u5230\u8be5\u670d\u52a1\u63d0\u4f9b\u7684\u6709\u6548 embedding \u6a21\u578b\u540d\u3002</li> <li>\u9010\u6b65\u7f29\u77ed\u6587\u672c\uff0c\u786e\u8ba4\u975e\u8d85\u957f\u8f93\u5165\u5bfc\u81f4\u3002</li> </ul> </li> <li>\u53c2\u8003\u4ee3\u7801\uff1a    <pre><code>embedder := openaiembedder.New(\n    openaiembedder.WithModel(\"text-embedding-3-small\"),\n    openaiembedder.WithAPIKey(os.Getenv(\"OPENAI_API_KEY\")),\n    openaiembedder.WithBaseURL(os.Getenv(\"OPENAI_BASE_URL\")),\n)\nif _, err := embedder.GetEmbedding(ctx, \"ping\"); err != nil {\n    log.Fatalf(\"embed check failed: %v\", err)\n}\n</code></pre></li> </ul> </li> <li> <p>\u52a0\u8f7d\u901f\u5ea6\u6162\u6216 CPU \u5360\u7528\u9ad8</p> <ul> <li>\u53ef\u80fd\u539f\u56e0\uff1a\u5355\u6838\u987a\u5e8f\u52a0\u8f7d\uff1b\u5e76\u53d1\u8bbe\u7f6e\u4e0d\u5408\u9002\uff1b\u5927\u6587\u4ef6\u5206\u5757\u7b56\u7565\u4e0d\u5408\u7406\u3002</li> <li>\u6392\u67e5\u6b65\u9aa4\uff1a<ul> <li>\u8bbe\u7f6e\u6e90\u7ea7/\u6587\u6863\u7ea7\u5e76\u53d1\uff1a<code>WithSourceConcurrency(N)</code>\u3001<code>WithDocConcurrency(M)</code>\uff1b</li> <li>\u8c03\u6574\u5206\u5757\u5927\u5c0f\uff0c\u907f\u514d\u8fc7\u591a\u5c0f\u5757\uff1b</li> <li>\u4e34\u65f6\u5173\u95ed\u7edf\u8ba1\u8f93\u51fa\u51cf\u5c11\u65e5\u5fd7\u5f00\u9500\uff1a<code>WithShowStats(false)</code>\u3002</li> </ul> </li> <li>\u53c2\u8003\u4ee3\u7801\uff1a    <pre><code>err := kb.Load(ctx,\n    knowledge.WithSourceConcurrency(runtime.NumCPU()),\n    knowledge.WithDocConcurrency(runtime.NumCPU()*2),\n    knowledge.WithShowStats(false),\n)\n</code></pre></li> </ul> </li> <li> <p>\u5b58\u50a8\u8fde\u63a5\u5931\u8d25\uff08pgvector/TcVector\uff09</p> <ul> <li>\u53ef\u80fd\u539f\u56e0\uff1a\u8fde\u63a5\u53c2\u6570\u9519\u8bef\uff1b\u7f51\u7edc/\u9274\u6743\u5931\u8d25\uff1b\u670d\u52a1\u672a\u542f\u52a8\u6216\u7aef\u53e3\u4e0d\u901a\u3002</li> <li>\u6392\u67e5\u6b65\u9aa4\uff1a<ul> <li>\u4f7f\u7528\u539f\u751f\u5ba2\u6237\u7aef\u5148\u8fde\u901a\u4e00\u6b21\uff08psql/curl\uff09\uff1b</li> <li>\u663e\u5f0f\u6253\u5370\u5f53\u524d\u914d\u7f6e\uff08host/port/user/db/url\uff09\uff1b</li> <li>\u4e3a\u6700\u5c0f\u5316\u793a\u4f8b\u4ec5\u63d2\u5165/\u67e5\u8be2\u4e00\u6761\u8bb0\u5f55\u9a8c\u8bc1\u3002</li> </ul> </li> </ul> </li> <li> <p>\u5185\u5b58\u4f7f\u7528\u8fc7\u9ad8</p> <ul> <li>\u53ef\u80fd\u539f\u56e0\uff1a\u4e00\u6b21\u6027\u52a0\u8f7d\u6587\u6863\u8fc7\u591a\uff1b\u5757\u5c3a\u5bf8/\u91cd\u53e0\u8fc7\u5927\uff1b\u76f8\u4f3c\u5ea6\u7b5b\u9009\u8fc7\u5bbd\u3002</li> <li>\u6392\u67e5\u6b65\u9aa4\uff1a<ul> <li>\u51cf\u5c0f\u5e76\u53d1\u4e0e\u5206\u5757\u91cd\u53e0\uff1b</li> <li>\u5206\u6279\u52a0\u8f7d\u76ee\u5f55\u3002</li> </ul> </li> </ul> </li> <li> <p>\u7ef4\u5ea6/\u5411\u91cf\u4e0d\u5339\u914d</p> <ul> <li>\u75c7\u72b6\uff1a\u641c\u7d22\u9636\u6bb5\u62a5\u9519\u6216\u5f97\u5206\u5f02\u5e38\u4e3a 0\u3002</li> <li>\u6392\u67e5\uff1a<ul> <li>\u786e\u8ba4 embedding \u6a21\u578b\u7ef4\u5ea6\u4e0e\u5b58\u91cf\u5411\u91cf\u4e00\u81f4\uff08<code>text-embedding-3-small</code> \u4e3a 1536\uff09\uff1b</li> <li>\u66ff\u6362 embedding \u6a21\u578b\u540e\u9700\u91cd\u5efa\uff08\u6e05\u7a7a\u5e76\u91cd\u704c\uff09\u5411\u91cf\u5e93\u3002</li> </ul> </li> </ul> </li> <li> <p>\u8def\u5f84/\u683c\u5f0f\u8bfb\u53d6\u5931\u8d25</p> <ul> <li>\u75c7\u72b6\uff1a\u52a0\u8f7d\u65e5\u5fd7\u663e\u793a 0 \u6587\u6863\u6216\u7279\u5b9a\u6e90\u62a5\u9519\u3002</li> <li>\u6392\u67e5\uff1a<ul> <li>\u786e\u8ba4\u6587\u4ef6\u5b58\u5728\u4e14\u540e\u7f00\u53d7\u652f\u6301\uff08.md/.txt/.pdf/.csv/.json/.docx \u7b49\uff09\uff1b</li> <li>\u76ee\u5f55\u6e90\u662f\u5426\u9700\u8981 <code>WithRecursive(true)</code>\uff1b</li> <li>\u4f7f\u7528 <code>WithFileExtensions</code> \u505a\u767d\u540d\u5355\u8fc7\u6ee4\u3002</li> </ul> </li> </ul> </li> </ol>"},{"location":"zh/memory/","title":"Memory \u4f7f\u7528\u6587\u6863","text":""},{"location":"zh/memory/#_1","title":"\u6982\u8ff0","text":"<p>Memory \u662f tRPC-Agent-Go \u6846\u67b6\u4e2d\u7684\u8bb0\u5fc6\u7ba1\u7406\u7cfb\u7edf\uff0c\u4e3a Agent \u63d0\u4f9b\u6301\u4e45\u5316\u8bb0\u5fc6\u548c\u4e0a\u4e0b\u6587\u7ba1\u7406\u80fd\u529b\u3002\u901a\u8fc7\u96c6\u6210\u8bb0\u5fc6\u670d\u52a1\u3001\u4f1a\u8bdd\u7ba1\u7406\u548c\u8bb0\u5fc6\u5de5\u5177\uff0cMemory \u7cfb\u7edf\u80fd\u591f\u5e2e\u52a9 Agent \u8bb0\u4f4f\u7528\u6237\u4fe1\u606f\u3001\u7ef4\u62a4\u5bf9\u8bdd\u4e0a\u4e0b\u6587\uff0c\u5e76\u5728\u591a\u8f6e\u5bf9\u8bdd\u4e2d\u63d0\u4f9b\u4e2a\u6027\u5316\u7684\u54cd\u5e94\u4f53\u9a8c\u3002</p>"},{"location":"zh/memory/#_2","title":"\u26a0\ufe0f \u4e0d\u517c\u5bb9\u66f4\u65b0\u901a\u77e5","text":"<p>\u91cd\u8981\u63d0\u793a\uff1a\u8bb0\u5fc6\u96c6\u6210\u65b9\u5f0f\u5df2\u66f4\u65b0\uff0c\u4ee5\u63d0\u4f9b\u66f4\u597d\u7684\u5173\u6ce8\u70b9\u5206\u79bb\u548c\u663e\u5f0f\u63a7\u5236\u3002\u8fd9\u662f\u4e00\u4e2a\u4e0d\u517c\u5bb9\u66f4\u65b0\uff0c\u4f1a\u5f71\u54cd\u8bb0\u5fc6\u670d\u52a1\u4e0e Agent \u7684\u96c6\u6210\u65b9\u5f0f\u3002</p>"},{"location":"zh/memory/#_3","title":"\u53d8\u66f4\u5185\u5bb9","text":"<ul> <li>\u79fb\u9664\uff1a<code>llmagent.WithMemory(memoryService)</code> - \u81ea\u52a8\u8bb0\u5fc6\u5de5\u5177\u6ce8\u518c</li> <li>\u65b0\u589e\uff1a\u4e24\u6b65\u96c6\u6210\u65b9\u5f0f\uff1a<ol> <li><code>llmagent.WithTools(memoryService.Tools())</code> - \u624b\u52a8\u5de5\u5177\u6ce8\u518c</li> <li><code>runner.WithMemoryService(memoryService)</code> - \u5728 runner \u4e2d\u7ba1\u7406\u670d\u52a1</li> </ol> </li> </ul>"},{"location":"zh/memory/#_4","title":"\u8fc1\u79fb\u6307\u5357","text":"<p>\u4e4b\u524d\uff08\u65e7\u65b9\u5f0f\uff09\uff1a</p> <pre><code>llmAgent := llmagent.New(\n    \"memory-assistant\",\n    llmagent.WithMemory(memoryService), // \u274c \u4e0d\u518d\u652f\u6301\n)\n</code></pre> <p>\u73b0\u5728\uff08\u65b0\u65b9\u5f0f\uff09\uff1a</p> <pre><code>llmAgent := llmagent.New(\n    \"memory-assistant\",\n    llmagent.WithTools(memoryService.Tools()), // \u2705 \u6b65\u9aa41\uff1a\u6ce8\u518c\u5de5\u5177\n)\n\nrunner := runner.NewRunner(\n    \"app\",\n    llmAgent,\n    runner.WithMemoryService(memoryService), // \u2705 \u6b65\u9aa42\uff1a\u8bbe\u7f6e\u670d\u52a1\n)\n</code></pre>"},{"location":"zh/memory/#_5","title":"\u65b0\u65b9\u5f0f\u7684\u4f18\u52bf","text":"<ul> <li>\u663e\u5f0f\u63a7\u5236\uff1a\u5e94\u7528\u7a0b\u5e8f\u5b8c\u5168\u63a7\u5236\u6ce8\u518c\u54ea\u4e9b\u5de5\u5177</li> <li>\u66f4\u597d\u7684\u5206\u79bb\uff1a\u6846\u67b6\u4e0e\u4e1a\u52a1\u903b\u8f91\u7684\u6e05\u6670\u5206\u79bb</li> <li>\u670d\u52a1\u7ba1\u7406\uff1a\u8bb0\u5fc6\u670d\u52a1\u5728\u9002\u5f53\u7684\u5c42\u7ea7\uff08runner\uff09\u8fdb\u884c\u7ba1\u7406</li> <li>\u65e0\u81ea\u52a8\u6ce8\u5165\uff1a\u6846\u67b6\u4e0d\u4f1a\u81ea\u52a8\u6ce8\u5165\u5de5\u5177\u6216\u63d0\u793a\uff0c\u53ef\u4ee5\u6309\u9700\u4f7f\u7528</li> </ul>"},{"location":"zh/memory/#_6","title":"\u4f7f\u7528\u6a21\u5f0f","text":"<p>Memory \u7cfb\u7edf\u7684\u4f7f\u7528\u9075\u5faa\u4ee5\u4e0b\u6a21\u5f0f\uff1a</p> <ol> <li>\u521b\u5efa Memory Service\uff1a\u914d\u7f6e\u8bb0\u5fc6\u5b58\u50a8\u540e\u7aef\uff08\u5185\u5b58\u6216 Redis\uff09</li> <li>\u6ce8\u518c\u8bb0\u5fc6\u5de5\u5177\uff1a\u4f7f\u7528 <code>llmagent.WithTools(memoryService.Tools())</code> \u624b\u52a8\u6ce8\u518c\u8bb0\u5fc6\u5de5\u5177\u5230 Agent</li> <li>\u5728 Runner \u4e2d\u8bbe\u7f6e\u8bb0\u5fc6\u670d\u52a1\uff1a\u4f7f\u7528 <code>runner.WithMemoryService(memoryService)</code> \u5728 Runner \u4e2d\u914d\u7f6e\u8bb0\u5fc6\u670d\u52a1</li> <li>Agent \u81ea\u52a8\u8c03\u7528\uff1aAgent \u901a\u8fc7\u5df2\u6ce8\u518c\u7684\u8bb0\u5fc6\u5de5\u5177\u81ea\u52a8\u8fdb\u884c\u8bb0\u5fc6\u7ba1\u7406</li> <li>\u4f1a\u8bdd\u6301\u4e45\u5316\uff1a\u8bb0\u5fc6\u4fe1\u606f\u5728\u4f1a\u8bdd\u95f4\u4fdd\u6301\uff0c\u652f\u6301\u591a\u8f6e\u5bf9\u8bdd</li> </ol> <p>\u8fd9\u79cd\u6a21\u5f0f\u63d0\u4f9b\u4e86\uff1a</p> <ul> <li>\u667a\u80fd\u8bb0\u5fc6\uff1a\u57fa\u4e8e\u5bf9\u8bdd\u4e0a\u4e0b\u6587\u7684\u81ea\u52a8\u8bb0\u5fc6\u5b58\u50a8\u548c\u68c0\u7d22</li> <li>\u591a\u8f6e\u5bf9\u8bdd\uff1a\u7ef4\u62a4\u5bf9\u8bdd\u72b6\u6001\u548c\u8bb0\u5fc6\u8fde\u7eed\u6027</li> <li>\u7075\u6d3b\u5b58\u50a8\uff1a\u652f\u6301\u5185\u5b58\u548c Redis \u7b49\u591a\u79cd\u5b58\u50a8\u540e\u7aef</li> <li>\u5de5\u5177\u96c6\u6210\uff1a\u624b\u52a8\u6ce8\u518c\u8bb0\u5fc6\u7ba1\u7406\u5de5\u5177\uff0c\u63d0\u4f9b\u663e\u5f0f\u63a7\u5236</li> <li>\u4f1a\u8bdd\u7ba1\u7406\uff1a\u652f\u6301\u4f1a\u8bdd\u521b\u5efa\u3001\u5207\u6362\u548c\u91cd\u7f6e</li> </ul>"},{"location":"zh/memory/#agent","title":"Agent \u96c6\u6210","text":"<p>Memory \u7cfb\u7edf\u4e0e Agent \u7684\u96c6\u6210\u65b9\u5f0f\uff1a</p> <ul> <li>\u624b\u52a8\u5de5\u5177\u6ce8\u518c\uff1a\u4f7f\u7528 <code>llmagent.WithTools(memoryService.Tools())</code> \u663e\u5f0f\u6ce8\u518c\u8bb0\u5fc6\u5de5\u5177</li> <li>\u670d\u52a1\u7ba1\u7406\uff1a\u4f7f\u7528 <code>runner.WithMemoryService(memoryService)</code> \u5728 Runner \u5c42\u7ea7\u7ba1\u7406\u8bb0\u5fc6\u670d\u52a1</li> <li>\u5de5\u5177\u8c03\u7528\uff1aAgent \u53ef\u4ee5\u8c03\u7528\u8bb0\u5fc6\u5de5\u5177\u8fdb\u884c\u4fe1\u606f\u7684\u5b58\u50a8\u3001\u68c0\u7d22\u548c\u7ba1\u7406</li> <li>\u663e\u5f0f\u63a7\u5236\uff1a\u5e94\u7528\u7a0b\u5e8f\u5b8c\u5168\u63a7\u5236\u6ce8\u518c\u54ea\u4e9b\u5de5\u5177\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u5b83\u4eec</li> </ul>"},{"location":"zh/memory/#_7","title":"\u5feb\u901f\u5f00\u59cb","text":""},{"location":"zh/memory/#_8","title":"\u73af\u5883\u8981\u6c42","text":"<ul> <li>Go 1.21 \u6216\u66f4\u9ad8\u7248\u672c</li> <li>\u6709\u6548\u7684 LLM API \u5bc6\u94a5\uff08OpenAI \u517c\u5bb9\u63a5\u53e3\uff09</li> <li>Redis \u670d\u52a1\uff08\u53ef\u9009\uff0c\u7528\u4e8e\u751f\u4ea7\u73af\u5883\uff09</li> </ul>"},{"location":"zh/memory/#_9","title":"\u914d\u7f6e\u73af\u5883\u53d8\u91cf","text":"<pre><code># OpenAI API \u914d\u7f6e\nexport OPENAI_API_KEY=\"your-openai-api-key\"\nexport OPENAI_BASE_URL=\"your-openai-base-url\"\n</code></pre>"},{"location":"zh/memory/#_10","title":"\u6700\u7b80\u793a\u4f8b","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n\n    // \u6838\u5fc3\u7ec4\u4ef6\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    memoryinmemory \"trpc.group/trpc-go/trpc-agent-go/memory/inmemory\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    // 1. \u521b\u5efa\u8bb0\u5fc6\u670d\u52a1\n    memoryService := memoryinmemory.NewMemoryService()\n\n    // 2. \u521b\u5efa LLM \u6a21\u578b\n    modelInstance := openai.New(\"deepseek-chat\")\n\n    // 3. \u521b\u5efa Agent \u5e76\u6ce8\u518c\u8bb0\u5fc6\u5de5\u5177\n    llmAgent := llmagent.New(\n        \"memory-assistant\",\n        llmagent.WithModel(modelInstance),\n        llmagent.WithDescription(\"\u5177\u6709\u8bb0\u5fc6\u80fd\u529b\u7684\u667a\u80fd\u52a9\u624b\"),\n        llmagent.WithInstruction(\"\u8bb0\u4f4f\u7528\u6237\u7684\u91cd\u8981\u4fe1\u606f\uff0c\u5e76\u5728\u9700\u8981\u65f6\u56de\u5fc6\u8d77\u6765\u3002\"),\n        llmagent.WithTools(memoryService.Tools()), // \u6ce8\u518c\u8bb0\u5fc6\u5de5\u5177\n    )\n\n    // 4. \u521b\u5efa Runner \u5e76\u8bbe\u7f6e\u8bb0\u5fc6\u670d\u52a1\n    sessionService := inmemory.NewSessionService()\n    appRunner := runner.NewRunner(\n        \"memory-chat\",\n        llmAgent,\n        runner.WithSessionService(sessionService),\n        runner.WithMemoryService(memoryService), // \u8bbe\u7f6e\u8bb0\u5fc6\u670d\u52a1\n    )\n\n    // 5. \u6267\u884c\u5bf9\u8bdd\uff08Agent \u4f1a\u81ea\u52a8\u4f7f\u7528\u8bb0\u5fc6\u5de5\u5177\uff09\n    log.Println(\"\ud83e\udde0 \u5f00\u59cb\u8bb0\u5fc6\u5bf9\u8bdd...\")\n    message := model.NewUserMessage(\"\u4f60\u597d\uff0c\u6211\u7684\u540d\u5b57\u662f\u5f20\u4e09\uff0c\u6211\u559c\u6b22\u7f16\u7a0b\")\n    eventChan, err := appRunner.Run(ctx, \"user123\", \"session456\", message)\n    if err != nil {\n        log.Fatalf(\"Failed to run agent: %v\", err)\n    }\n\n    // 6. \u5904\u7406\u54cd\u5e94 ...\n}\n</code></pre>"},{"location":"zh/memory/#_11","title":"\u6838\u5fc3\u6982\u5ff5","text":"<p>memory \u6a21\u5757 \u662f tRPC-Agent-Go \u6846\u67b6\u7684\u8bb0\u5fc6\u7ba1\u7406\u6838\u5fc3\uff0c\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u8bb0\u5fc6\u5b58\u50a8\u548c\u68c0\u7d22\u80fd\u529b\u3002\u8be5\u6a21\u5757\u91c7\u7528\u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u652f\u6301\u591a\u79cd\u5b58\u50a8\u540e\u7aef\u548c\u8bb0\u5fc6\u5de5\u5177\u3002</p> <pre><code>memory/\n\u251c\u2500\u2500 memory.go          # \u6838\u5fc3\u63a5\u53e3\u5b9a\u4e49\n\u251c\u2500\u2500 inmemory/          # \u5185\u5b58\u8bb0\u5fc6\u670d\u52a1\u5b9e\u73b0\n\u251c\u2500\u2500 redis/             # Redis \u8bb0\u5fc6\u670d\u52a1\u5b9e\u73b0\n\u2514\u2500\u2500 tool/              # \u8bb0\u5fc6\u5de5\u5177\u5b9e\u73b0\n    \u251c\u2500\u2500 tool.go        # \u5de5\u5177\u63a5\u53e3\u548c\u5b9e\u73b0\n    \u2514\u2500\u2500 types.go       # \u5de5\u5177\u7c7b\u578b\u5b9a\u4e49\n</code></pre>"},{"location":"zh/memory/#_12","title":"\u4f7f\u7528\u6307\u5357","text":""},{"location":"zh/memory/#agent_1","title":"\u4e0e Agent \u96c6\u6210","text":"<p>\u4f7f\u7528\u4e24\u6b65\u65b9\u6cd5\u5c06 Memory Service \u96c6\u6210\u5230 Agent\uff1a</p> <ol> <li>\u4f7f\u7528 <code>llmagent.WithTools(memoryService.Tools())</code> \u5411 Agent \u6ce8\u518c\u8bb0\u5fc6\u5de5\u5177</li> <li>\u4f7f\u7528 <code>runner.WithMemoryService(memoryService)</code> \u5728 Runner \u4e2d\u8bbe\u7f6e\u8bb0\u5fc6\u670d\u52a1</li> </ol> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/memory\"\n    memoryinmemory \"trpc.group/trpc-go/trpc-agent-go/memory/inmemory\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n)\n\n// \u521b\u5efa\u8bb0\u5fc6\u670d\u52a1\nmemoryService := memoryinmemory.NewMemoryService()\n\n// \u521b\u5efa Agent \u5e76\u6ce8\u518c\u8bb0\u5fc6\u5de5\u5177\nllmAgent := llmagent.New(\n    \"memory-assistant\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"\u5177\u6709\u8bb0\u5fc6\u80fd\u529b\u7684\u667a\u80fd\u52a9\u624b\"),\n    llmagent.WithInstruction(\"\u8bb0\u4f4f\u7528\u6237\u7684\u91cd\u8981\u4fe1\u606f\uff0c\u5e76\u5728\u9700\u8981\u65f6\u56de\u5fc6\u8d77\u6765\u3002\"),\n    llmagent.WithTools(memoryService.Tools()), // \u6ce8\u518c\u8bb0\u5fc6\u5de5\u5177\n)\n\n// \u521b\u5efa Runner \u5e76\u8bbe\u7f6e\u8bb0\u5fc6\u670d\u52a1\nappRunner := runner.NewRunner(\n    \"memory-chat\",\n    llmAgent,\n    runner.WithMemoryService(memoryService), // \u8bbe\u7f6e\u8bb0\u5fc6\u670d\u52a1\n)\n</code></pre>"},{"location":"zh/memory/#memory-service","title":"\u8bb0\u5fc6\u670d\u52a1 (Memory Service)","text":"<p>\u8bb0\u5fc6\u670d\u52a1\u53ef\u5728\u4ee3\u7801\u4e2d\u901a\u8fc7\u9009\u9879\u914d\u7f6e\uff0c\u652f\u6301\u5185\u5b58\u548c Redis \u4e24\u79cd\u540e\u7aef\uff1a</p>"},{"location":"zh/memory/#_13","title":"\u8bb0\u5fc6\u670d\u52a1\u914d\u7f6e\u793a\u4f8b","text":"<pre><code>import (\n    memoryinmemory \"trpc.group/trpc-go/trpc-agent-go/memory/inmemory\"\n    memoryredis \"trpc.group/trpc-go/trpc-agent-go/memory/redis\"\n)\n\n// \u5185\u5b58\u5b9e\u73b0\uff0c\u53ef\u7528\u4e8e\u6d4b\u8bd5\u548c\u5f00\u53d1\nmemService := memoryinmemory.NewMemoryService()\n\n// Redis \u5b9e\u73b0\uff0c\u7528\u4e8e\u751f\u4ea7\u73af\u5883\nredisService, err := memoryredis.NewService(\n    memoryredis.WithRedisClientURL(\"redis://localhost:6379\"),\n    memoryredis.WithToolEnabled(memory.DeleteToolName, true), // \u542f\u7528\u5220\u9664\u5de5\u5177\n)\nif err != nil {\n    // \u5904\u7406\u9519\u8bef\n}\n\n// \u5411 Agent \u6ce8\u518c\u8bb0\u5fc6\u5de5\u5177\nllmAgent := llmagent.New(\n    \"memory-assistant\",\n    llmagent.WithTools(memService.Tools()), // \u6216 redisService.Tools()\n)\n\n// \u5728 Runner \u4e2d\u8bbe\u7f6e\u8bb0\u5fc6\u670d\u52a1\nrunner := runner.NewRunner(\n    \"app\",\n    llmAgent,\n    runner.WithMemoryService(memService), // \u6216 redisService\n)\n</code></pre>"},{"location":"zh/memory/#_14","title":"\u8bb0\u5fc6\u5de5\u5177\u914d\u7f6e","text":"<p>\u8bb0\u5fc6\u670d\u52a1\u9ed8\u8ba4\u542f\u7528\u4ee5\u4e0b\u5de5\u5177\uff0c\u5176\u4ed6\u5de5\u5177\u53ef\u901a\u8fc7\u914d\u7f6e\u542f\u7528\uff1a</p> <pre><code>// \u9ed8\u8ba4\u542f\u7528\u7684\u5de5\u5177\uff1aadd, update, search, load\n// \u9ed8\u8ba4\u7981\u7528\u7684\u5de5\u5177\uff1adelete, clear\nmemoryService := memoryinmemory.NewMemoryService()\n\n// \u542f\u7528\u7981\u7528\u7684\u5de5\u5177\nmemoryService := memoryinmemory.NewMemoryService(\n    memoryinmemory.WithToolEnabled(memory.DeleteToolName, true),\n    memoryinmemory.WithToolEnabled(memory.ClearToolName, true),\n)\n\n// \u7981\u7528\u542f\u7528\u7684\u5de5\u5177\nmemoryService := memoryinmemory.NewMemoryService(\n    memoryinmemory.WithToolEnabled(memory.AddToolName, false),\n)\n</code></pre>"},{"location":"zh/memory/#id","title":"\u8986\u76d6\u8bed\u4e49\uff08ID \u4e0e\u91cd\u590d\uff09","text":"<ul> <li>\u8bb0\u5fc6 ID \u57fa\u4e8e\u300c\u5185\u5bb9 + \u4e3b\u9898\u300d\u751f\u6210\u3002\u5bf9\u540c\u4e00\u7528\u6237\u91cd\u590d\u6dfb\u52a0\u76f8\u540c\u5185\u5bb9\u4e0e\u4e3b\u9898\u662f\u5e42\u7b49\u7684\uff1a\u4f1a\u8986\u76d6\u539f\u6709\u8bb0\u5f55\uff08\u975e\u8ffd\u52a0\uff09\uff0c\u5e76\u5237\u65b0 UpdatedAt\u3002</li> <li>\u5982\u9700\u201c\u5141\u8bb8\u91cd\u590d/\u53ea\u8fd4\u56de\u5df2\u5b58\u5728/\u5ffd\u7565\u91cd\u590d\u201d\u7b49\u7b56\u7565\uff0c\u53ef\u901a\u8fc7\u81ea\u5b9a\u4e49\u5de5\u5177\u6216\u6269\u5c55\u670d\u52a1\u7b56\u7565\u914d\u7f6e\u5b9e\u73b0\u3002</li> </ul>"},{"location":"zh/memory/#_15","title":"\u81ea\u5b9a\u4e49\u5de5\u5177\u5b9e\u73b0","text":"<p>\u4f60\u53ef\u4ee5\u7528\u81ea\u5b9a\u4e49\u5b9e\u73b0\u8986\u76d6\u9ed8\u8ba4\u5de5\u5177\u3002\u53c2\u8003 memory/tool/tool.go \u4e86\u89e3\u5982\u4f55\u5b9e\u73b0\u81ea\u5b9a\u4e49\u5de5\u5177\uff1a</p> <pre><code>import (\n    \"context\"\n    \"fmt\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/memory\"\n    memoryinmemory \"trpc.group/trpc-go/trpc-agent-go/memory/inmemory\"\n    toolmemory \"trpc.group/trpc-go/trpc-agent-go/memory/tool\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\n// \u81ea\u5b9a\u4e49\u6e05\u7a7a\u5de5\u5177\uff0c\u4f7f\u7528\u8c03\u7528\u4e0a\u4e0b\u6587\u4e2d\u7684 MemoryService \u4e0e\u4f1a\u8bdd\u4fe1\u606f\u3002\nfunc customClearMemoryTool() tool.Tool {\n    clearFunc := func(ctx context.Context, _ *toolmemory.ClearMemoryRequest) (*toolmemory.ClearMemoryResponse, error) {\n        // \u4ece\u8c03\u7528\u4e0a\u4e0b\u6587\u83b7\u53d6 MemoryService \u4e0e\u7528\u6237\u4fe1\u606f\u3002\n        memSvc, err := toolmemory.GetMemoryServiceFromContext(ctx)\n        if err != nil {\n            return nil, fmt.Errorf(\"custom clear tool: %w\", err)\n        }\n        appName, userID, err := toolmemory.GetAppAndUserFromContext(ctx)\n        if err != nil {\n            return nil, fmt.Errorf(\"custom clear tool: %w\", err)\n        }\n\n        if err := memSvc.ClearMemories(ctx, memory.UserKey{AppName: appName, UserID: userID}); err != nil {\n            return nil, fmt.Errorf(\"custom clear tool: failed to clear memories: %w\", err)\n        }\n        return &amp;toolmemory.ClearMemoryResponse{Message: \"\ud83c\udf89 \u6240\u6709\u8bb0\u5fc6\u5df2\u6210\u529f\u6e05\u7a7a\uff01\"}, nil\n    }\n\n    return function.NewFunctionTool(\n        clearFunc,\n        function.WithName(memory.ClearToolName),\n        function.WithDescription(\"\u6e05\u7a7a\u7528\u6237\u7684\u6240\u6709\u8bb0\u5fc6\u3002\"),\n    )\n}\n\n// \u5728\u5185\u5b58\u5b9e\u73b0\u4e0a\u6ce8\u518c\u81ea\u5b9a\u4e49\u5de5\u5177\u3002\nmemoryService := memoryinmemory.NewMemoryService(\n    memoryinmemory.WithCustomTool(memory.ClearToolName, customClearMemoryTool),\n)\n</code></pre>"},{"location":"zh/memory/#_16","title":"\u5b8c\u6574\u793a\u4f8b","text":"<p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u793a\u4f8b\uff0c\u5c55\u793a\u4e86\u5982\u4f55\u521b\u5efa\u5177\u6709\u8bb0\u5fc6\u80fd\u529b\u7684 Agent\uff1a</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"flag\"\n    \"log\"\n    \"os\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/memory\"\n    memoryinmemory \"trpc.group/trpc-go/trpc-agent-go/memory/inmemory\"\n    memoryredis \"trpc.group/trpc-go/trpc-agent-go/memory/redis\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n)\n\nfunc main() {\n    var (\n        memServiceName = flag.String(\"memory\", \"inmemory\", \"\u8bb0\u5fc6\u670d\u52a1\u7c7b\u578b (inmemory, redis)\")\n        redisAddr      = flag.String(\"redis-addr\", \"localhost:6379\", \"Redis \u670d\u52a1\u5668\u5730\u5740\")\n        modelName      = flag.String(\"model\", \"deepseek-chat\", \"\u8981\u4f7f\u7528\u7684\u6a21\u578b\u540d\u79f0\")\n    )\n\n    flag.Parse()\n\n    ctx := context.Background()\n\n    // 1. \u521b\u5efa\u8bb0\u5fc6\u670d\u52a1\uff08\u6839\u636e\u53c2\u6570\u9009\u62e9\uff09\n    var memoryService memory.Service\n    var err error\n\n    switch *memServiceName {\n    case \"redis\":\n        redisURL := fmt.Sprintf(\"redis://%s\", *redisAddr)\n        memoryService, err = memoryredis.NewService(\n            memoryredis.WithRedisClientURL(redisURL),\n            memoryredis.WithToolEnabled(memory.DeleteToolName, true),\n            memoryredis.WithCustomTool(memory.ClearToolName, customClearMemoryTool),\n        )\n        if err != nil {\n            log.Fatalf(\"Failed to create redis memory service: %v\", err)\n        }\n    default: // inmemory\n        memoryService = memoryinmemory.NewMemoryService(\n            memoryinmemory.WithToolEnabled(memory.DeleteToolName, true),\n            memoryinmemory.WithCustomTool(memory.ClearToolName, customClearMemoryTool),\n        )\n    }\n\n    // 2. \u521b\u5efa LLM \u6a21\u578b\n    modelInstance := openai.New(*modelName)\n\n    // 3. \u521b\u5efa Agent \u5e76\u6ce8\u518c\u8bb0\u5fc6\u5de5\u5177\n    genConfig := model.GenerationConfig{\n        MaxTokens:   intPtr(2000),\n        Temperature: floatPtr(0.7),\n        Stream:      true,\n    }\n\n    llmAgent := llmagent.New(\n        \"memory-assistant\",\n        llmagent.WithModel(modelInstance),\n        llmagent.WithDescription(\"\u5177\u6709\u8bb0\u5fc6\u80fd\u529b\u7684\u667a\u80fd\u52a9\u624b\u3002\u6211\u53ef\u4ee5\u8bb0\u4f4f\u5173\u4e8e\u4f60\u7684\u91cd\u8981\u4fe1\u606f\uff0c\u5e76\u5728\u9700\u8981\u65f6\u56de\u5fc6\u8d77\u6765\u3002\"),\n        llmagent.WithGenerationConfig(genConfig),\n        llmagent.WithTools(memoryService.Tools()), // \u6ce8\u518c\u8bb0\u5fc6\u5de5\u5177\n    )\n\n    // 4. \u521b\u5efa Runner \u5e76\u8bbe\u7f6e\u8bb0\u5fc6\u670d\u52a1\n    sessionService := inmemory.NewSessionService()\n    appRunner := runner.NewRunner(\n        \"memory-chat\",\n        llmAgent,\n        runner.WithSessionService(sessionService),\n        runner.WithMemoryService(memoryService), // \u8bbe\u7f6e\u8bb0\u5fc6\u670d\u52a1\n    )\n\n    // 5. \u6267\u884c\u5bf9\u8bdd\uff08Agent \u4f1a\u81ea\u52a8\u4f7f\u7528\u8bb0\u5fc6\u5de5\u5177\uff09\n    log.Println(\"\ud83e\udde0 \u5f00\u59cb\u8bb0\u5fc6\u5bf9\u8bdd...\")\n    message := model.NewUserMessage(\"\u4f60\u597d\uff0c\u6211\u7684\u540d\u5b57\u662f\u5f20\u4e09\uff0c\u6211\u559c\u6b22\u7f16\u7a0b\")\n    eventChan, err := appRunner.Run(ctx, \"user123\", \"session456\", message)\n    if err != nil {\n        log.Fatalf(\"Failed to run agent: %v\", err)\n    }\n\n    // 6. \u5904\u7406\u54cd\u5e94 ...\n}\n\n// \u81ea\u5b9a\u4e49\u6e05\u7a7a\u5de5\u5177\nfunc customClearMemoryTool() tool.Tool {\n    // ... \u5b9e\u73b0\u903b\u8f91 ...\n}\n\n// \u8f85\u52a9\u51fd\u6570\nfunc intPtr(i int) *int { return &amp;i }\nfunc floatPtr(f float64) *float64 { return &amp;f }\n</code></pre> <p>\u5176\u4e2d\uff0c\u73af\u5883\u53d8\u91cf\u914d\u7f6e\u5982\u4e0b\uff1a</p> <pre><code># OpenAI API \u914d\u7f6e\nexport OPENAI_API_KEY=\"your-openai-api-key\"\nexport OPENAI_BASE_URL=\"your-openai-base-url\"\n</code></pre>"},{"location":"zh/memory/#_17","title":"\u547d\u4ee4\u884c\u53c2\u6570","text":"<pre><code># \u8fd0\u884c\u793a\u4f8b\u65f6\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570\u9009\u62e9\u7ec4\u4ef6\u7c7b\u578b\ngo run main.go -memory inmemory\ngo run main.go -memory redis -redis-addr localhost:6379\n\n# \u53c2\u6570\u8bf4\u660e\uff1a\n# -memory: \u9009\u62e9\u8bb0\u5fc6\u670d\u52a1\u7c7b\u578b (inmemory, redis)\uff0c\u9ed8\u8ba4\u4e3a inmemory\n# -redis-addr: Redis \u670d\u52a1\u5668\u5730\u5740\uff0c\u9ed8\u8ba4\u4e3a localhost:6379\n# -model: \u9009\u62e9\u6a21\u578b\u540d\u79f0\uff0c\u9ed8\u8ba4\u4e3a deepseek-chat\n</code></pre>"},{"location":"zh/model/","title":"Model \u6a21\u5757","text":""},{"location":"zh/model/#_1","title":"\u6982\u8ff0","text":"<p>Model \u6a21\u5757\u662f tRPC-Agent-Go \u6846\u67b6\u7684\u5927\u8bed\u8a00\u6a21\u578b\u62bd\u8c61\u5c42\uff0c\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684 LLM \u63a5\u53e3\u8bbe\u8ba1\uff0c\u76ee\u524d\u652f\u6301 OpenAI \u517c\u5bb9\u7684 API \u8c03\u7528\u3002\u901a\u8fc7\u6807\u51c6\u5316\u7684\u63a5\u53e3\u8bbe\u8ba1\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u7075\u6d3b\u5207\u6362\u4e0d\u540c\u7684\u6a21\u578b\u63d0\u4f9b\u5546\uff0c\u5b9e\u73b0\u6a21\u578b\u7684\u65e0\u7f1d\u96c6\u6210\u548c\u8c03\u7528\u3002\u8be5\u6a21\u5757\u5df2\u9a8c\u8bc1\u517c\u5bb9\u516c\u53f8\u5185\u5916\u5927\u591a\u6570 OpenAI-like \u63a5\u53e3\u3002</p> <p>Model \u6a21\u5757\u5177\u6709\u4ee5\u4e0b\u6838\u5fc3\u7279\u6027\uff1a</p> <ul> <li>\u7edf\u4e00\u63a5\u53e3\u62bd\u8c61\uff1a\u63d0\u4f9b\u6807\u51c6\u5316\u7684 <code>Model</code> \u63a5\u53e3\uff0c\u5c4f\u853d\u4e0d\u540c\u6a21\u578b\u63d0\u4f9b\u5546\u7684\u5dee\u5f02</li> <li>\u6d41\u5f0f\u54cd\u5e94\u652f\u6301\uff1a\u539f\u751f\u652f\u6301\u6d41\u5f0f\u8f93\u51fa\uff0c\u5b9e\u73b0\u5b9e\u65f6\u4ea4\u4e92\u4f53\u9a8c</li> <li>\u591a\u6a21\u6001\u80fd\u529b\uff1a\u652f\u6301\u6587\u672c\u3001\u56fe\u50cf\u3001\u97f3\u9891\u7b49\u591a\u6a21\u6001\u5185\u5bb9\u5904\u7406</li> <li>\u5b8c\u6574\u9519\u8bef\u5904\u7406\uff1a\u63d0\u4f9b\u53cc\u5c42\u9519\u8bef\u5904\u7406\u673a\u5236\uff0c\u533a\u5206\u7cfb\u7edf\u9519\u8bef\u548c API \u9519\u8bef</li> <li>\u53ef\u6269\u5c55\u914d\u7f6e\uff1a\u652f\u6301\u4e30\u5bcc\u7684\u81ea\u5b9a\u4e49\u914d\u7f6e\u9879\uff0c\u6ee1\u8db3\u4e0d\u540c\u573a\u666f\u9700\u6c42</li> </ul>"},{"location":"zh/model/#_2","title":"\u5feb\u901f\u5f00\u59cb","text":""},{"location":"zh/model/#agent-model","title":"\u5728 Agent \u4e2d\u4f7f\u7528 Model","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n)\n\nfunc main() {\n    // 1. \u521b\u5efa\u6a21\u578b\u5b9e\u4f8b\n    modelInstance := openai.New(\"deepseek-chat\",\n        openai.WithExtraFields(map[string]interface{}{\n            \"tool_choice\": \"auto\", // \u81ea\u52a8\u9009\u62e9\u5de5\u5177\n        }),\n    )\n\n    // 2. \u914d\u7f6e\u751f\u6210\u53c2\u6570\n    genConfig := model.GenerationConfig{\n        MaxTokens:   intPtr(2000),\n        Temperature: floatPtr(0.7),\n        Stream:      true, // \u542f\u7528\u6d41\u5f0f\u8f93\u51fa\n    }\n\n    // 3. \u521b\u5efa Agent \u5e76\u96c6\u6210\u6a21\u578b\n    agent := llmagent.New(\n        \"chat-assistant\",\n        llmagent.WithModel(modelInstance),\n        llmagent.WithDescription(\"\u4e00\u4e2a\u6709\u7528\u7684\u52a9\u624b\"),\n        llmagent.WithInstruction(\"\u4f60\u662f\u4e00\u4e2a\u667a\u80fd\u52a9\u624b\uff0c\u5728\u9700\u8981\u65f6\u4f7f\u7528\u5de5\u5177\u3002\"),\n        llmagent.WithGenerationConfig(genConfig),\n        llmagent.WithTools([]tool.Tool{calculatorTool, timeTool}),\n    )\n\n    // 4. \u521b\u5efa Runner \u5e76\u8fd0\u884c\n    r := runner.NewRunner(\"app-name\", agent)\n    eventChan, err := r.Run(ctx, userID, sessionID, model.NewUserMessage(\"Hello\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // 5. \u5904\u7406\u54cd\u5e94\u4e8b\u4ef6\n    for event := range eventChan {\n        // \u5904\u7406\u6d41\u5f0f\u54cd\u5e94\u3001\u5de5\u5177\u8c03\u7528\u7b49\n    }\n}\n</code></pre> <p>\u793a\u4f8b\u4ee3\u7801\u4f4d\u4e8e examples/runner</p>"},{"location":"zh/model/#_3","title":"\u4f7f\u7528\u65b9\u5f0f\u4e0e\u5e73\u53f0\u63a5\u5165\u6307\u5357","text":"<p>Model \u6a21\u5757\u652f\u6301\u591a\u79cd\u4f7f\u7528\u65b9\u5f0f\u548c\u5e73\u53f0\u63a5\u5165\u3002\u4ee5\u4e0b\u662f\u57fa\u4e8e Runner \u793a\u4f8b\u7684\u5e38\u89c1\u4f7f\u7528\u573a\u666f\uff1a</p>"},{"location":"zh/model/#_4","title":"\u5feb\u901f\u542f\u52a8","text":"<pre><code># \u57fa\u7840\u4f7f\u7528\uff1a\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u914d\u7f6e\uff0c\u76f4\u63a5\u8fd0\u884c\ncd examples/runner\nexport OPENAI_BASE_URL=\"https://api.deepseek.com/v1\"\nexport OPENAI_API_KEY=\"your-api-key\"\ngo run main.go -model deepseek-chat\n</code></pre>"},{"location":"zh/model/#_5","title":"\u5e73\u53f0\u63a5\u5165\u914d\u7f6e","text":"<p>\u6240\u6709\u5e73\u53f0\u7684\u63a5\u5165\u65b9\u5f0f\u90fd\u9075\u5faa\u76f8\u540c\u6a21\u5f0f\uff0c\u53ea\u9700\u914d\u7f6e\u4e0d\u540c\u7684\u73af\u5883\u53d8\u91cf\u6216\u76f4\u63a5\u5728\u4ee3\u7801\u4e2d\u8bbe\u7f6e\uff1a</p> <p>\u73af\u5883\u53d8\u91cf\u65b9\u5f0f\uff08\u63a8\u8350\uff09\uff1a</p> <pre><code>export OPENAI_BASE_URL=\"\u5e73\u53f0API\u5730\u5740\"\nexport OPENAI_API_KEY=\"API\u5bc6\u94a5\"\n</code></pre> <p>\u4ee3\u7801\u65b9\u5f0f\uff1a</p> <pre><code>model := openai.New(\"\u6a21\u578b\u540d\u79f0\",\n    openai.WithBaseURL(\"\u5e73\u53f0API\u5730\u5740\"),\n    openai.WithAPIKey(\"API\u5bc6\u94a5\"),\n)\n</code></pre>"},{"location":"zh/model/#_6","title":"\u652f\u6301\u7684\u5e73\u53f0\u53ca\u5176\u914d\u7f6e","text":"<p>\u4ee5\u4e0b\u662f\u5404\u5e73\u53f0\u7684\u914d\u7f6e\u793a\u4f8b\uff0c\u5206\u4e3a\u73af\u5883\u53d8\u91cf\u914d\u7f6e\u548c\u4ee3\u7801\u914d\u7f6e\u4e24\u79cd\u65b9\u5f0f\uff1a</p> <p>\u73af\u5883\u53d8\u91cf\u914d\u7f6e</p> <p>runner \u793a\u4f8b\u4e2d\u652f\u6301\u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570(-model)\u6307\u5b9a\u6a21\u578b\u540d\u79f0\uff0c\u5b9e\u9645\u4e0a\u662f\u5728 <code>openai.New()</code> \u65f6\u4f20\u5165\u6a21\u578b\u540d\u79f0\u3002</p> <pre><code># OpenAI \u5e73\u53f0\nexport OPENAI_API_KEY=\"sk-...\"\ncd examples/runner\ngo run main.go -model gpt-4o-mini\n\n# OpenAI API \u517c\u5bb9\nexport OPENAI_BASE_URL=\"https://api.deepseek.com/v1\"\nexport OPENAI_API_KEY=\"your-api-key\"\ncd examples/runner\ngo run main.go -model deepseek-chat\n</code></pre> <p>\u4ee3\u7801\u914d\u7f6e\u65b9\u5f0f</p> <p>\u5728\u81ea\u5df1\u7684\u4ee3\u7801\u4e2d\u76f4\u63a5\u4f7f\u7528 Model \u65f6\u7684\u914d\u7f6e\u65b9\u5f0f\uff1a</p> <pre><code>model := openai.New(\"deepseek-chat\",\n    openai.WithBaseURL(\"https://api.deepseek.com/v1\"),\n    openai.WithAPIKey(\"your-api-key\"),\n)\n\n// \u5176\u4ed6\u5e73\u53f0\u914d\u7f6e\u7c7b\u4f3c\uff0c\u53ea\u9700\u4fee\u6539\u6a21\u578b\u540d\u79f0\u3001BaseURL\u548cAPIKey\uff0c\u65e0\u9700\u989d\u5916\u5b57\u6bb5\n</code></pre>"},{"location":"zh/model/#_7","title":"\u6838\u5fc3\u63a5\u53e3\u8bbe\u8ba1","text":""},{"location":"zh/model/#model_1","title":"Model \u63a5\u53e3","text":"<pre><code>// Model \u662f\u6240\u6709\u8bed\u8a00\u6a21\u578b\u5fc5\u987b\u5b9e\u73b0\u7684\u63a5\u53e3\ntype Model interface {\n    // \u751f\u6210\u5185\u5bb9\uff0c\u652f\u6301\u6d41\u5f0f\u54cd\u5e94\n    GenerateContent(ctx context.Context, request *Request) (&lt;-chan *Response, error)\n\n    // \u8fd4\u56de\u6a21\u578b\u57fa\u672c\u4fe1\u606f\n    Info() Info\n}\n\n// \u6a21\u578b\u4fe1\u606f\u7ed3\u6784\ntype Info struct {\n    Name string // \u6a21\u578b\u540d\u79f0\n}\n</code></pre>"},{"location":"zh/model/#request","title":"Request \u7ed3\u6784","text":"<pre><code>// Request \u8868\u793a\u53d1\u9001\u7ed9\u6a21\u578b\u7684\u8bf7\u6c42\ntype Request struct {\n    // \u6d88\u606f\u5217\u8868\uff0c\u5305\u542b\u7cfb\u7edf\u6307\u4ee4\u3001\u7528\u6237\u8f93\u5165\u548c\u52a9\u624b\u56de\u590d\n    Messages []Message `json:\"messages\"`\n\n    // \u751f\u6210\u914d\u7f6e\uff08\u5185\u8054\u5230\u8bf7\u6c42\u4e2d\uff09\n    GenerationConfig `json:\",inline\"`\n\n    // \u5de5\u5177\u5217\u8868\n    Tools map[string]tool.Tool `json:\"-\"`\n}\n\n// GenerationConfig \u5305\u542b\u751f\u6210\u53c2\u6570\u914d\u7f6e\ntype GenerationConfig struct {\n    // \u662f\u5426\u4f7f\u7528\u6d41\u5f0f\u54cd\u5e94\n    Stream bool `json:\"stream\"`\n\n    // \u6e29\u5ea6\u53c2\u6570 (0.0-2.0)\n    Temperature *float64 `json:\"temperature,omitempty\"`\n\n    // \u6700\u5927\u751f\u6210\u4ee4\u724c\u6570\n    MaxTokens *int `json:\"max_tokens,omitempty\"`\n\n    // Top-P \u91c7\u6837\u53c2\u6570\n    TopP *float64 `json:\"top_p,omitempty\"`\n\n    // \u505c\u6b62\u751f\u6210\u7684\u6807\u8bb0\n    Stop []string `json:\"stop,omitempty\"`\n\n    // \u9891\u7387\u60e9\u7f5a\n    FrequencyPenalty *float64 `json:\"frequency_penalty,omitempty\"`\n\n    // \u5b58\u5728\u60e9\u7f5a\n    PresencePenalty *float64 `json:\"presence_penalty,omitempty\"`\n\n    // \u63a8\u7406\u52aa\u529b\u7a0b\u5ea6 (\"low\", \"medium\", \"high\")\n    ReasoningEffort *string `json:\"reasoning_effort,omitempty\"`\n\n    // \u662f\u5426\u542f\u7528\u601d\u8003\u6a21\u5f0f\n    ThinkingEnabled *bool `json:\"-\"`\n\n    // \u601d\u8003\u6a21\u5f0f\u7684\u6700\u5927\u4ee4\u724c\u6570\n    ThinkingTokens *int `json:\"-\"`\n}\n</code></pre>"},{"location":"zh/model/#response","title":"Response \u7ed3\u6784","text":"<pre><code>// Response \u8868\u793a\u6a21\u578b\u8fd4\u56de\u7684\u54cd\u5e94\ntype Response struct {\n    // OpenAI \u517c\u5bb9\u5b57\u6bb5\n    ID                string   `json:\"id,omitempty\"`\n    Object            string   `json:\"object,omitempty\"`\n    Created           int64    `json:\"created,omitempty\"`\n    Model             string   `json:\"model,omitempty\"`\n    SystemFingerprint *string  `json:\"system_fingerprint,omitempty\"`\n    Choices           []Choice `json:\"choices,omitempty\"`\n    Usage             *Usage   `json:\"usage,omitempty\"`\n\n    // \u9519\u8bef\u4fe1\u606f\n    Error *ResponseError `json:\"error,omitempty\"`\n\n    // \u5185\u90e8\u5b57\u6bb5\n    Timestamp time.Time `json:\"-\"`\n    Done      bool      `json:\"-\"`\n    IsPartial bool      `json:\"-\"`\n}\n\n// ResponseError \u8868\u793a API \u7ea7\u522b\u7684\u9519\u8bef\ntype ResponseError struct {\n    Message string    `json:\"message\"`\n    Type    ErrorType `json:\"type\"`\n    Param   string    `json:\"param,omitempty\"`\n    Code    string    `json:\"code,omitempty\"`\n}\n</code></pre>"},{"location":"zh/model/#model_2","title":"\u76f4\u63a5\u4f7f\u7528 Model","text":"<pre><code>import (\n    \"context\"\n    \"fmt\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n)\n\nfunc main() {\n    // \u521b\u5efa\u6a21\u578b\u5b9e\u4f8b\n    llm := openai.New(\"deepseek-chat\")\n\n    // \u6784\u5efa\u8bf7\u6c42\n    temperature := 0.7\n    maxTokens := 1000\n\n    request := &amp;model.Request{\n        Messages: []model.Message{\n            model.NewSystemMessage(\"\u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684AI\u52a9\u624b\u3002\"),\n            model.NewUserMessage(\"\u4ecb\u7ecd\u4e00\u4e0bGo\u8bed\u8a00\u7684\u5e76\u53d1\u7279\u6027\u3002\"),\n        },\n        GenerationConfig: model.GenerationConfig{\n            Temperature: &amp;temperature,\n            MaxTokens:   &amp;maxTokens,\n            Stream:      false,\n        },\n    }\n\n    // \u8c03\u7528\u6a21\u578b\n    ctx := context.Background()\n    responseChan, err := llm.GenerateContent(ctx, request)\n    if err != nil {\n        fmt.Printf(\"\u7cfb\u7edf\u9519\u8bef: %v\\n\", err)\n        return\n    }\n\n    // \u5904\u7406\u54cd\u5e94\n    for response := range responseChan {\n        if response.Error != nil {\n            fmt.Printf(\"API\u9519\u8bef: %s\\n\", response.Error.Message)\n            return\n        }\n\n        if len(response.Choices) &gt; 0 {\n            fmt.Printf(\"\u56de\u590d: %s\\n\", response.Choices[0].Message.Content)\n        }\n\n        if response.Done {\n            break\n        }\n    }\n}\n</code></pre>"},{"location":"zh/model/#_8","title":"\u6d41\u5f0f\u8f93\u51fa","text":"<pre><code>// \u6d41\u5f0f\u8bf7\u6c42\u914d\u7f6e\nrequest := &amp;model.Request{\n    Messages: []model.Message{\n        model.NewSystemMessage(\"\u4f60\u662f\u4e00\u4e2a\u521b\u610f\u6545\u4e8b\u8bb2\u8ff0\u8005\u3002\"),\n        model.NewUserMessage(\"\u5199\u4e00\u4e2a\u5173\u4e8e\u673a\u5668\u4eba\u5b66\u4e60\u7ed8\u753b\u7684\u77ed\u6545\u4e8b\u3002\"),\n    },\n    GenerationConfig: model.GenerationConfig{\n        Stream: true,  // \u542f\u7528\u6d41\u5f0f\u8f93\u51fa\n    },\n}\n\n// \u5904\u7406\u6d41\u5f0f\u54cd\u5e94\nresponseChan, err := llm.GenerateContent(ctx, request)\nif err != nil {\n    return err\n}\n\nfor response := range responseChan {\n    if response.Error != nil {\n        fmt.Printf(\"\u9519\u8bef: %s\", response.Error.Message)\n        return\n    }\n\n    if len(response.Choices) &gt; 0 &amp;&amp; response.Choices[0].Delta.Content != \"\" {\n        fmt.Print(response.Choices[0].Delta.Content)\n    }\n\n    if response.Done {\n        break\n    }\n}\n</code></pre>"},{"location":"zh/model/#_9","title":"\u9ad8\u7ea7\u53c2\u6570\u914d\u7f6e","text":"<pre><code>// \u4f7f\u7528\u9ad8\u7ea7\u751f\u6210\u53c2\u6570\ntemperature := 0.3\nmaxTokens := 2000\ntopP := 0.9\npresencePenalty := 0.2\nfrequencyPenalty := 0.5\nreasoningEffort := \"high\"\n\nrequest := &amp;model.Request{\n    Messages: []model.Message{\n        model.NewSystemMessage(\"\u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u6280\u672f\u6587\u6863\u64b0\u5199\u8005\u3002\"),\n        model.NewUserMessage(\"\u89e3\u91ca\u5fae\u670d\u52a1\u67b6\u6784\u7684\u4f18\u7f3a\u70b9\u3002\"),\n    },\n    GenerationConfig: model.GenerationConfig{\n        Temperature:      &amp;temperature,\n        MaxTokens:        &amp;maxTokens,\n        TopP:             &amp;topP,\n        PresencePenalty:  &amp;presencePenalty,\n        FrequencyPenalty: &amp;frequencyPenalty,\n        ReasoningEffort:  &amp;reasoningEffort,\n        Stream:           true,\n    },\n}\n</code></pre>"},{"location":"zh/model/#_10","title":"\u591a\u6a21\u6001\u5185\u5bb9","text":"<pre><code>// \u8bfb\u53d6\u56fe\u50cf\u6587\u4ef6\nimageData, _ := os.ReadFile(\"image.jpg\")\n\n// \u521b\u5efa\u591a\u6a21\u6001\u6d88\u606f\nrequest := &amp;model.Request{\n    Messages: []model.Message{\n        model.NewSystemMessage(\"\u4f60\u662f\u4e00\u4e2a\u56fe\u50cf\u5206\u6790\u4e13\u5bb6\u3002\"),\n        {\n            Role: model.RoleUser,\n            ContentParts: []model.ContentPart{\n                {\n                    Type: model.ContentTypeText,\n                    Text: stringPtr(\"\u8fd9\u5f20\u56fe\u7247\u4e2d\u6709\u4ec0\u4e48?\"),\n                },\n                {\n                    Type: model.ContentTypeImage,\n                    Image: &amp;model.Image{\n                        Data:   imageData,\n                        Format: \"jpeg\",\n                    },\n                },\n            },\n        },\n    },\n}\n</code></pre>"},{"location":"zh/model/#_11","title":"\u9ad8\u7ea7\u529f\u80fd","text":""},{"location":"zh/model/#1","title":"1. \u56de\u8c03\u51fd\u6570","text":"<pre><code>// \u8bbe\u7f6e\u8bf7\u6c42\u524d\u56de\u8c03\u51fd\u6570\nmodel := openai.New(\"deepseek-chat\",\n    openai.WithChatRequestCallback(func(ctx context.Context, req *openai.ChatCompletionNewParams) {\n        // \u8bf7\u6c42\u53d1\u9001\u524d\u88ab\u8c03\u7528\n        log.Printf(\"\u53d1\u9001\u8bf7\u6c42: \u6a21\u578b=%s, \u6d88\u606f\u6570=%d\", req.Model, len(req.Messages))\n    }),\n\n    // \u8bbe\u7f6e\u54cd\u5e94\u56de\u8c03\u51fd\u6570\uff08\u975e\u6d41\u5f0f\uff09\n    openai.WithChatResponseCallback(func(ctx context.Context,\n        req *openai.ChatCompletionNewParams,\n        resp *openai.ChatCompletion) {\n        // \u6536\u5230\u5b8c\u6574\u54cd\u5e94\u65f6\u8c03\u7528\n        log.Printf(\"\u6536\u5230\u54cd\u5e94: ID=%s, \u4f7f\u7528Token=%d\",\n            resp.ID, resp.Usage.TotalTokens)\n    }),\n\n    // \u8bbe\u7f6e\u6d41\u5f0f\u54cd\u5e94\u56de\u8c03\u51fd\u6570\n    openai.WithChatChunkCallback(func(ctx context.Context,\n        req *openai.ChatCompletionNewParams,\n        chunk *openai.ChatCompletionChunk) {\n        // \u6536\u5230\u6bcf\u4e2a\u6d41\u5f0f\u54cd\u5e94\u5757\u65f6\u8c03\u7528\n        log.Printf(\"\u6536\u5230\u6d41\u5f0f\u5757: ID=%s\", chunk.ID)\n    }),\n\n    // \u8bbe\u7f6e\u6d41\u5f0f\u5b8c\u6210\u56de\u8c03\u51fd\u6570\n    openai.WithChatStreamCompleteCallback(func(ctx context.Context,\n        req *openai.ChatCompletionNewParams,\n        acc *openai.ChatCompletionAccumulator,\n        streamErr error) {\n        // \u6d41\u5f0f\u54cd\u5e94\u5b8c\u5168\u7ed3\u675f\u65f6\u8c03\u7528\uff08\u6210\u529f\u6216\u5931\u8d25\uff09\n        if streamErr != nil {\n            log.Printf(\"\u6d41\u5f0f\u54cd\u5e94\u5931\u8d25: %v\", streamErr)\n        } else {\n            log.Printf(\"\u6d41\u5f0f\u54cd\u5e94\u5b8c\u6210: \u539f\u56e0=%s\", \n                acc.Choices[0].FinishReason)\n        }\n    }),\n)\n</code></pre>"},{"location":"zh/multiagent/","title":"\u591a Agent \u7cfb\u7edf (Multi-Agent System)","text":"<p>\u591a Agent \u7cfb\u7edf\u662f trpc-agent-go \u6846\u67b6\u7684\u6838\u5fc3\u529f\u80fd\u4e4b\u4e00\uff0c\u5141\u8bb8\u60a8\u521b\u5efa\u7531\u591a\u4e2a\u4e13\u95e8\u5316 Agent \u7ec4\u6210\u7684\u590d\u6742\u7cfb\u7edf\u3002\u8fd9\u4e9b Agent \u53ef\u4ee5\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u534f\u4f5c\uff0c\u5b9e\u73b0\u4ece\u7b80\u5355\u5230\u590d\u6742\u7684\u5404\u79cd\u5e94\u7528\u573a\u666f\u3002</p>"},{"location":"zh/multiagent/#_1","title":"\u6982\u8ff0","text":"<p>\u591a Agent \u7cfb\u7edf\u57fa\u4e8e SubAgent \u6982\u5ff5\u6784\u5efa\uff0c\u901a\u8fc7 <code>WithSubAgents</code> option \u5b9e\u73b0\u5404\u79cd\u534f\u4f5c\u6a21\u5f0f\uff1a</p>"},{"location":"zh/multiagent/#_2","title":"\u57fa\u7840\u6982\u5ff5","text":"<ul> <li>SubAgent - \u901a\u8fc7 <code>WithSubAgents</code> option \u914d\u7f6e\u7684\u4e13\u95e8\u5316 Agent\uff0c\u662f\u6784\u5efa\u590d\u6742\u534f\u4f5c\u6a21\u5f0f\u7684\u57fa\u7840</li> </ul>"},{"location":"zh/multiagent/#_3","title":"\u6838\u5fc3\u534f\u4f5c\u6a21\u5f0f","text":"<ol> <li>\u94fe\u5f0f Agent (ChainAgent) - \u4f7f\u7528 SubAgent \u6309\u987a\u5e8f\u6267\u884c\uff0c\u5f62\u6210\u5904\u7406\u6d41\u6c34\u7ebf</li> <li>\u5e76\u884c Agent (ParallelAgent) - \u4f7f\u7528 SubAgent \u540c\u65f6\u5904\u7406\u540c\u4e00\u8f93\u5165\u7684\u4e0d\u540c\u65b9\u9762</li> <li>\u5faa\u73af Agent (CycleAgent) - \u4f7f\u7528 SubAgent \u5728\u5faa\u73af\u4e2d\u8fed\u4ee3\uff0c\u76f4\u5230\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6</li> </ol>"},{"location":"zh/multiagent/#_4","title":"\u8f85\u52a9\u529f\u80fd","text":"<ul> <li>Agent \u5de5\u5177 (AgentTool) - \u5c06 Agent \u5305\u88c5\u6210\u5de5\u5177\uff0c\u4f9b\u5176\u4ed6 Agent \u8c03\u7528</li> <li>Agent \u59d4\u6258 (Agent Transfer) - \u901a\u8fc7 <code>transfer_to_agent</code> \u5de5\u5177\u5b9e\u73b0 Agent \u95f4\u7684\u4efb\u52a1\u59d4\u6258</li> </ul>"},{"location":"zh/multiagent/#subagent","title":"SubAgent \u57fa\u7840","text":"<p>SubAgent \u662f\u591a Agent \u7cfb\u7edf\u7684\u6838\u5fc3\u6982\u5ff5\uff0c\u901a\u8fc7 <code>WithSubAgents</code> option \u5b9e\u73b0\u3002\u5b83\u5141\u8bb8\u60a8\u5c06\u591a\u4e2a\u4e13\u95e8\u5316\u7684 Agent \u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u6784\u5efa\u590d\u6742\u7684\u534f\u4f5c\u6a21\u5f0f\u3002</p>"},{"location":"zh/multiagent/#subagent_1","title":"SubAgent \u7684\u4f5c\u7528","text":"<ul> <li>\u4e13\u4e1a\u5316\u5206\u5de5\uff1a\u6bcf\u4e2a SubAgent \u4e13\u6ce8\u4e8e\u7279\u5b9a\u9886\u57df\u6216\u4efb\u52a1\u7c7b\u578b</li> <li>\u6a21\u5757\u5316\u8bbe\u8ba1\uff1a\u5c06\u590d\u6742\u7cfb\u7edf\u5206\u89e3\u4e3a\u53ef\u7ba1\u7406\u7684\u7ec4\u4ef6</li> <li>\u7075\u6d3b\u7ec4\u5408\uff1a\u53ef\u4ee5\u6839\u636e\u9700\u8981\u7ec4\u5408\u4e0d\u540c\u7684 SubAgent</li> <li>\u7edf\u4e00\u63a5\u53e3\uff1a\u6240\u6709\u534f\u4f5c\u6a21\u5f0f\u90fd\u57fa\u4e8e\u76f8\u540c\u7684 <code>WithSubAgents</code> \u673a\u5236</li> </ul>"},{"location":"zh/multiagent/#_5","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n)\n\n// \u521b\u5efa SubAgent\nmathAgent := llmagent.New(\n    \"math-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"\u5904\u7406\u6570\u5b66\u8ba1\u7b97\u548c\u6570\u503c\u95ee\u9898\"),\n    llmagent.WithInstruction(\"\u4f60\u662f\u6570\u5b66\u4e13\u5bb6\uff0c\u4e13\u6ce8\u4e8e\u6570\u5b66\u8fd0\u7b97\u548c\u6570\u503c\u63a8\u7406...\"),\n)\n\nweatherAgent := llmagent.New(\n    \"weather-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"\u63d0\u4f9b\u5929\u6c14\u4fe1\u606f\u548c\u5efa\u8bae\"),\n    llmagent.WithInstruction(\"\u4f60\u662f\u5929\u6c14\u4e13\u5bb6\uff0c\u63d0\u4f9b\u5929\u6c14\u5206\u6790\u548c\u6d3b\u52a8\u5efa\u8bae...\"),\n)\n\n// \u4f7f\u7528 WithSubAgents option \u914d\u7f6e SubAgent\nmainAgent := llmagent.New(\n    \"coordinator-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"\u534f\u8c03\u8005 Agent\uff0c\u8d1f\u8d23\u4efb\u52a1\u59d4\u6258\"),\n    llmagent.WithInstruction(\"\u4f60\u662f\u534f\u8c03\u8005\uff0c\u5206\u6790\u7528\u6237\u8bf7\u6c42\u5e76\u59d4\u6258\u7ed9\u5408\u9002\u7684\u4e13\u5bb6...\"),\n    llmagent.WithSubAgents([]agent.Agent{mathAgent, weatherAgent}),\n)\n</code></pre>"},{"location":"zh/multiagent/#_6","title":"\u6838\u5fc3\u534f\u4f5c\u6a21\u5f0f","text":"<p>\u6240\u6709\u534f\u4f5c\u6a21\u5f0f\u90fd\u57fa\u4e8e SubAgent \u6982\u5ff5\uff0c\u901a\u8fc7\u4e0d\u540c\u7684\u6267\u884c\u7b56\u7565\u5b9e\u73b0\uff1a</p>"},{"location":"zh/multiagent/#agent-chainagent","title":"\u94fe\u5f0f Agent (ChainAgent)","text":"<p>\u94fe\u5f0f Agent \u4f7f\u7528 SubAgent \u6309\u987a\u5e8f\u8fde\u63a5\uff0c\u5f62\u6210\u5904\u7406\u6d41\u6c34\u7ebf\u3002\u6bcf\u4e2a SubAgent \u4e13\u6ce8\u4e8e\u7279\u5b9a\u4efb\u52a1\uff0c\u5e76\u5c06\u7ed3\u679c\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a SubAgent\u3002</p>"},{"location":"zh/multiagent/#_7","title":"\u4f7f\u7528\u573a\u666f","text":"<ul> <li>\u5185\u5bb9\u521b\u4f5c\u6d41\u7a0b\uff1a\u89c4\u5212 \u2192 \u7814\u7a76 \u2192 \u5199\u4f5c</li> <li>\u95ee\u9898\u89e3\u51b3\u6d41\u7a0b\uff1a\u5206\u6790 \u2192 \u8bbe\u8ba1 \u2192 \u5b9e\u73b0</li> <li>\u6570\u636e\u5904\u7406\u6d41\u7a0b\uff1a\u6536\u96c6 \u2192 \u6e05\u6d17 \u2192 \u5206\u6790</li> </ul>"},{"location":"zh/multiagent/#_8","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/chainagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n)\n\n// \u521b\u5efa SubAgent\nplanningAgent := llmagent.New(\"planning-agent\", ...)\nresearchAgent := llmagent.New(\"research-agent\", ...)\nwritingAgent := llmagent.New(\"writing-agent\", ...)\n\n// \u521b\u5efa\u94fe\u5f0f Agent\uff0c\u4f7f\u7528 WithSubAgents \u914d\u7f6e SubAgent\nchainAgent := chainagent.New(\n    \"multi-agent-chain\",\n    chainagent.WithSubAgents([]agent.Agent{\n        planningAgent, \n        researchAgent, \n        writingAgent,\n    }),\n)\n</code></pre>"},{"location":"zh/multiagent/#_9","title":"\u793a\u4f8b\u4f1a\u8bdd","text":"<pre><code>\ud83d\udd17 \u591a Agent \u94fe\u5f0f\u6f14\u793a\n\u94fe\u5f0f\u6d41\u7a0b\uff1a\u89c4\u5212 \u2192 \u7814\u7a76 \u2192 \u5199\u4f5c\n==================================================\n\n\ud83d\udc64 \u7528\u6237\uff1a\u89e3\u91ca\u53ef\u518d\u751f\u80fd\u6e90\u7684\u597d\u5904\n\n\ud83d\udccb \u89c4\u5212 Agent\uff1a\u6211\u5c06\u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u5316\u7684\u5206\u6790\u8ba1\u5212...\n\n\ud83d\udd0d \u7814\u7a76 Agent\uff1a\n\ud83d\udd27 \u4f7f\u7528\u5de5\u5177\uff1a\n   \u2022 web_search (ID: call_123)\n\ud83d\udd04 \u6267\u884c\u4e2d...\n\u2705 \u5de5\u5177\u7ed3\u679c\uff1a\u6700\u65b0\u7684\u53ef\u518d\u751f\u80fd\u6e90\u6570\u636e...\n\n\u270d\ufe0f \u5199\u4f5c Agent\uff1a\u57fa\u4e8e\u89c4\u5212\u548c\u7814\u7a76\uff1a\n[\u7ed3\u6784\u5316\u7684\u7efc\u5408\u56de\u7b54]\n</code></pre>"},{"location":"zh/multiagent/#agent-parallelagent","title":"\u5e76\u884c Agent (ParallelAgent)","text":"<p>\u5e76\u884c Agent \u4f7f\u7528 SubAgent \u540c\u65f6\u5904\u7406\u540c\u4e00\u8f93\u5165\u7684\u4e0d\u540c\u65b9\u9762\uff0c\u63d0\u4f9b\u591a\u89d2\u5ea6\u7684\u5206\u6790\u3002</p>"},{"location":"zh/multiagent/#_10","title":"\u4f7f\u7528\u573a\u666f","text":"<ul> <li>\u5546\u4e1a\u51b3\u7b56\u5206\u6790\uff1a\u5e02\u573a\u5206\u6790\u3001\u6280\u672f\u8bc4\u4f30\u3001\u98ce\u9669\u8bc4\u4f30\u3001\u673a\u4f1a\u5206\u6790</li> <li>\u591a\u7ef4\u5ea6\u8bc4\u4f30\uff1a\u4e0d\u540c\u4e13\u5bb6\u540c\u65f6\u8bc4\u4f30\u540c\u4e00\u95ee\u9898</li> <li>\u5feb\u901f\u5e76\u884c\u5904\u7406\uff1a\u9700\u8981\u540c\u65f6\u83b7\u5f97\u591a\u4e2a\u89c6\u89d2\u7684\u573a\u666f</li> </ul>"},{"location":"zh/multiagent/#_11","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/parallelagent\"\n)\n\n// \u521b\u5efa SubAgent\nmarketAgent := llmagent.New(\"market-analysis\", ...)\ntechnicalAgent := llmagent.New(\"technical-assessment\", ...)\nriskAgent := llmagent.New(\"risk-evaluation\", ...)\nopportunityAgent := llmagent.New(\"opportunity-analysis\", ...)\n\n// \u521b\u5efa\u5e76\u884c Agent\uff0c\u4f7f\u7528 WithSubAgents \u914d\u7f6e SubAgent\nparallelAgent := parallelagent.New(\n    \"parallel-demo\",\n    parallelagent.WithSubAgents([]agent.Agent{\n        marketAgent,\n        technicalAgent, \n        riskAgent,\n        opportunityAgent,\n    }),\n)\n</code></pre>"},{"location":"zh/multiagent/#_12","title":"\u793a\u4f8b\u4f1a\u8bdd","text":"<pre><code>\u26a1 \u5e76\u884c\u591a Agent \u6f14\u793a\nAgent\uff1a\u5e02\u573a \ud83d\udcca | \u6280\u672f \u2699\ufe0f | \u98ce\u9669 \u26a0\ufe0f | \u673a\u4f1a \ud83d\ude80\n==================================================\n\n\ud83d\udcac \u7528\u6237\uff1a\u6211\u4eec\u5e94\u8be5\u4e3a\u4f9b\u5e94\u94fe\u8ddf\u8e2a\u5b9e\u65bd\u533a\u5757\u94fe\u5417\uff1f\n\n\ud83d\ude80 \u5f00\u59cb\u5e76\u884c\u5206\u6790\uff1a\"\u6211\u4eec\u5e94\u8be5\u4e3a\u4f9b\u5e94\u94fe\u8ddf\u8e2a\u5b9e\u65bd\u533a\u5757\u94fe\u5417\uff1f\"\n\ud83d\udcca Agent \u6b63\u5728\u5206\u6790\u4e0d\u540c\u89d2\u5ea6...\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\ud83d\udcca [market-analysis] \u5f00\u59cb\u5206\u6790...\n\u2699\ufe0f [technical-assessment] \u5f00\u59cb\u5206\u6790...\n\u26a0\ufe0f [risk-evaluation] \u5f00\u59cb\u5206\u6790...\n\ud83d\ude80 [opportunity-analysis] \u5f00\u59cb\u5206\u6790...\n\n\ud83d\udcca [market-analysis]: \u533a\u5757\u94fe\u4f9b\u5e94\u94fe\u5e02\u573a\u6b63\u5728\u7ecf\u5386\u5f3a\u52b2\u589e\u957f\uff0c\u5e74\u590d\u5408\u589e\u957f\u7387\u4e3a67%...\n\n\u2699\ufe0f [technical-assessment]: \u5b9e\u65bd\u9700\u8981\u5206\u5e03\u5f0f\u8d26\u672c\u57fa\u7840\u8bbe\u65bd\u548c\u5171\u8bc6\u673a\u5236...\n\n\u26a0\ufe0f [risk-evaluation]: \u4e3b\u8981\u98ce\u9669\u5305\u62ec40%\u76ee\u6807\u5e02\u573a\u7684\u76d1\u7ba1\u4e0d\u786e\u5b9a\u6027...\n\n\ud83d\ude80 [opportunity-analysis]: \u6218\u7565\u4f18\u52bf\u5305\u62ec\u589e\u5f3a\u900f\u660e\u5ea6\uff0c\u53ef\u5e26\u676515-20%\u7684\u6210\u672c\u964d\u4f4e...\n\n\ud83c\udfaf \u6240\u6709\u5e76\u884c\u5206\u6790\u6210\u529f\u5b8c\u6210\uff01\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u2705 \u591a\u89d2\u5ea6\u5206\u6790\u57284.1\u79d2\u5185\u5b8c\u6210\n</code></pre>"},{"location":"zh/multiagent/#agent-cycleagent","title":"\u5faa\u73af Agent (CycleAgent)","text":"<p>\u5faa\u73af Agent \u4f7f\u7528 SubAgent \u5728\u8fed\u4ee3\u5faa\u73af\u4e2d\u8fd0\u884c\uff0c\u76f4\u5230\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6\uff08\u5982\u8d28\u91cf\u9608\u503c\u6216\u6700\u5927\u8fed\u4ee3\u6b21\u6570\uff09\u3002</p>"},{"location":"zh/multiagent/#_13","title":"\u4f7f\u7528\u573a\u666f","text":"<ul> <li>\u5185\u5bb9\u4f18\u5316\uff1a\u751f\u6210 \u2192 \u8bc4\u4f30 \u2192 \u6539\u8fdb \u2192 \u91cd\u590d</li> <li>\u95ee\u9898\u89e3\u51b3\uff1a\u63d0\u51fa \u2192 \u8bc4\u4f30 \u2192 \u589e\u5f3a \u2192 \u91cd\u590d</li> <li>\u8d28\u91cf\u4fdd\u8bc1\uff1a\u8349\u7a3f \u2192 \u5ba1\u67e5 \u2192 \u4fee\u8ba2 \u2192 \u91cd\u590d</li> </ul>"},{"location":"zh/multiagent/#_14","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/cycleagent\"\n)\n\n// \u521b\u5efa SubAgent\ngenerateAgent := llmagent.New(\"generate-agent\", ...)\ncriticAgent := llmagent.New(\"critic-agent\", ...)\n\n// \u521b\u5efa\u5faa\u73af Agent\uff0c\u4f7f\u7528 WithSubAgents \u914d\u7f6e SubAgent\ncycleAgent := cycleagent.New(\n    \"cycle-demo\",\n    cycleagent.WithSubAgents([]agent.Agent{\n        generateAgent,\n        criticAgent,\n    }),\n    cycleagent.WithMaxIterations(3),\n    cycleagent.WithEscalationFunc(qualityEscalationFunc),\n)\n</code></pre>"},{"location":"zh/multiagent/#_15","title":"\u793a\u4f8b\u4f1a\u8bdd","text":"<pre><code>\ud83d\udd04 \u591a Agent \u5faa\u73af\u6f14\u793a\n\u6700\u5927\u8fed\u4ee3\u6b21\u6570\uff1a3\n\u5faa\u73af\uff1a\u751f\u6210 \u2192 \u8bc4\u4f30 \u2192 \u6539\u8fdb \u2192 \u91cd\u590d\n==================================================\n\n\ud83d\udc64 \u7528\u6237\uff1a\u5199\u4e00\u4e2a\u77ed\u7b11\u8bdd\n\n\ud83e\udd16 \u5faa\u73af\u54cd\u5e94\uff1a\n\n\ud83e\udd16 \u751f\u6210 Agent\uff1a\u4e3a\u4ec0\u4e48\u9ab7\u9ac5\u4e0d\u4e92\u76f8\u6253\u67b6\uff1f\n\u56e0\u4e3a\u5b83\u4eec\u6ca1\u6709\u80c6\u91cf\uff01\n\n\ud83d\udc40 \u8bc4\u4f30 Agent\uff1a\n\ud83d\udd27 \u4f7f\u7528\u5de5\u5177\uff1a\n   \u2022 record_score (ID: call_123)\n\ud83d\udd04 \u6267\u884c\u4e2d...\n\u2705 \u8d28\u91cf\u8bc4\u5206\uff1a75/100\n\u26a0\ufe0f \u9700\u8981\u6539\u8fdb - \u7ee7\u7eed\u8fed\u4ee3\n\n\ud83d\udd04 **\u7b2c2\u6b21\u8fed\u4ee3**\n\n\ud83e\udd16 \u751f\u6210 Agent\uff1a\u8fd9\u662f\u4e00\u4e2a\u6539\u8fdb\u7248\u672c\uff0c\u6709\u65b0\u7684\u8f6c\u6298\uff1a\n**\u4e3a\u4ec0\u4e48\u9ab7\u9ac5\u4ece\u4e0d\u8d62\u5f97\u4e89\u8bba\uff1f**\n\u56e0\u4e3a\u5b83\u4eec\u603b\u662f\u5728\u4e2d\u9014\u5931\u53bb\u810a\u6881\uff01\n\n\ud83d\udc40 \u8bc4\u4f30 Agent\uff1a\n\ud83d\udd27 \u4f7f\u7528\u5de5\u5177\uff1a\n   \u2022 record_score (ID: call_456)\n\ud83d\udd04 \u6267\u884c\u4e2d...\n\u2705 \u8d28\u91cf\u8bc4\u5206\uff1a85/100\n\ud83c\udf89 \u8d28\u91cf\u9608\u503c\u8fbe\u5230 - \u5faa\u73af\u5b8c\u6210\n\n\ud83c\udfc1 \u5faa\u73af\u57282\u6b21\u8fed\u4ee3\u540e\u5b8c\u6210\n</code></pre>"},{"location":"zh/multiagent/#_16","title":"\u8f85\u52a9\u529f\u80fd","text":""},{"location":"zh/multiagent/#agent-agenttool","title":"Agent \u5de5\u5177 (AgentTool)","text":"<p>Agent \u5de5\u5177\u662f\u6784\u5efa\u590d\u6742\u591a Agent \u7cfb\u7edf\u7684\u91cd\u8981\u57fa\u7840\u529f\u80fd\uff0c\u5b83\u5141\u8bb8\u60a8\u5c06\u4efb\u4f55 Agent \u5305\u88c5\u6210\u53ef\u8c03\u7528\u7684\u5de5\u5177\uff0c\u4f9b\u5176\u4ed6 Agent \u6216\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u3002</p>"},{"location":"zh/multiagent/#_17","title":"\u4f7f\u7528\u573a\u666f","text":"<ul> <li>\u4e13\u4e1a\u5316\u59d4\u6258\uff1a\u4e0d\u540c Agent \u5904\u7406\u7279\u5b9a\u7c7b\u578b\u7684\u4efb\u52a1</li> <li>\u5de5\u5177\u96c6\u6210\uff1aAgent \u53ef\u4ee5\u4f5c\u4e3a\u5de5\u5177\u96c6\u6210\u5230\u66f4\u5927\u7684\u7cfb\u7edf\u4e2d</li> <li>\u6a21\u5757\u5316\u8bbe\u8ba1\uff1a\u53ef\u91cd\u7528\u7684 Agent \u7ec4\u4ef6\u53ef\u4ee5\u7ec4\u5408\u5728\u4e00\u8d77</li> <li>\u590d\u6742\u5de5\u4f5c\u6d41\uff1a\u6d89\u53ca\u591a\u4e2a\u4e13\u95e8\u5316 Agent \u7684\u590d\u6742\u5de5\u4f5c\u6d41</li> </ul>"},{"location":"zh/multiagent/#_18","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n    agenttool \"trpc.group/trpc-go/trpc-agent-go/tool/agent\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\n// \u521b\u5efa\u4e13\u95e8\u7684 Agent\nmathAgent := llmagent.New(\n    \"math-specialist\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"\u4e13\u95e8\u5904\u7406\u6570\u5b66\u8fd0\u7b97\u7684 Agent\"),\n    llmagent.WithInstruction(\"\u4f60\u662f\u4e00\u4e2a\u6570\u5b66\u4e13\u5bb6\uff0c\u4e13\u6ce8\u4e8e\u6570\u5b66\u8fd0\u7b97\u3001\u8ba1\u7b97\u548c\u6570\u503c\u63a8\u7406...\"),\n    llmagent.WithTools([]tool.Tool{calculatorTool}),\n)\n\n// \u5c06 Agent \u5305\u88c5\u6210\u5de5\u5177\nagentTool := agenttool.NewTool(\n    mathAgent,\n    // \u9ed8\u8ba4 skip summarization=true\uff0c\u4f1a\u5728 tool.response \u540e\u76f4\u63a5\u7ed3\u675f\u672c\u8f6e\n    agenttool.WithSkipSummarization(true),\n    // \u5f00\u542f\u8f6c\u53d1\uff1a\u628a\u5b50 Agent \u7684\u6d41\u5f0f\u4e8b\u4ef6\u5185\u8054\u5230\u7236\u6d41\u7a0b\n    agenttool.WithStreamInner(true),\n)\n\n// \u5728\u4e3b Agent \u4e2d\u4f7f\u7528 Agent \u5de5\u5177\nmainAgent := llmagent.New(\n    \"chat-assistant\",\n    llmagent.WithTools([]tool.Tool{timeTool, agentTool}),\n)\n</code></pre>"},{"location":"zh/multiagent/#agent","title":"Agent\u5de5\u5177\u67b6\u6784","text":"<pre><code>\u804a\u5929\u52a9\u624b (\u4e3b Agent)\n\u251c\u2500\u2500 \u65f6\u95f4\u5de5\u5177 (\u51fd\u6570)\n\u2514\u2500\u2500 \u6570\u5b66\u4e13\u5bb6 Agent \u5de5\u5177 (Agent)\n    \u2514\u2500\u2500 \u6570\u5b66\u4e13\u5bb6 Agent (\u4e13\u95e8\u5316 Agent)\n        \u2514\u2500\u2500 \u8ba1\u7b97\u5668\u5de5\u5177 (\u51fd\u6570)\n</code></pre>"},{"location":"zh/multiagent/#_19","title":"\u793a\u4f8b\u4f1a\u8bdd","text":"<pre><code>\ud83d\ude80 Agent \u5de5\u5177\u793a\u4f8b\n\u6a21\u578b\uff1adeepseek-chat\n\u53ef\u7528\u5de5\u5177\uff1acurrent_time, math-specialist\n==================================================\n\n\ud83d\udc64 \u7528\u6237\uff1a\u8ba1\u7b97 923476 * 273472354\n\n\ud83e\udd16 \u52a9\u624b\uff1a\u6211\u5c06\u4f7f\u7528\u6570\u5b66\u4e13\u5bb6 Agent \u6765\u8ba1\u7b97\u8fd9\u4e2a\u7ed3\u679c\u3002\n\n\ud83d\udd27 \u5de5\u5177\u8c03\u7528\u5df2\u542f\u52a8\uff1a\n   \u2022 math-specialist (ID: call_0_e53a77e9-c994-4421-bfc3-f63fe85678a1)\n     \u53c2\u6570\uff1a{\"request\":\"\u8ba1\u7b97 923476 \u4e58\u4ee5 273472354\"}\n\n\ud83d\udd04 \u6267\u884c\u5de5\u5177\u4e2d...\n\u2705 \u5de5\u5177\u54cd\u5e94 (ID: call_0_e53a77e9-c994-4421-bfc3-f63fe85678a1)\uff1a\n\"\u8ba1\u7b97 923,476 \u4e58\u4ee5 273,472,354 \u7684\u7ed3\u679c\u662f\uff1a\n\n\\[\n923,\\!476 \\times 273,\\!472,\\!354 = 252,\\!545,\\!155,\\!582,\\!504\n\\]\"\n\n\u2705 \u5de5\u5177\u6267\u884c\u5b8c\u6210\u3002\n</code></pre>"},{"location":"zh/multiagent/#streaminner","title":"\u6d41\u5f0f\u5185\u90e8\u8f6c\u53d1\uff08StreamInner\uff09","text":"<p>\u5f53\u4e3a Agent \u5de5\u5177\u542f\u7528 <code>WithStreamInner(true)</code> \u65f6\uff1a</p> <ul> <li>\u5b50 Agent \u7684\u4e8b\u4ef6\u4f1a\u4ee5\u6d41\u5f0f\u5f62\u5f0f\u8f6c\u53d1\u5230\u7236\u6d41\u7a0b\uff08<code>event.Event</code>\uff09\uff0c\u53ef\u76f4\u63a5\u663e\u793a <code>choice.Delta.Content</code></li> <li>\u4e3a\u907f\u514d\u91cd\u590d\u6253\u5370\uff0c\u5b50 Agent \u6700\u7ec8\u7684\u6574\u6bb5\u6587\u672c\u9ed8\u8ba4\u4e0d\u4f1a\u4f5c\u4e3a\u8f6c\u53d1\u4e8b\u4ef6\u518d\u6b21\u8f93\u51fa\uff1b\u4f46\u4f1a\u88ab\u805a\u5408\u5199\u5165\u6700\u7ec8\u7684 <code>tool.response</code>\uff0c\u7528\u4e8e\u6ee1\u8db3\u6a21\u578b\u201c\u5de5\u5177\u6d88\u606f\u8ddf\u968f\u201d\u7684\u8981\u6c42</li> <li>\u5efa\u8bae\u5728 UI \u5c42\uff1a<ul> <li>\u5c55\u793a\u5b50 Agent \u8f6c\u53d1\u7684\u589e\u91cf\u5185\u5bb9</li> <li>\u5982\u975e\u8c03\u8bd5\uff0c\u4e0d\u518d\u989d\u5916\u6253\u5370\u6700\u7ec8\u805a\u5408\u7684\u5de5\u5177\u54cd\u5e94\u5185\u5bb9</li> </ul> </li> </ul> <p>\u793a\u4f8b\uff1a\u5728\u4e8b\u4ef6\u5faa\u73af\u4e2d\u533a\u5206\u5916\u5c42\u52a9\u624b/\u5b50 Agent/\u5de5\u5177\u54cd\u5e94</p> <pre><code>// \u5b50 Agent \u8f6c\u53d1\u7684\u589e\u91cf\uff08\u4f5c\u8005\u4e0d\u662f\u7236 Agent\uff09\nif ev.Author != parentName &amp;&amp; ev.Response != nil &amp;&amp; len(ev.Response.Choices) &gt; 0 {\n    if delta := ev.Response.Choices[0].Delta.Content; delta != \"\" {\n        fmt.Print(delta)\n    }\n    return\n}\n\n// \u5de5\u5177\u54cd\u5e94\uff08\u5305\u542b\u805a\u5408\u5185\u5bb9\uff09\uff0c\u9ed8\u8ba4\u4e0d\u6253\u5370\uff0c\u907f\u514d\u91cd\u590d\nif ev.Response != nil &amp;&amp; ev.Object == model.ObjectTypeToolResponse {\n    // ...\u6309\u9700\u5c55\u793a\u6216\u5ffd\u7565\n    return\n}\n</code></pre>"},{"location":"zh/multiagent/#_20","title":"\u9009\u9879\u5bf9\u7167","text":"<ul> <li><code>WithSkipSummarization(true)</code>\uff1a\u5de5\u5177\u54cd\u5e94\u540e\u4e0d\u518d\u8ba9\u5916\u5c42\u6a21\u578b\u505a\u989d\u5916\u603b\u7ed3\uff08\u9ed8\u8ba4\u63a8\u8350\uff09</li> <li><code>WithSkipSummarization(false)</code>\uff1a\u5de5\u5177\u540e\u518d\u8fdb\u884c\u4e00\u6b21\u603b\u7ed3\u578b LLM \u8c03\u7528</li> <li><code>WithStreamInner(true)</code>\uff1a\u542f\u7528\u5b50 Agent \u4e8b\u4ef6\u8f6c\u53d1\uff08\u7236/\u5b50 Agent \u5efa\u8bae\u90fd <code>Stream: true</code>\uff09</li> <li><code>WithStreamInner(false)</code>\uff1a\u6309\u666e\u901a\u53ef\u8c03\u7528\u5de5\u5177\u5904\u7406\uff0c\u4e0d\u8f6c\u53d1\u5185\u90e8\u6d41</li> </ul>"},{"location":"zh/multiagent/#agent-agent-transfer","title":"Agent \u59d4\u6258 (Agent Transfer)","text":"<p>Agent \u59d4\u6258\u901a\u8fc7 <code>transfer_to_agent</code> \u5de5\u5177\u5b9e\u73b0 Agent \u95f4\u7684\u4efb\u52a1\u59d4\u6258\uff0c\u5141\u8bb8\u4e3b Agent \u6839\u636e\u4efb\u52a1\u7c7b\u578b\u81ea\u52a8\u9009\u62e9\u5408\u9002\u7684 SubAgent\u3002</p>"},{"location":"zh/multiagent/#_21","title":"\u4f7f\u7528\u573a\u666f","text":"<ul> <li>\u4efb\u52a1\u5206\u7c7b\uff1a\u6839\u636e\u7528\u6237\u8bf7\u6c42\u81ea\u52a8\u9009\u62e9\u5408\u9002\u7684 SubAgent</li> <li>\u667a\u80fd\u8def\u7531\uff1a\u5c06\u590d\u6742\u4efb\u52a1\u8def\u7531\u5230\u6700\u5408\u9002\u7684\u5904\u7406\u8005</li> <li>\u4e13\u4e1a\u5316\u5904\u7406\uff1a\u6bcf\u4e2a SubAgent \u4e13\u6ce8\u4e8e\u7279\u5b9a\u9886\u57df</li> <li>\u65e0\u7f1d\u5207\u6362\uff1a\u5728 SubAgent \u4e4b\u95f4\u65e0\u7f1d\u5207\u6362\uff0c\u4fdd\u6301\u5bf9\u8bdd\u8fde\u7eed\u6027</li> </ul>"},{"location":"zh/multiagent/#_22","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\n// \u521b\u5efa SubAgent\nmathAgent := llmagent.New(\n    \"math-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"\u5904\u7406\u6570\u5b66\u8ba1\u7b97\u548c\u6570\u503c\u95ee\u9898\"),\n    llmagent.WithInstruction(\"\u4f60\u662f\u6570\u5b66\u4e13\u5bb6\uff0c\u4e13\u6ce8\u4e8e\u6570\u5b66\u8fd0\u7b97\u548c\u6570\u503c\u63a8\u7406...\"),\n    llmagent.WithTools([]tool.Tool{calculatorTool}),\n)\n\nweatherAgent := llmagent.New(\n    \"weather-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"\u63d0\u4f9b\u5929\u6c14\u4fe1\u606f\u548c\u5efa\u8bae\"),\n    llmagent.WithInstruction(\"\u4f60\u662f\u5929\u6c14\u4e13\u5bb6\uff0c\u63d0\u4f9b\u5929\u6c14\u5206\u6790\u548c\u6d3b\u52a8\u5efa\u8bae...\"),\n    llmagent.WithTools([]tool.Tool{weatherTool}),\n)\n\n// \u521b\u5efa\u534f\u8c03\u8005 Agent\uff0c\u4f7f\u7528 WithSubAgents \u914d\u7f6e SubAgent\ncoordinatorAgent := llmagent.New(\n    \"coordinator-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"\u534f\u8c03\u8005 Agent\uff0c\u8d1f\u8d23\u4efb\u52a1\u59d4\u6258\"),\n    llmagent.WithInstruction(\"\u4f60\u662f\u534f\u8c03\u8005\uff0c\u5206\u6790\u7528\u6237\u8bf7\u6c42\u5e76\u59d4\u6258\u7ed9\u5408\u9002\u7684\u4e13\u5bb6...\"),\n    llmagent.WithSubAgents([]agent.Agent{mathAgent, weatherAgent}),\n)\n</code></pre>"},{"location":"zh/multiagent/#agent_1","title":"Agent\u59d4\u6258\u67b6\u6784","text":"<pre><code>\u534f\u8c03\u8005 Agent (\u4e3b\u5165\u53e3)\n\u251c\u2500\u2500 \u5206\u6790\u7528\u6237\u8bf7\u6c42\n\u251c\u2500\u2500 \u9009\u62e9\u5408\u9002\u7684 SubAgent\n\u2514\u2500\u2500 \u4f7f\u7528 transfer_to_agent \u5de5\u5177\u59d4\u6258\u4efb\u52a1\n    \u251c\u2500\u2500 \u6570\u5b66 SubAgent (\u6570\u5b66\u8ba1\u7b97)\n    \u251c\u2500\u2500 \u5929\u6c14 SubAgent (\u5929\u6c14\u4fe1\u606f)\n    \u2514\u2500\u2500 \u7814\u7a76 SubAgent (\u4fe1\u606f\u641c\u7d22)\n</code></pre>"},{"location":"zh/multiagent/#_23","title":"\u793a\u4f8b\u4f1a\u8bdd","text":"<pre><code>\ud83d\udd04 Agent \u59d4\u6258\u6f14\u793a\n\u53ef\u7528 SubAgent\uff1amath-agent, weather-agent, research-agent\n==================================================\n\n\ud83d\udc64 \u7528\u6237\uff1a\u8ba1\u7b97\u590d\u5229\uff0c\u672c\u91d15000\u7f8e\u5143\uff0c\u5e74\u5229\u73876%\uff0c\u671f\u96508\u5e74\n\n\ud83c\udfaf \u534f\u8c03\u8005\uff1a\u6211\u5c06\u628a\u8fd9\u4e2a\u4efb\u52a1\u59d4\u6258\u7ed9\u6211\u4eec\u7684\u6570\u5b66\u4e13\u5bb6\u8fdb\u884c\u51c6\u786e\u8ba1\u7b97\u3002\n\ud83d\udd04 \u542f\u52a8\u59d4\u6258...\n\ud83d\udd04 \u59d4\u6258\u4e8b\u4ef6\uff1a\u5c06\u63a7\u5236\u6743\u8f6c\u79fb\u7ed9 Agent\uff1amath-agent\n\n\ud83e\uddee \u6570\u5b66\u4e13\u5bb6\uff1a\u6211\u5c06\u5e2e\u52a9\u60a8\u9010\u6b65\u8ba1\u7b97\u590d\u5229\u3002\n\ud83d\udd27 \ud83e\uddee \u6267\u884c\u5de5\u5177\uff1a\n   \u2022 calculate ({\"operation\":\"power\",\"a\":1.06,\"b\":8})\n   \u2705 \u5de5\u5177\u5b8c\u6210\n\ud83d\udd27 \ud83e\uddee \u6267\u884c\u5de5\u5177\uff1a\n   \u2022 calculate ({\"operation\":\"multiply\",\"a\":5000,\"b\":1.593})\n   \u2705 \u5de5\u5177\u5b8c\u6210\n\n\u590d\u5229\u8ba1\u7b97\u7ed3\u679c\uff1a\n- \u672c\u91d1\uff1a$5,000\n- \u5e74\u5229\u7387\uff1a6%\n- \u671f\u9650\uff1a8\u5e74\n- \u7ed3\u679c\uff1a$7,969.24\uff08\u5229\u606f\u7ea6$2,969.24\uff09\n</code></pre>"},{"location":"zh/multiagent/#_24","title":"\u73af\u5883\u53d8\u91cf\u914d\u7f6e","text":"<p>\u6240\u6709\u591a Agent \u793a\u4f8b\u90fd\u9700\u8981\u4ee5\u4e0b\u73af\u5883\u53d8\u91cf\uff1a</p> \u53d8\u91cf\u540d \u5fc5\u9700 \u9ed8\u8ba4\u503c \u8bf4\u660e <code>OPENAI_API_KEY</code> \u662f - OpenAI API \u5bc6\u94a5 <code>OPENAI_BASE_URL</code> \u5426 <code>https://api.openai.com/v1</code> OpenAI API \u57fa\u7840URL"},{"location":"zh/multiagent/#_25","title":"\u8fd0\u884c\u793a\u4f8b","text":"<p>\u6240\u6709\u793a\u4f8b\u4ee3\u7801\u4f4d\u4e8e examples</p>"},{"location":"zh/multiagent/#_26","title":"\u6838\u5fc3\u534f\u4f5c\u6a21\u5f0f\u793a\u4f8b","text":""},{"location":"zh/multiagent/#agent_2","title":"\u94fe\u5f0f Agent \u793a\u4f8b","text":"<pre><code>cd examples/multiagent/chain\nexport OPENAI_API_KEY=\"your-api-key\"\ngo run main.go -model deepseek-chat\n</code></pre>"},{"location":"zh/multiagent/#agent_3","title":"\u5e76\u884c Agent \u793a\u4f8b","text":"<pre><code>cd examples/multiagent/parallel\nexport OPENAI_API_KEY=\"your-api-key\"\ngo run main.go -model deepseek-chat\n</code></pre>"},{"location":"zh/multiagent/#agent_4","title":"\u5faa\u73af Agent \u793a\u4f8b","text":"<pre><code>cd examples/multiagent/cycle\nexport OPENAI_API_KEY=\"your-api-key\"\ngo run main.go -model deepseek-chat -max-iterations 5\n</code></pre>"},{"location":"zh/multiagent/#_27","title":"\u8f85\u52a9\u529f\u80fd\u793a\u4f8b","text":""},{"location":"zh/multiagent/#agent_5","title":"Agent \u5de5\u5177\u793a\u4f8b","text":"<pre><code>cd examples/agenttool\nexport OPENAI_API_KEY=\"your-api-key\"\ngo run main.go -model deepseek-chat\n</code></pre>"},{"location":"zh/multiagent/#agent_6","title":"Agent \u59d4\u6258\u793a\u4f8b","text":"<pre><code>cd examples/transfer\nexport OPENAI_API_KEY=\"your-api-key\"\ngo run main.go -model deepseek-chat\n</code></pre>"},{"location":"zh/multiagent/#_28","title":"\u81ea\u5b9a\u4e49\u548c\u6269\u5c55","text":""},{"location":"zh/multiagent/#agent_7","title":"\u6dfb\u52a0\u65b0\u7684 Agent","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/chainagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n)\n\n// \u521b\u5efa\u81ea\u5b9a\u4e49 Agent\ncustomAgent := llmagent.New(\n    \"custom-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"\u81ea\u5b9a\u4e49 Agent \u63cf\u8ff0\"),\n    llmagent.WithInstruction(\"\u81ea\u5b9a\u4e49\u6307\u4ee4\"),\n    llmagent.WithTools([]tool.Tool{customTool}),\n)\n\n// \u96c6\u6210\u5230\u591a Agent \u7cfb\u7edf\u4e2d\nchainAgent := chainagent.New(\n    \"custom-chain\",\n    chainagent.WithSubAgents([]agent.Agent{\n        existingAgent,\n        customAgent,  // \u6dfb\u52a0\u81ea\u5b9a\u4e49 Agent\n    }),\n)\n</code></pre>"},{"location":"zh/multiagent/#_29","title":"\u914d\u7f6e\u5de5\u5177","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\n// \u521b\u5efa\u81ea\u5b9a\u4e49\u5de5\u5177\ncustomTool := function.NewFunctionTool(\n    customFunction,\n    function.WithName(\"custom_tool\"),\n    function.WithDescription(\"\u81ea\u5b9a\u4e49\u5de5\u5177\u63cf\u8ff0\"),\n)\n\n// \u4e3a Agent \u5206\u914d\u5de5\u5177\nagent := llmagent.New(\n    \"tool-agent\",\n    llmagent.WithTools([]tool.Tool{customTool}),\n)\n</code></pre>"},{"location":"zh/multiagent/#_30","title":"\u8c03\u6574\u53c2\u6570","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n)\n\n// \u914d\u7f6e\u751f\u6210\u53c2\u6570\ngenConfig := model.GenerationConfig{\n    MaxTokens:   intPtr(500),\n    Temperature: floatPtr(0.7),\n    Stream:      true,\n}\n\n// \u5e94\u7528\u5230 Agent\nagent := llmagent.New(\n    \"configured-agent\",\n    llmagent.WithGenerationConfig(genConfig),\n)\n</code></pre>"},{"location":"zh/observability/","title":"Observability \u529f\u80fd","text":""},{"location":"zh/observability/#_1","title":"\u6982\u8ff0","text":"<p>tRPC-Agent-Go \u6846\u67b6\u5185\u7f6e\u4e86\u5168\u9762\u7684\u53ef\u89c2\u6d4b\uff08Observability\uff09\u529f\u80fd\uff0c\u57fa\u4e8e OpenTelemetry \u6807\u51c6\u534f\u8bae\uff0c\u4e3a Agent \u5e94\u7528\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u53ef\u89c2\u6d4b\u6027\u80fd\u529b\u3002 \u901a\u8fc7\u53ef\u89c2\u6d4b\u529f\u80fd\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5b9e\u73b0\u5bf9 Agent \u8fd0\u884c\u72b6\u6001\u7684\u5168\u65b9\u4f4d\u76d1\u63a7\uff0c\u5305\u62ec\u94fe\u8def\u8ffd\u8e2a\u3001\u6027\u80fd\u6307\u6807\u6536\u96c6\u548c\u65e5\u5fd7\u8bb0\u5f55\u7b49\u3002</p>"},{"location":"zh/observability/#_2","title":"\ud83c\udfaf \u6838\u5fc3\u7279\u6027","text":"<ul> <li>\u94fe\u8def\u8ffd\u8e2a\uff08Tracing\uff09\uff1a\u5b8c\u6574\u8bb0\u5f55 Agent \u6267\u884c\u8fc7\u7a0b\u4e2d\u7684\u8c03\u7528\u94fe\u8def</li> <li>\u6027\u80fd\u6307\u6807\uff08Metrics\uff09\uff1a\u6536\u96c6 Agent \u8fd0\u884c\u65f6\u7684\u5173\u952e\u6027\u80fd\u6570\u636e</li> <li>\u65e5\u5fd7\u805a\u5408\uff08Logging\uff09\uff1a\u7edf\u4e00\u7684\u65e5\u5fd7\u6536\u96c6\u548c\u7ba1\u7406</li> <li>\u591a\u5e73\u53f0\u652f\u6301\uff1a\u652f\u6301 Jaeger\u3001Prometheus\u3001Galileo\u3001\u667a\u7814\u76d1\u63a7\u5b9d \u7b49\u4e3b\u6d41\u76d1\u63a7\u5e73\u53f0</li> <li>\u7075\u6d3b\u914d\u7f6e\uff1a\u652f\u6301\u591a\u79cd\u914d\u7f6e\u65b9\u5f0f\u548c\u81ea\u5b9a\u4e49\u6269\u5c55</li> </ul>"},{"location":"zh/observability/#_3","title":"\u4e0e\u4e0d\u540c\u7684\u76d1\u63a7\u5e73\u53f0\u96c6\u6210","text":""},{"location":"zh/observability/#langfuse","title":"Langfuse \u96c6\u6210","text":"<p>Langfuse \u662f\u4e13\u4e3a LLM \u5e94\u7528\u8bbe\u8ba1\u7684\u53ef\u89c2\u6d4b\u5e73\u53f0\uff0c\u652f\u6301\u901a\u8fc7 OpenTelemetry \u534f\u8bae\u91c7\u96c6\u94fe\u8def\u8ffd\u8e2a\u6570\u636e\u3002tRPC-Agent-Go \u53ef\u901a\u8fc7 OpenTelemetry \u534f\u8bae\u5c06 Trace \u6570\u636e\u5bfc\u51fa\u5230 Langfuse\u3002</p>"},{"location":"zh/observability/#1-langfuse","title":"1. \u90e8\u7f72 Langfuse","text":"<p>\u53ef\u53c2\u8003 Langfuse \u5b98\u65b9\u81ea\u6258\u7ba1\u6307\u5357 \u8fdb\u884c\u672c\u5730\u6216\u4e91\u7aef\u90e8\u7f72\u3002\u5feb\u901f\u4f53\u9a8c\u53ef\u53c2\u8003 Docker Compose \u90e8\u7f72\u6587\u6863\u3002</p>"},{"location":"zh/observability/#2-go","title":"2. Go \u7f16\u5199\u63a5\u5165\u4ee3\u7801","text":"<pre><code>export LANGFUSE_PUBLIC_KEY=\"your-public-key\"\nexport LANGFUSE_SECRET_KEY=\"your-secret-key\"\nexport LANGFUSE_HOST=\"your-langfuse-host\"\nexport LANGFUSE_INSECURE=\"true\" # \u7528\u4e8e\u4e0d\u5b89\u5168\u8fde\u63a5\uff08\u4ec5\u9650\u5f00\u53d1\u73af\u5883\uff09\n</code></pre> <pre><code>import (\n    \"context\"\n    \"log\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/telemetry/langfuse\"\n)\n\nfunc main() {\n    // Start trace with Langfuse integration using environment variables\n    clean, err := langfuse.Start(context.Background())\n    if err != nil {\n        log.Fatalf(\"Failed to start trace telemetry: %v\", err)\n    }\n    defer func() {\n        if err := clean(context.Background()); err != nil {\n            log.Printf(\"Failed to clean up trace telemetry: %v\", err)\n        }\n    }()\n</code></pre> <p>\u5b8c\u6574\u793a\u4f8b\u53ef\u53c2\u8003 examples/telemetry/langfuse\u3002</p> <p>\u8fd0\u884c\u793a\u4f8b\uff1a</p> <pre><code>go run .\n</code></pre> <p>\u4f60\u53ef\u4ee5\u5728 Langfuse \u63a7\u5236\u53f0\u67e5\u770b\u94fe\u8def\u8ffd\u8e2a\u6570\u636e\u3002</p>"},{"location":"zh/observability/#_4","title":"\u63a5\u5165\u4ee3\u7801\u8bf4\u660e","text":"<p>Langfuse \u652f\u6301\u901a\u8fc7 <code>/api/public/otel</code> (OTLP) \u63a5\u53e3\u63a5\u6536 Trace \u6570\u636e\uff0c\u4ec5\u652f\u6301 HTTP/protobuf\uff0c\u4e0d\u652f\u6301 gRPC\u3002 \u4e0a\u8ff0\u4ee3\u7801\u901a\u8fc7\u8bbe\u7f6e <code>OTEL_EXPORTER_OTLP_HEADERS</code> \u548c <code>OTEL_EXPORTER_OTLP_TRACES_ENDPOINT</code> \u6765\u63a5\u5165 langfuse\u3002</p> <pre><code># \u6b27\u76df\u6570\u636e\u533a\nOTEL_EXPORTER_OTLP_ENDPOINT=\"https://cloud.langfuse.com/api/public/otel\"\n# \u7f8e\u56fd\u6570\u636e\u533a\n# OTEL_EXPORTER_OTLP_ENDPOINT=\"https://us.cloud.langfuse.com/api/public/otel\"\n# \u672c\u5730\u90e8\u7f72 (&gt;= v3.22.0)\n# OTEL_EXPORTER_OTLP_ENDPOINT=\"http://localhost:3000/api/public/otel\"\n\n# \u8bbe\u7f6e Basic Auth \u8ba4\u8bc1\nOTEL_EXPORTER_OTLP_HEADERS=\"Authorization=Basic ${AUTH_STRING}\"\n</code></pre> <p>\u5176\u4e2d <code>AUTH_STRING</code> \u4e3a base64 \u7f16\u7801\u7684 <code>public_key:secret_key</code>\uff0c\u53ef\u7528\u5982\u4e0b\u547d\u4ee4\u751f\u6210\uff1a</p> <pre><code>echo -n \"pk-lf-xxxx:sk-lf-xxxx\" | base64\n# GNU \u7cfb\u7edf\u53ef\u52a0 -w 0 \u9632\u6b62\u6362\u884c\n</code></pre> <p>\u5982\u9700\u5355\u72ec\u6307\u5b9a trace \u6570\u636e\u7684 endpoint\uff0c\u53ef\u8bbe\u7f6e\uff1a</p> <pre><code>OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=\"http://localhost:3000/api/public/otel/v1/traces\"\n</code></pre>"},{"location":"zh/observability/#jaegerprometheus","title":"Jaeger\u3001Prometheus \u7b49\u5f00\u6e90\u76d1\u63a7\u5e73\u53f0","text":"<p>\u53ef\u4ee5\u53c2\u8003 examples/telemetry \u7684\u4ee3\u7801\u793a\u4f8b\u3002</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n\n    ametric \"trpc.group/trpc-go/trpc-agent-go/telemetry/metric\"\n    atrace \"trpc.group/trpc-go/trpc-agent-go/telemetry/trace\"\n)\n\nfunc main() {\n    // \u542f\u52a8\u6307\u6807\u6536\u96c6\n    metricClean, err := ametric.Start(\n        context.Background(),\n        ametric.WithEndpoint(\"localhost:4317\"), // metric \u5bfc\u51fa\u5730\u5740\n    )\n    if err != nil {\n        log.Fatalf(\"Failed to start metric telemetry: %v\", err)\n    }\n    defer metricClean()\n\n    // \u542f\u52a8\u94fe\u8def\u8ffd\u8e2a\n    traceClean, err := atrace.Start(\n        context.Background(),\n        atrace.WithEndpoint(\"localhost:4317\"), // trace \u5bfc\u51fa\u5730\u5740\n    )\n    if err != nil {\n        log.Fatalf(\"Failed to start trace telemetry: %v\", err)\n    }\n    defer traceClean()\n\n    // \u4f60\u7684 Agent \u5e94\u7528\u4ee3\u7801\n    // ...\n    // \u53ef\u4ee5\u6dfb\u52a0\u81ea\u5b9a\u4e49 trace \u548c metrics\n}\n</code></pre>"},{"location":"zh/observability/#jaeger-trace","title":"Jaeger trace \u793a\u4f8b","text":""},{"location":"zh/observability/#prometheus","title":"Prometheus \u76d1\u63a7\u6307\u6807\u793a\u4f8b","text":""},{"location":"zh/observability/#_5","title":"\u5b9e\u9645\u5e94\u7528\u793a\u4f8b","text":""},{"location":"zh/observability/#_6","title":"\u57fa\u672c\u7684\u6307\u6807\u548c\u8ffd\u8e2a","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n\n    ametric \"trpc.group/trpc-go/trpc-agent-go/telemetry/metric\"\n    atrace \"trpc.group/trpc-go/trpc-agent-go/telemetry/trace\"\n    \"go.opentelemetry.io/otel/attribute\"\n    \"go.opentelemetry.io/otel/metric\"\n    \"go.opentelemetry.io/otel/trace\"\n)\n\nfunc processAgentRequest(ctx context.Context) error {\n    // \u521b\u5efa\u8ffd\u8e2a span\n    ctx, span := atrace.Tracer.Start(\n        ctx,\n        \"process-agent-request\",\n        trace.WithAttributes(\n            attribute.String(\"agent.type\", \"chat\"),\n            attribute.String(\"user.id\", \"user123\"),\n        ),\n    )\n    defer span.End()\n\n    // \u521b\u5efa\u6307\u6807\u8ba1\u6570\u5668\n    requestCounter, err := ametric.Meter.Int64Counter(\n        \"agent.requests.total\",\n        metric.WithDescription(\"Total number of agent requests\"),\n    )\n    if err != nil {\n        return err\n    }\n\n    // \u8bb0\u5f55\u8bf7\u6c42\n    requestCounter.Add(ctx, 1, metric.WithAttributes(\n        attribute.String(\"agent.type\", \"chat\"),\n        attribute.String(\"status\", \"success\"),\n    ))\n\n    // \u6a21\u62df\u5904\u7406\u8fc7\u7a0b\n    time.Sleep(100 * time.Millisecond)\n\n    return nil\n}\n</code></pre>"},{"location":"zh/observability/#agent","title":"Agent \u6267\u884c\u8ffd\u8e2a","text":"<p>\u6846\u67b6\u4f1a\u81ea\u52a8\u4e3a Agent \u7684\u5173\u952e\u7ec4\u4ef6\u6dfb\u52a0\u76d1\u63a7\u57cb\u70b9\uff1a</p> <pre><code>// Agent \u6267\u884c\u4f1a\u81ea\u52a8\u751f\u6210\u4ee5\u4e0b\u76d1\u63a7\u6570\u636e\uff1a\n// \n// Traces:\n// - agent.execution: Agent \u6574\u4f53\u6267\u884c\u8fc7\u7a0b\n// - tool.invocation: Tool \u8c03\u7528\u8fc7\u7a0b  \n// - model.api_call: \u6a21\u578b API \u8c03\u7528\u8fc7\u7a0b\n</code></pre>"},{"location":"zh/observability/#_7","title":"\u76d1\u63a7\u6570\u636e\u5206\u6790","text":""},{"location":"zh/observability/#_8","title":"\u94fe\u8def\u8ffd\u8e2a\u5206\u6790","text":"<p>\u5178\u578b\u7684 Agent \u6267\u884c\u94fe\u8def\u7ed3\u6784\uff1a</p> <pre><code>Agent Request\n\u251c\u2500\u2500 Planning Phase\n\u2502   \u251c\u2500\u2500 Model API Call (DeepSeek)\n\u2502   \u2514\u2500\u2500 Response Processing\n\u251c\u2500\u2500 Tool Execution Phase  \n\u2502   \u251c\u2500\u2500 Tool: web_search\n\u2502   \u251c\u2500\u2500 Tool: knowledge_base\n\u2502   \u2514\u2500\u2500 Result Processing\n\u2514\u2500\u2500 Response Generation Phase\n    \u251c\u2500\u2500 Model API Call (DeepSeek)\n    \u2514\u2500\u2500 Final Response Formatting\n</code></pre> <p>\u901a\u8fc7\u94fe\u8def\u8ffd\u8e2a\u53ef\u4ee5\u5206\u6790\uff1a</p> <ul> <li>\u6027\u80fd\u74f6\u9888\uff1a\u8bc6\u522b\u8017\u65f6\u6700\u957f\u7684\u64cd\u4f5c</li> <li>\u9519\u8bef\u5b9a\u4f4d\uff1a\u5feb\u901f\u627e\u5230\u5931\u8d25\u7684\u5177\u4f53\u73af\u8282</li> <li>\u4f9d\u8d56\u5173\u7cfb\uff1a\u4e86\u89e3\u7ec4\u4ef6\u95f4\u7684\u8c03\u7528\u5173\u7cfb</li> <li>\u5e76\u53d1\u5206\u6790\uff1a\u89c2\u5bdf\u5e76\u53d1\u6267\u884c\u7684\u6548\u679c</li> </ul>"},{"location":"zh/observability/#_9","title":"\u8fdb\u9636\u529f\u80fd","text":""},{"location":"zh/observability/#exporter","title":"\u81ea\u5b9a\u4e49 Exporter","text":"<p>\u5982\u679c\u9700\u8981\u5c06\u53ef\u89c2\u6d4b\u6570\u636e\u53d1\u9001\u5230\u81ea\u5b9a\u4e49\u7684\u76d1\u63a7\u7cfb\u7edf\uff1a</p> <pre><code>import (\n    \"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp\"\n    \"go.opentelemetry.io/otel/sdk/trace\"\n)\n\nfunc setupCustomExporter() error {\n    exporter, err := otlptracehttp.New(\n        context.Background(),\n        otlptracehttp.WithEndpoint(\"https://your-custom-endpoint.com\"),\n        otlptracehttp.WithHeaders(map[string]string{\n            \"Authorization\": \"Bearer your-token\",\n        }),\n    )\n    if err != nil {\n        return err\n    }\n\n    tp := trace.NewTracerProvider(\n        trace.WithBatcher(exporter),\n    )\n\n    // \u8bbe\u7f6e\u4e3a\u5168\u5c40 TracerProvider\n    otel.SetTracerProvider(tp)\n\n    return nil\n}\n</code></pre>"},{"location":"zh/observability/#_10","title":"\u53c2\u8003\u8d44\u6e90","text":"<ul> <li>OpenTelemetry \u5b98\u65b9\u6587\u6863</li> <li>tRPC-Agent-Go Telemetry \u793a\u4f8b</li> </ul> <p>\u901a\u8fc7\u5408\u7406\u4f7f\u7528\u53ef\u89c2\u6d4b\u529f\u80fd\uff0c\u4f60\u53ef\u4ee5\u5efa\u7acb\u5b8c\u5584\u7684 Agent \u5e94\u7528\u76d1\u63a7\u4f53\u7cfb\uff0c\u53ca\u65f6\u53d1\u73b0\u548c\u89e3\u51b3\u95ee\u9898\uff0c\u6301\u7eed\u4f18\u5316\u7cfb\u7edf\u6027\u80fd\u3002</p>"},{"location":"zh/planner/","title":"Planner \u4f7f\u7528\u6587\u6863","text":"<p>Planner \u662f\u7528\u4e8e\u5b9e\u73b0 Agent \u89c4\u5212\u80fd\u529b\u7684\u7ec4\u4ef6\u3002\u5b83\u5141\u8bb8 Agent \u5728\u6267\u884c\u4efb\u52a1\u524d\u5236\u5b9a\u8ba1\u5212\uff0c\u4ece\u800c\u63d0\u9ad8\u6267\u884c\u6548\u7387\u548c\u51c6\u786e\u6027\u3002</p> <p>\u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u79cd Planner \u5b9e\u73b0\uff0c\u5206\u522b\u9002\u7528\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u6a21\u578b\uff1a</p> <ul> <li>BuiltinPlanner\uff1a\u9002\u7528\u4e8e\u652f\u6301\u539f\u751f\u601d\u8003\u529f\u80fd\u7684\u6a21\u578b</li> <li>ReActPlanner\uff1a\u9002\u7528\u4e8e\u4e0d\u652f\u6301\u539f\u751f\u601d\u8003\u7684\u6a21\u578b\uff0c\u901a\u8fc7\u6807\u7b7e\u5316\u6307\u4ee4\u5f15\u5bfc\u6a21\u578b\u6309\u56fa\u5b9a\u683c\u5f0f\u8f93\u51fa\uff0c\u63d0\u4f9b\u7ed3\u6784\u5316\u7684\u601d\u8003\u8fc7\u7a0b</li> </ul>"},{"location":"zh/planner/#planner_1","title":"Planner \u63a5\u53e3","text":"<p>Planner \u63a5\u53e3\u5b9a\u4e49\u4e86\u6240\u6709\u89c4\u5212\u5668\u5fc5\u987b\u5b9e\u73b0\u7684\u65b9\u6cd5\uff1a</p> <pre><code>type Planner interface {\n    // BuildPlanningInstruction \u5e94\u7528\u5fc5\u8981\u7684\u914d\u7f6e\u5230 LLM \u8bf7\u6c42\uff0c\u5e76\u6784\u5efa\u8981\u9644\u52a0\u7684\u7cfb\u7edf\u6307\u4ee4\u7528\u4e8e\u89c4\u5212\n    // \u5982\u679c\u4e0d\u9700\u8981\u6307\u4ee4\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n    BuildPlanningInstruction(\n        ctx context.Context,\n        invocation *agent.Invocation,\n        llmRequest *model.Request,\n    ) string\n\n    // ProcessPlanningResponse \u5904\u7406 LLM \u7684\u89c4\u5212\u54cd\u5e94\uff0c\u8fd4\u56de\u5904\u7406\u540e\u7684\u54cd\u5e94\n    // \u5982\u679c\u4e0d\u9700\u8981\u5904\u7406\u5219\u8fd4\u56de nil\n    ProcessPlanningResponse(\n        ctx context.Context,\n        invocation *agent.Invocation,\n        response *model.Response,\n    ) *model.Response\n}\n</code></pre> <p>Planner \u7684\u5de5\u4f5c\u6d41\u7a0b\uff1a</p> <ol> <li>\u8bf7\u6c42\u5904\u7406\u9636\u6bb5\uff1aPlanner \u5728 LLM \u8bf7\u6c42\u53d1\u9001\u524d\u901a\u8fc7 <code>BuildPlanningInstruction</code> \u6dfb\u52a0\u89c4\u5212\u6307\u4ee4\u6216\u914d\u7f6e</li> <li>\u54cd\u5e94\u5904\u7406\u9636\u6bb5\uff1aPlanner \u5904\u7406 LLM \u54cd\u5e94\uff0c\u901a\u8fc7 <code>ProcessPlanningResponse</code> \u7ec4\u7ec7\u5185\u5bb9\u7ed3\u6784</li> </ol>"},{"location":"zh/planner/#builtinplanner","title":"BuiltinPlanner","text":"<p>BuiltinPlanner \u9002\u7528\u4e8e\u652f\u6301\u539f\u751f\u601d\u8003\u529f\u80fd\u7684\u6a21\u578b\u3002\u5b83\u4e0d\u751f\u6210\u663e\u5f0f\u7684\u89c4\u5212\u6307\u4ee4\uff0c\u800c\u662f\u901a\u8fc7\u914d\u7f6e\u6a21\u578b\u4f7f\u7528\u5176\u5185\u90e8\u7684\u601d\u8003\u673a\u5236\u6765\u5b9e\u73b0\u89c4\u5212\u529f\u80fd\u3002</p> <p>\u6a21\u578b\u914d\u7f6e\u5982\u4e0b\uff1a</p> <pre><code>type Options struct {\n    // ReasoningEffort \u9650\u5236\u63a8\u7406\u6a21\u578b\u7684\u63a8\u7406\u7a0b\u5ea6\n    // \u652f\u6301\u7684\u503c\uff1a\"low\", \"medium\", \"high\"\n    // \u4ec5\u5bf9 OpenAI o-series \u6a21\u578b\u6709\u6548\n    ReasoningEffort *string\n    // ThinkingEnabled \u4e3a\u652f\u6301\u601d\u8003\u7684\u6a21\u578b\u542f\u7528\u601d\u8003\u6a21\u5f0f\n    // \u4ec5\u5bf9\u901a\u8fc7 OpenAI API \u7684 Claude \u548c Gemini \u6a21\u578b\u6709\u6548\n    ThinkingEnabled *bool\n    // ThinkingTokens \u63a7\u5236\u601d\u8003\u7684\u957f\u5ea6\n    // \u4ec5\u5bf9\u901a\u8fc7 OpenAI API \u7684 Claude \u548c Gemini \u6a21\u578b\u6709\u6548\n    ThinkingTokens *int\n}\n</code></pre> <p>\u5728\u5b9e\u73b0\u4e0a\uff0cBuiltinPlanner \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5de5\u4f5c\uff1a</p> <ul> <li><code>BuildPlanningInstruction</code>\uff1a\u5c06\u601d\u8003\u53c2\u6570\u914d\u7f6e\u5230 LLM \u8bf7\u6c42\u4e2d\uff1b\u7531\u4e8e\u6a21\u578b\u652f\u6301\u539f\u751f\u601d\u8003\uff0c\u4e0d\u9700\u8981\u89c4\u5212\u6807\u7b7e\uff0c\u56e0\u6b64\u76f4\u63a5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32</li> <li><code>ProcessPlanningResponse</code>\uff1a\u7531\u4e8e\u6a21\u578b\u5728\u54cd\u5e94\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u89c4\u5212\u8fc7\u7a0b\uff0c\u56e0\u6b64\u76f4\u63a5\u8fd4\u56de nil</li> </ul> <p>\u793a\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/planner/builtin\"\n)\n\n// \u521b\u5efa\u6a21\u578b\u5b9e\u4f8b\nmodelInstance := openai.New(\"gpt-4o-mini\")\n\n// \u521b\u5efa BuiltinPlanner\nreasoningEffort := \"high\"\nplanner := builtin.New(builtin.Options{\n    ReasoningEffort: &amp;reasoningEffort,\n})\n\n// \u521b\u5efa LLMAgent \u5e76\u914d\u7f6e Planner\nllmAgent := llmagent.New(\n    \"demo-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"A helpful AI assistant with built-in planning\"),\n    llmagent.WithInstruction(\"Be helpful and think through problems carefully\"),\n    llmagent.WithPlanner(planner), // \u914d\u7f6e Planner\n)\n</code></pre>"},{"location":"zh/planner/#reactplanner","title":"ReActPlanner","text":"<p>ReActPlanner \u9002\u7528\u4e8e\u4e0d\u652f\u6301\u539f\u751f\u601d\u8003\u7684\u6a21\u578b\u3002\u5b83\u901a\u8fc7\u5f15\u5bfc LLM \u9075\u5faa\u7279\u5b9a\u7684\u683c\u5f0f\uff0c\u4f7f\u7528\u7279\u5b9a\u6807\u7b7e\u6765\u7ec4\u7ec7\u89c4\u5212\u3001\u63a8\u7406\u3001\u884c\u52a8\u548c\u6700\u7ec8\u7b54\u6848\uff0c\u4ece\u800c\u5b9e\u73b0\u7ed3\u6784\u5316\u7684\u601d\u8003\u8fc7\u7a0b\u3002</p> <p>ReActPlanner \u4f7f\u7528\u4ee5\u4e0b\u7279\u5b9a\u6807\u7b7e\u6765\u7ec4\u7ec7\u54cd\u5e94\u5185\u5bb9\uff1a</p> <ol> <li>\u89c4\u5212\u9636\u6bb5\uff08<code>/*PLANNING*/</code>\uff09\uff1a\u521b\u5efa\u660e\u786e\u7684\u8ba1\u5212\u6765\u56de\u7b54\u7528\u6237\u95ee\u9898</li> <li>\u63a8\u7406\u9636\u6bb5\uff08<code>/*REASONING*/</code>\uff09\uff1a\u5728\u5de5\u5177\u6267\u884c\u4e4b\u95f4\u63d0\u4f9b\u63a8\u7406</li> <li>\u884c\u52a8\u9636\u6bb5\uff08<code>/*ACTION*/</code>\uff09\uff1a\u6839\u636e\u8ba1\u5212\u6267\u884c\u5de5\u5177</li> <li>\u91cd\u65b0\u89c4\u5212\uff08<code>/*REPLANNING*/</code>\uff09\uff1a\u6839\u636e\u7ed3\u679c\u9700\u8981\u65f6\u4fee\u8ba2\u8ba1\u5212</li> <li>\u6700\u7ec8\u7b54\u6848\uff08<code>/*FINAL_ANSWER*/</code>\uff09\uff1a\u63d0\u4f9b\u7efc\u5408\u7b54\u6848</li> </ol> <p>\u5728\u5b9e\u73b0\u4e0a\uff0cReActPlanner \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5de5\u4f5c\uff1a</p> <ul> <li><code>BuildPlanningInstruction</code>\uff1a\u8fd4\u56de\u5305\u542b\u9ad8\u5c42\u6b21\u6307\u5bfc\u3001\u89c4\u5212\u8981\u6c42\u3001\u63a8\u7406\u8981\u6c42\u7b49\u7684\u7efc\u5408\u6307\u4ee4\uff0c\u5f15\u5bfc\u6a21\u578b\u6309\u6807\u7b7e\u683c\u5f0f\u8f93\u51fa</li> <li><code>ProcessPlanningResponse</code>\uff1a\u8fc7\u6ee4\u7a7a\u540d\u79f0\u7684\u5de5\u5177\u8c03\u7528\uff0c\u5982\u679c\u5185\u5bb9\u5305\u542b <code>/*FINAL_ANSWER*/</code> \u6807\u7b7e\u5219\u53ea\u4fdd\u7559\u6700\u7ec8\u7b54\u6848\u90e8\u5206\uff0c\u5426\u5219\u8fd4\u56de\u539f\u5185\u5bb9\uff0c\u5c06\u89c4\u5212\u5185\u5bb9\u4e0e\u6700\u7ec8\u7b54\u6848\u5206\u79bb</li> </ul> <p>\u4f7f\u7528\u793a\u4f8b\uff1a</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/planner/react\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\n// \u521b\u5efa\u6a21\u578b\u5b9e\u4f8b\nmodelInstance := openai.New(\"gpt-4o-mini\")\n\n// \u521b\u5efa\u5de5\u5177\nsearchTool := function.NewFunctionTool(\n    searchFunction,\n    function.WithName(\"search\"),\n    function.WithDescription(\"Search for information on a given topic\"),\n)\n\n// \u521b\u5efa ReActPlanner\nplanner := react.New()\n\n// \u521b\u5efa LLMAgent \u5e76\u914d\u7f6e Planner\nllmAgent := llmagent.New(\n    \"react-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"An AI assistant that uses structured planning\"),\n    llmagent.WithInstruction(\"Follow a structured approach to solve problems\"),\n    llmagent.WithPlanner(planner), // \u914d\u7f6e Planner\n    llmagent.WithTools([]tool.Tool{searchTool}), // \u914d\u7f6e\u5de5\u5177\n)\n</code></pre> <p>\u5b8c\u6574\u4ee3\u7801\u793a\u4f8b\u53ef\u53c2\u8003 examples/react</p>"},{"location":"zh/planner/#planner_2","title":"\u81ea\u5b9a\u4e49 Planner","text":"<p>\u9664\u4e86\u6846\u67b6\u63d0\u4f9b\u7684\u4e24\u79cd Planner \u5b9e\u73b0\uff0c\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0 <code>Planner</code> \u63a5\u53e3\u6765\u521b\u5efa\u81ea\u5b9a\u4e49\u7684 Planner\uff0c\u4ee5\u6ee1\u8db3\u7279\u5b9a\u9700\u6c42\uff1a</p> <pre><code>type customPlanner struct {\n    // \u81ea\u5b9a\u4e49\u914d\u7f6e\n}\n\nfunc (p *customPlanner) BuildPlanningInstruction(\n    ctx context.Context,\n    invocation *agent.Invocation,\n    llmRequest *model.Request,\n) string {\n    // \u8fd4\u56de\u81ea\u5b9a\u4e49\u7684\u89c4\u5212\u6307\u4ee4\n    return \"\u4f60\u7684\u81ea\u5b9a\u4e49\u89c4\u5212\u6307\u4ee4\"\n}\n\nfunc (p *customPlanner) ProcessPlanningResponse(\n    ctx context.Context,\n    invocation *agent.Invocation,\n    response *model.Response,\n) *model.Response {\n    // \u5904\u7406\u54cd\u5e94\n    return response\n}\n\n// \u521b\u5efa LLMAgent \u5e76\u914d\u7f6e\u81ea\u5b9a\u4e49 Planner\nllmAgent := llmagent.New(\n    \"react-agent\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithDescription(\"An AI assistant that uses structured planning\"),\n    llmagent.WithInstruction(\"Follow a structured approach to solve problems\"),\n    llmagent.WithPlanner(&amp;customPlanner{}),      // \u914d\u7f6e Planner\n    llmagent.WithTools([]tool.Tool{searchTool}), // \u914d\u7f6e\u5de5\u5177\n)\n</code></pre>"},{"location":"zh/runner/","title":"Runner \u7ec4\u4ef6\u4f7f\u7528\u624b\u518c","text":""},{"location":"zh/runner/#_1","title":"\u6982\u8ff0","text":"<p>Runner \u63d0\u4f9b\u4e86\u8fd0\u884c Agent \u7684\u63a5\u53e3\uff0c\u8d1f\u8d23\u4f1a\u8bdd\u7ba1\u7406\u548c\u4e8b\u4ef6\u6d41\u5904\u7406\u3002Runner \u7684\u6838\u5fc3\u804c\u8d23\u662f\uff1a\u83b7\u53d6\u6216\u521b\u5efa\u4f1a\u8bdd\u3001\u751f\u6210 Invocation ID\u3001\u8c03\u7528 Agent.Run \u65b9\u6cd5\u3001\u5904\u7406\u8fd4\u56de\u7684\u4e8b\u4ef6\u6d41\u5e76\u5c06\u975e partial \u54cd\u5e94\u4e8b\u4ef6\u8ffd\u52a0\u5230\u4f1a\u8bdd\u4e2d\u3002</p>"},{"location":"zh/runner/#_2","title":"\ud83c\udfaf \u6838\u5fc3\u7279\u6027","text":"<ul> <li>\ud83d\udcbe \u4f1a\u8bdd\u7ba1\u7406\uff1a\u901a\u8fc7 sessionService \u83b7\u53d6/\u521b\u5efa\u4f1a\u8bdd\uff0c\u9ed8\u8ba4\u4f7f\u7528 inmemory.NewSessionService()</li> <li>\ud83d\udd04 \u4e8b\u4ef6\u5904\u7406\uff1a\u63a5\u6536 Agent \u4e8b\u4ef6\u6d41\uff0c\u5c06\u975e partial \u54cd\u5e94\u4e8b\u4ef6\u8ffd\u52a0\u5230\u4f1a\u8bdd\u4e2d</li> <li>\ud83c\udd94 ID \u751f\u6210\uff1a\u81ea\u52a8\u751f\u6210 Invocation ID \u548c\u4e8b\u4ef6 ID</li> <li>\ud83d\udcca \u53ef\u89c2\u6d4b\u96c6\u6210\uff1a\u96c6\u6210 telemetry/trace\uff0c\u81ea\u52a8\u8bb0\u5f55 span</li> <li>\u2705 \u5b8c\u6210\u4e8b\u4ef6\uff1a\u5728 Agent \u4e8b\u4ef6\u6d41\u7ed3\u675f\u540e\u751f\u6210 runner-completion \u4e8b\u4ef6</li> </ul>"},{"location":"zh/runner/#_3","title":"\u67b6\u6784\u8bbe\u8ba1","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       Runner        \u2502  - \u4f1a\u8bdd\u7ba1\u7406\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  - \u4e8b\u4ef6\u6d41\u5904\u7406\n          \u2502\n          \u2502 r.agent.Run(ctx, invocation)\n          \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       Agent         \u2502  - \u63a5\u6536 Invocation\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  - \u8fd4\u56de &lt;-chan *event.Event\n          \u2502\n          \u2502 \u5177\u4f53\u5b9e\u73b0\u7531 Agent \u51b3\u5b9a\n          \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     Agent \u5b9e\u73b0      \u2502  \u5982 LLMAgent, ChainAgent \u7b49\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"zh/runner/#_4","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"zh/runner/#_5","title":"\ud83d\udccb \u73af\u5883\u8981\u6c42","text":"<ul> <li>Go 1.21 \u6216\u66f4\u9ad8\u7248\u672c</li> <li>\u6709\u6548\u7684 LLM API \u5bc6\u94a5\uff08OpenAI \u517c\u5bb9\u63a5\u53e3\uff09</li> <li>Redis\uff08\u53ef\u9009\uff0c\u7528\u4e8e\u5206\u5e03\u5f0f\u4f1a\u8bdd\u7ba1\u7406\uff09</li> </ul>"},{"location":"zh/runner/#_6","title":"\ud83d\udca1 \u6700\u7b80\u793a\u4f8b","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n)\n\nfunc main() {\n    // 1. \u521b\u5efa\u6a21\u578b\n    llmModel := openai.New(\"DeepSeek-V3-Online-64K\")\n\n    // 2. \u521b\u5efa Agent\n    agent := llmagent.New(\"assistant\",\n        llmagent.WithModel(llmModel),\n        llmagent.WithInstruction(\"\u4f60\u662f\u4e00\u4e2a\u6709\u5e2e\u52a9\u7684AI\u52a9\u624b\"),\n        llmagent.WithGenerationConfig(model.GenerationConfig{Stream: true}), // \u542f\u7528\u6d41\u5f0f\u8f93\u51fa\n    )\n\n    // 3. \u521b\u5efa Runner\n    r := runner.NewRunner(\"my-app\", agent)\n\n    // 4. \u8fd0\u884c\u5bf9\u8bdd\n    ctx := context.Background()\n    userMessage := model.NewUserMessage(\"\u4f60\u597d\uff01\")\n\n    eventChan, err := r.Run(ctx, \"user1\", \"session1\", userMessage)\n    if err != nil {\n        panic(err)\n    }\n\n    // 5. \u5904\u7406\u54cd\u5e94\n    for event := range eventChan {\n        if event.Error != nil {\n            fmt.Printf(\"\u9519\u8bef: %s\\n\", event.Error.Message)\n            continue\n        }\n\n        if len(event.Choices) &gt; 0 {\n            fmt.Print(event.Choices[0].Delta.Content)\n        }\n    }\n}\n</code></pre>"},{"location":"zh/runner/#_7","title":"\ud83d\ude80 \u8fd0\u884c\u793a\u4f8b","text":"<pre><code># \u8fdb\u5165\u793a\u4f8b\u76ee\u5f55\ncd examples/runner\n\n# \u8bbe\u7f6eAPI\u5bc6\u94a5\nexport OPENAI_API_KEY=\"your-api-key\"\n\n# \u57fa\u7840\u8fd0\u884c\ngo run main.go\n\n# \u4f7f\u7528Redis\u4f1a\u8bdd\ndocker run -d -p 6379:6379 redis:alpine\ngo run main.go -session redis\n\n# \u81ea\u5b9a\u4e49\u6a21\u578b\ngo run main.go -model \"gpt-4o-mini\"\n</code></pre>"},{"location":"zh/runner/#_8","title":"\ud83d\udcac \u4ea4\u4e92\u5f0f\u529f\u80fd","text":"<p>\u8fd0\u884c\u793a\u4f8b\u540e\uff0c\u652f\u6301\u4ee5\u4e0b\u7279\u6b8a\u547d\u4ee4\uff1a</p> <ul> <li><code>/history</code> - \u8bf7\u6c42 AI \u663e\u793a\u5bf9\u8bdd\u5386\u53f2</li> <li><code>/new</code> - \u5f00\u59cb\u65b0\u7684\u4f1a\u8bdd\uff08\u91cd\u7f6e\u5bf9\u8bdd\u4e0a\u4e0b\u6587\uff09</li> <li><code>/exit</code> - \u7ed3\u675f\u5bf9\u8bdd</li> </ul> <p>\u5f53 AI \u4f7f\u7528\u5de5\u5177\u65f6\uff0c\u4f1a\u663e\u793a\u8be6\u7ec6\u7684\u8c03\u7528\u8fc7\u7a0b\uff1a</p> <pre><code>\ud83d\udd27 \u5de5\u5177\u8c03\u7528:\n   \u2022 calculator (ID: call_abc123)\n     \u53c2\u6570: {\"operation\":\"multiply\",\"a\":25,\"b\":4}\n\n\ud83d\udd04 \u6267\u884c\u4e2d...\n\u2705 \u5de5\u5177\u54cd\u5e94 (ID: call_abc123): {\"operation\":\"multiply\",\"a\":25,\"b\":4,\"result\":100}\n\n\ud83e\udd16 \u52a9\u624b: \u6211\u4e3a\u60a8\u8ba1\u7b97\u4e86 25 \u00d7 4 = 100\u3002\n</code></pre>"},{"location":"zh/runner/#api","title":"\ud83d\udd27 \u6838\u5fc3 API","text":""},{"location":"zh/runner/#runner_1","title":"Runner \u521b\u5efa","text":"<pre><code>// \u57fa\u7840\u521b\u5efa\nr := runner.NewRunner(appName, agent, options...)\n\n// \u5e38\u7528\u9009\u9879\nr := runner.NewRunner(\"my-app\", agent,\n    runner.WithSessionService(sessionService),  // \u4f1a\u8bdd\u670d\u52a1\n)\n</code></pre>"},{"location":"zh/runner/#_9","title":"\u8fd0\u884c\u5bf9\u8bdd","text":"<pre><code>// \u6267\u884c\u5355\u6b21\u5bf9\u8bdd\neventChan, err := r.Run(ctx, userID, sessionID, message, options...)\n\n// \u5e26\u8fd0\u884c\u9009\u9879\uff08\u5f53\u524d RunOptions \u4e3a\u7a7a\u7ed3\u6784\u4f53\uff0c\u7559\u4f5c\u672a\u6765\u6269\u5c55\uff09\neventChan, err := r.Run(ctx, userID, sessionID, message)\n</code></pre>"},{"location":"zh/runner/#auto-seed-session","title":"\u4f20\u5165\u5bf9\u8bdd\u5386\u53f2\uff08auto-seed + \u590d\u7528 Session\uff09","text":"<p>\u5982\u679c\u4e0a\u6e38\u670d\u52a1\u5df2\u7ecf\u7ef4\u62a4\u4e86\u4f1a\u8bdd\u5386\u53f2\uff0c\u5e76\u5e0c\u671b\u8ba9 Agent \u770b\u89c1\u8fd9\u4e9b\u4e0a\u4e0b\u6587\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f20\u5165\u6574\u6bb5 <code>[]model.Message</code>\u3002Runner \u4f1a\u5728 Session \u4e3a\u7a7a\u65f6\u81ea\u52a8\u5c06\u5176\u5199\u5165 Session\uff0c\u5e76\u5728\u968f\u540e\u7684\u8f6e\u6b21\u5c06 \u65b0\u4e8b\u4ef6\uff08\u5de5\u5177\u8c03\u7528\u3001\u540e\u7eed\u56de\u590d\u7b49\uff09\u7ee7\u7eed\u5199\u5165\u3002</p> <p>\u65b9\u5f0f A\uff1a\u4f7f\u7528\u4fbf\u6377\u51fd\u6570 <code>runner.RunWithMessages</code></p> <pre><code>msgs := []model.Message{\n    model.NewSystemMessage(\"\u4f60\u662f\u4e00\u4e2a\u6709\u5e2e\u52a9\u7684\u52a9\u624b\"),\n    model.NewUserMessage(\"\u7b2c\u4e00\u6761\u7528\u6237\u8f93\u5165\"),\n    model.NewAssistantMessage(\"\u4e0a\u4e00\u8f6e\u52a9\u624b\u56de\u590d\"),\n    model.NewUserMessage(\"\u65b0\u7684\u95ee\u9898\u662f\u4ec0\u4e48\uff1f\"),\n}\n\nch, err := runner.RunWithMessages(ctx, r, userID, sessionID, msgs)\n</code></pre> <p>\u793a\u4f8b\uff1a<code>examples/runwithmessages</code>\uff08\u4f7f\u7528 <code>RunWithMessages</code>\uff1bRunner \u4f1a auto-seed \u5e76\u590d\u7528 Session\uff09</p> <p>\u65b9\u5f0f B\uff1a\u901a\u8fc7 RunOption \u663e\u5f0f\u4f20\u5165\uff08\u4e0e Python ADK \u4e00\u81f4\u7684\u7406\u5ff5\uff09</p> <pre><code>msgs := []model.Message{ /* \u540c\u4e0a */ }\nch, err := r.Run(ctx, userID, sessionID, model.Message{}, agent.WithMessages(msgs))\n</code></pre> <p>\u6ce8\u610f\uff1a\u5f53\u663e\u5f0f\u4f20\u5165 <code>[]model.Message</code> \u65f6\uff0cRunner \u4f1a\u5728 Session \u4e3a\u7a7a\u65f6\u81ea\u52a8\u628a\u8fd9\u6bb5\u5386\u53f2\u5199\u5165 Session\u3002\u5185\u5bb9\u5904\u7406\u5668\u4e0d\u4f1a\u8bfb\u53d6\u8fd9\u4e2a\u9009\u9879\uff0c\u5b83\u53ea\u4f1a\u4ece Session \u4e8b\u4ef6\u4e2d\u6d3e\u751f\u6d88\u606f\uff08\u6216\u5728 Session \u6ca1\u6709\u4e8b\u4ef6\u65f6\u56de\u9000\u5230\u5355\u6761 <code>invocation.Message</code>\uff09\u3002<code>RunWithMessages</code> \u4ecd\u4f1a\u628a\u6700\u65b0\u7684\u7528\u6237\u6d88\u606f\u5199\u5165 <code>invocation.Message</code>\u3002</p>"},{"location":"zh/runner/#_10","title":"\ud83d\udcbe \u4f1a\u8bdd\u7ba1\u7406","text":""},{"location":"zh/runner/#_11","title":"\u5185\u5b58\u4f1a\u8bdd\uff08\u9ed8\u8ba4\uff09","text":"<pre><code>import \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n\nsessionService := inmemory.NewSessionService()\nr := runner.NewRunner(\"app\", agent,\n    runner.WithSessionService(sessionService))\n</code></pre>"},{"location":"zh/runner/#redis","title":"Redis \u4f1a\u8bdd\uff08\u5206\u5e03\u5f0f\uff09","text":"<pre><code>import \"trpc.group/trpc-go/trpc-agent-go/session/redis\"\n\n// \u521b\u5efa Redis \u4f1a\u8bdd\u670d\u52a1\nsessionService, err := redis.NewService(\n    redis.WithRedisClientURL(\"redis://localhost:6379\"))\n\nr := runner.NewRunner(\"app\", agent,\n    runner.WithSessionService(sessionService))\n</code></pre>"},{"location":"zh/runner/#_12","title":"\u4f1a\u8bdd\u914d\u7f6e","text":"<pre><code>// Redis \u652f\u6301\u7684\u914d\u7f6e\u9009\u9879\nsessionService, err := redis.NewService(\n    redis.WithRedisClientURL(\"redis://localhost:6379\"),\n    redis.WithSessionEventLimit(1000),         // \u9650\u5236\u4f1a\u8bdd\u4e8b\u4ef6\u6570\u91cf\n    // redis.WithRedisInstance(\"redis-instance\"), // \u6216\u4f7f\u7528\u5b9e\u4f8b\u540d\n)\n</code></pre>"},{"location":"zh/runner/#agent","title":"\ud83e\udd16 Agent \u914d\u7f6e","text":"<p>Runner \u7684\u6838\u5fc3\u804c\u8d23\u662f\u7ba1\u7406 Agent \u7684\u6267\u884c\u6d41\u7a0b\u3002\u521b\u5efa\u597d\u7684 Agent \u9700\u8981\u901a\u8fc7 Runner \u6267\u884c\u3002</p>"},{"location":"zh/runner/#agent_1","title":"\u57fa\u7840 Agent \u521b\u5efa","text":"<pre><code>// \u521b\u5efa\u57fa\u7840 Agent\uff08\u8be6\u7ec6\u914d\u7f6e\u53c2\u89c1 agent.md\uff09\nagent := llmagent.New(\"assistant\",\n    llmagent.WithModel(model),\n    llmagent.WithInstruction(\"\u4f60\u662f\u4e00\u4e2a\u6709\u5e2e\u52a9\u7684AI\u52a9\u624b\"))\n\n// \u4f7f\u7528 Runner \u6267\u884c Agent\nr := runner.NewRunner(\"my-app\", agent)\n</code></pre>"},{"location":"zh/runner/#_13","title":"\u751f\u6210\u914d\u7f6e","text":"<p>Runner \u4f1a\u5c06\u751f\u6210\u914d\u7f6e\u4f20\u9012\u7ed9 Agent\uff1a</p> <pre><code>// \u8f85\u52a9\u51fd\u6570\nfunc intPtr(i int) *int           { return &amp;i }\nfunc floatPtr(f float64) *float64 { return &amp;f }\n\ngenConfig := model.GenerationConfig{\n    MaxTokens:   intPtr(2000),\n    Temperature: floatPtr(0.7),\n    Stream:      true,  // \u542f\u7528\u6d41\u5f0f\u8f93\u51fa\n}\n\nagent := llmagent.New(\"assistant\",\n    llmagent.WithModel(model),\n    llmagent.WithGenerationConfig(genConfig))\n</code></pre>"},{"location":"zh/runner/#_14","title":"\u5de5\u5177\u96c6\u6210","text":"<p>\u5de5\u5177\u914d\u7f6e\u5728 Agent \u4e2d\u5b8c\u6210\uff0cRunner \u8d1f\u8d23\u8fd0\u884c\u5305\u542b\u5de5\u5177\u7684 Agent\uff1a</p> <pre><code>// \u521b\u5efa\u5de5\u5177\uff08\u8be6\u7ec6\u914d\u7f6e\u53c2\u89c1 tool.md\uff09\ntools := []tool.Tool{\n    function.NewFunctionTool(myFunction, function.WithName(\"my_tool\")),\n    // \u66f4\u591a\u5de5\u5177...\n}\n\n// \u5c06\u5de5\u5177\u6dfb\u52a0\u5230 Agent\nagent := llmagent.New(\"assistant\",\n    llmagent.WithModel(model),\n    llmagent.WithTools(tools))\n\n// Runner \u8fd0\u884c\u914d\u7f6e\u4e86\u5de5\u5177\u7684 Agent\nr := runner.NewRunner(\"my-app\", agent)\n</code></pre> <p>\u5de5\u5177\u8c03\u7528\u6d41\u7a0b\uff1aRunner \u672c\u8eab\u4e0d\u76f4\u63a5\u5904\u7406\u5de5\u5177\u8c03\u7528\uff0c\u5177\u4f53\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <ol> <li>\u4f20\u9012\u5de5\u5177\uff1aRunner \u901a\u8fc7 Invocation \u5c06\u4e0a\u4e0b\u6587\u4f20\u9012\u7ed9 Agent</li> <li>Agent \u5904\u7406\uff1aAgent.Run \u65b9\u6cd5\u8d1f\u8d23\u5177\u4f53\u7684\u5de5\u5177\u8c03\u7528\u903b\u8f91</li> <li>\u4e8b\u4ef6\u8f6c\u53d1\uff1aRunner \u63a5\u6536 Agent \u8fd4\u56de\u7684\u4e8b\u4ef6\u6d41\u5e76\u8f6c\u53d1</li> <li>\u4f1a\u8bdd\u8bb0\u5f55\uff1a\u5c06\u975e partial \u54cd\u5e94\u4e8b\u4ef6\u8ffd\u52a0\u5230\u4f1a\u8bdd\u4e2d</li> </ol>"},{"location":"zh/runner/#agent_2","title":"\u591a Agent \u652f\u6301","text":"<p>Runner \u53ef\u4ee5\u6267\u884c\u590d\u6742\u7684\u591a Agent \u7ed3\u6784\uff08\u8be6\u7ec6\u914d\u7f6e\u53c2\u89c1 multiagent.md\uff09\uff1a</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/agent/chainagent\"\n\n// \u521b\u5efa\u591a Agent \u7ec4\u5408\nmultiAgent := chainagent.New(\"pipeline\",\n    chainagent.WithSubAgents([]agent.Agent{agent1, agent2}))\n\n// \u4f7f\u7528\u540c\u4e00\u4e2a Runner \u6267\u884c\nr := runner.NewRunner(\"multi-app\", multiAgent)\n</code></pre>"},{"location":"zh/runner/#_15","title":"\ud83d\udcca \u4e8b\u4ef6\u5904\u7406","text":""},{"location":"zh/runner/#_16","title":"\u4e8b\u4ef6\u7c7b\u578b","text":"<pre><code>import \"trpc.group/trpc-go/trpc-agent-go/event\"\n\nfor event := range eventChan {\n    // \u9519\u8bef\u4e8b\u4ef6\n    if event.Error != nil {\n        fmt.Printf(\"\u9519\u8bef: %s\\n\", event.Error.Message)\n        continue\n    }\n\n    // \u6d41\u5f0f\u5185\u5bb9\n    if len(event.Choices) &gt; 0 {\n        choice := event.Choices[0]\n        fmt.Print(choice.Delta.Content)\n    }\n\n    // \u5de5\u5177\u8c03\u7528\n    if len(event.Choices) &gt; 0 &amp;&amp; len(event.Choices[0].Message.ToolCalls) &gt; 0 {\n        for _, toolCall := range event.Choices[0].Message.ToolCalls {\n            fmt.Printf(\"\u8c03\u7528\u5de5\u5177: %s\\n\", toolCall.Function.Name)\n        }\n    }\n\n    // \u5b8c\u6210\u4e8b\u4ef6\n    if event.Done {\n        break\n    }\n}\n</code></pre>"},{"location":"zh/runner/#_17","title":"\u5b8c\u6574\u4e8b\u4ef6\u5904\u7406\u793a\u4f8b","text":"<pre><code>import (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc processEvents(eventChan &lt;-chan *event.Event) error {\n    var fullResponse strings.Builder\n\n    for event := range eventChan {\n        // \u5904\u7406\u9519\u8bef\n        if event.Error != nil {\n            return fmt.Errorf(\"\u4e8b\u4ef6\u9519\u8bef: %w\", event.Error)\n        }\n\n        // \u5904\u7406\u5de5\u5177\u8c03\u7528\n        if len(event.Choices) &gt; 0 &amp;&amp; len(event.Choices[0].Message.ToolCalls) &gt; 0 {\n            fmt.Println(\"\ud83d\udd27 \u5de5\u5177\u8c03\u7528:\")\n            for _, toolCall := range event.Choices[0].Message.ToolCalls {\n                fmt.Printf(\"  \u2022 %s (ID: %s)\\n\",\n                    toolCall.Function.Name, toolCall.ID)\n                fmt.Printf(\"    \u53c2\u6570: %s\\n\",\n                    string(toolCall.Function.Arguments))\n            }\n        }\n\n        // \u5904\u7406\u5de5\u5177\u54cd\u5e94\n        if event.Response != nil {\n            for _, choice := range event.Response.Choices {\n                if choice.Message.Role == model.RoleTool {\n                    fmt.Printf(\"\u2705 \u5de5\u5177\u54cd\u5e94 (ID: %s): %s\\n\",\n                        choice.Message.ToolID, choice.Message.Content)\n                }\n            }\n        }\n\n        // \u5904\u7406\u6d41\u5f0f\u5185\u5bb9\n        if len(event.Choices) &gt; 0 {\n            content := event.Choices[0].Delta.Content\n            if content != \"\" {\n                fmt.Print(content)\n                fullResponse.WriteString(content)\n            }\n        }\n\n        if event.Done {\n            fmt.Println() // \u6362\u884c\n            break\n        }\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"zh/runner/#_18","title":"\ud83d\udd2e \u6267\u884c\u4e0a\u4e0b\u6587\u7ba1\u7406","text":"<p>Runner \u521b\u5efa\u5e76\u7ba1\u7406 Invocation \u7ed3\u6784\uff1a</p> <pre><code>// Runner \u521b\u5efa\u7684 Invocation \u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\uff1a\ninvocation := agent.NewInvocation(\n    agent.WithInvocationAgent(r.agent),        // Agent \u5b9e\u4f8b\n    agent.WithInvocationSession(Session),      // \u4f1a\u8bdd\u5bf9\u8c61\n    agent.WithInvocationEndInvocation(false),  // \u7ed3\u675f\u6807\u5fd7\n    agent.WithInvocationMessage(message),      // \u7528\u6237\u6d88\u606f\n    agent.WithInvocationRunOptions(ro),        // \u8fd0\u884c\u9009\u9879\n)\n// \u6ce8\uff1aInvocation \u8fd8\u5305\u542b\u5176\u4ed6\u5b57\u6bb5\u5982 AgentName\u3001Branch\u3001Model\u3001\n// TransferInfo\u3001AgentCallbacks\u3001ModelCallbacks\u3001ToolCallbacks \u7b49\uff0c\n// \u4f46\u8fd9\u4e9b\u5b57\u6bb5\u7531 Agent \u5185\u90e8\u4f7f\u7528\u548c\u7ba1\u7406\n</code></pre>"},{"location":"zh/runner/#_19","title":"\u2705 \u4f7f\u7528\u6ce8\u610f\u4e8b\u9879","text":""},{"location":"zh/runner/#_20","title":"\u9519\u8bef\u5904\u7406","text":"<pre><code>// \u5904\u7406 Runner.Run \u7684\u9519\u8bef\neventChan, err := r.Run(ctx, userID, sessionID, message)\nif err != nil {\n    log.Printf(\"Runner \u6267\u884c\u5931\u8d25: %v\", err)\n    return err\n}\n\n// \u5904\u7406\u4e8b\u4ef6\u6d41\u4e2d\u7684\u9519\u8bef\nfor event := range eventChan {\n    if event.Error != nil {\n        log.Printf(\"\u4e8b\u4ef6\u9519\u8bef: %s\", event.Error.Message)\n        continue\n    }\n    // \u5904\u7406\u6b63\u5e38\u4e8b\u4ef6\n}\n</code></pre>"},{"location":"zh/runner/#_21","title":"\u8d44\u6e90\u7ba1\u7406","text":"<pre><code>// \u4f7f\u7528 context \u63a7\u5236\u751f\u547d\u5468\u671f\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\n// \u786e\u4fdd\u6d88\u8d39\u5b8c\u6240\u6709\u4e8b\u4ef6\neventChan, err := r.Run(ctx, userID, sessionID, message)\nif err != nil {\n    return err\n}\n\nfor event := range eventChan {\n    // \u5904\u7406\u4e8b\u4ef6\n    if event.Done {\n        break\n    }\n}\n</code></pre>"},{"location":"zh/runner/#_22","title":"\u72b6\u6001\u68c0\u67e5","text":"<pre><code>import (\n    \"context\"\n    \"fmt\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n)\n\n// \u68c0\u67e5 Runner \u662f\u5426\u80fd\u6b63\u5e38\u5de5\u4f5c\nfunc checkRunner(r runner.Runner, ctx context.Context) error {\n    testMessage := model.NewUserMessage(\"\u6d4b\u8bd5\")\n    eventChan, err := r.Run(ctx, \"test-user\", \"test-session\", testMessage)\n    if err != nil {\n        return fmt.Errorf(\"Runner.Run \u5931\u8d25: %v\", err)\n    }\n\n    // \u68c0\u67e5\u4e8b\u4ef6\u6d41\n    for event := range eventChan {\n        if event.Error != nil {\n            return fmt.Errorf(\"\u6536\u5230\u9519\u8bef\u4e8b\u4ef6: %s\", event.Error.Message)\n        }\n        if event.Done {\n            break\n        }\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"zh/runner/#_23","title":"\ud83d\udcdd \u603b\u7ed3","text":"<p>Runner \u7ec4\u4ef6\u662f tRPC-Agent-Go \u6846\u67b6\u7684\u6838\u5fc3\uff0c\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u5bf9\u8bdd\u7ba1\u7406\u548c Agent \u7f16\u6392\u80fd\u529b\u3002\u901a\u8fc7\u5408\u7406\u4f7f\u7528\u4f1a\u8bdd\u7ba1\u7406\u3001\u5de5\u5177\u96c6\u6210\u548c\u4e8b\u4ef6\u5904\u7406\uff0c\u53ef\u4ee5\u6784\u5efa\u5f3a\u5927\u7684\u667a\u80fd\u5bf9\u8bdd\u5e94\u7528\u3002</p>"},{"location":"zh/session/","title":"Session \u4f1a\u8bdd\u7ba1\u7406","text":""},{"location":"zh/session/#_1","title":"\u6982\u8ff0","text":"<p>tRPC-Agent-Go \u6846\u67b6\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u4f1a\u8bdd\uff08Session\uff09\u7ba1\u7406\u529f\u80fd\uff0c\u7528\u4e8e\u7ef4\u62a4 Agent \u4e0e\u7528\u6237\u4ea4\u4e92\u8fc7\u7a0b\u4e2d\u7684\u5bf9\u8bdd\u5386\u53f2\u548c\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\u4f1a\u8bdd\u7ba1\u7406\u6a21\u5757\u652f\u6301\u591a\u79cd\u5b58\u50a8\u540e\u7aef\uff0c\u5305\u62ec\u5185\u5b58\u5b58\u50a8\u548c Redis \u5b58\u50a8\uff0c\u4e3a Agent \u5e94\u7528\u63d0\u4f9b\u4e86\u7075\u6d3b\u7684\u72b6\u6001\u6301\u4e45\u5316\u80fd\u529b\u3002</p>"},{"location":"zh/session/#_2","title":"\ud83c\udfaf \u6838\u5fc3\u7279\u6027","text":"<ul> <li>\u4f1a\u8bdd\u6301\u4e45\u5316\uff1a\u4fdd\u5b58\u5b8c\u6574\u7684\u5bf9\u8bdd\u5386\u53f2\u548c\u4e0a\u4e0b\u6587</li> <li>\u591a\u5b58\u50a8\u540e\u7aef\uff1a\u652f\u6301\u5185\u5b58\u5b58\u50a8\u548c Redis \u5b58\u50a8</li> <li>\u4e8b\u4ef6\u8ffd\u8e2a\uff1a\u5b8c\u6574\u8bb0\u5f55\u4f1a\u8bdd\u4e2d\u7684\u6240\u6709\u4ea4\u4e92\u4e8b\u4ef6</li> <li>\u591a\u7ea7\u5b58\u50a8\uff1a\u652f\u6301\u5e94\u7528\u7ea7\u3001\u7528\u6237\u7ea7\u548c\u4f1a\u8bdd\u7ea7\u6570\u636e\u5b58\u50a8</li> <li>\u5e76\u53d1\u5b89\u5168\uff1a\u5185\u7f6e\u8bfb\u5199\u9501\u4fdd\u8bc1\u5e76\u53d1\u8bbf\u95ee\u5b89\u5168</li> <li>\u81ea\u52a8\u7ba1\u7406\uff1a\u5728Runner\u4e2d\u6307\u5b9aSession Service\u540e\uff0c\u5373\u53ef\u81ea\u52a8\u5904\u7406\u4f1a\u8bdd\u7684\u521b\u5efa\u3001\u52a0\u8f7d\u548c\u66f4\u65b0</li> </ul>"},{"location":"zh/session/#_3","title":"\u6838\u5fc3\u6982\u5ff5","text":""},{"location":"zh/session/#_4","title":"\u4f1a\u8bdd\u5c42\u6b21\u7ed3\u6784","text":"<pre><code>Application (\u5e94\u7528)\n\u251c\u2500\u2500 User Sessions (\u7528\u6237\u4f1a\u8bdd)\n\u2502   \u251c\u2500\u2500 Session 1 (\u4f1a\u8bdd1)\n\u2502   \u2502   \u251c\u2500\u2500 Session Data (\u4f1a\u8bdd\u6570\u636e)\n\u2502   \u2502   \u2514\u2500\u2500 Events (\u4e8b\u4ef6\u5217\u8868)\n\u2502   \u2514\u2500\u2500 Session 2 (\u4f1a\u8bdd2)\n\u2502       \u251c\u2500\u2500 Session Data (\u4f1a\u8bdd\u6570\u636e)\n\u2502       \u2514\u2500\u2500 Events (\u4e8b\u4ef6\u5217\u8868)\n\u2514\u2500\u2500 App Data (\u5e94\u7528\u6570\u636e)\n</code></pre>"},{"location":"zh/session/#_5","title":"\u6570\u636e\u5c42\u7ea7","text":"<ul> <li>App Data\uff08\u5e94\u7528\u6570\u636e\uff09\uff1a\u5168\u5c40\u5171\u4eab\u6570\u636e\uff0c\u5982\u7cfb\u7edf\u914d\u7f6e\u3001\u7279\u6027\u6807\u5fd7\u7b49</li> <li>User Data\uff08\u7528\u6237\u6570\u636e\uff09\uff1a\u7528\u6237\u7ea7\u522b\u6570\u636e\uff0c\u540c\u4e00\u7528\u6237\u7684\u6240\u6709\u4f1a\u8bdd\u5171\u4eab\uff0c\u5982\u7528\u6237\u504f\u597d\u8bbe\u7f6e</li> <li>Session Data\uff08\u4f1a\u8bdd\u6570\u636e\uff09\uff1a\u4f1a\u8bdd\u7ea7\u522b\u6570\u636e\uff0c\u5b58\u50a8\u5355\u6b21\u5bf9\u8bdd\u7684\u4e0a\u4e0b\u6587\u548c\u72b6\u6001</li> </ul>"},{"location":"zh/session/#_6","title":"\u4f7f\u7528\u793a\u4f8b","text":""},{"location":"zh/session/#session-service","title":"\u96c6\u6210Session Service","text":"<p>\u4f7f\u7528 <code>runner.WithSessionService</code> \u53ef\u4ee5\u4e3a Agent \u8fd0\u884c\u5668\u63d0\u4f9b\u5b8c\u6574\u7684\u4f1a\u8bdd\u7ba1\u7406\u80fd\u529b\uff0c\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u9ed8\u8ba4\u4f7f\u7528\u57fa\u4e8e\u5185\u5b58\u7684\u4f1a\u8bdd\u7ba1\u7406\u3002Runner \u4f1a\u81ea\u52a8\u5904\u7406\u4f1a\u8bdd\u7684\u521b\u5efa\u3001\u52a0\u8f7d\u548c\u66f4\u65b0\uff0c\u7528\u6237\u65e0\u9700\u989d\u5916\u64cd\u4f5c\uff0c\u4e5f\u4e0d\u7528\u5173\u5fc3\u5185\u90e8\u7ec6\u8282\uff1a</p> <pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/redis\"\n)\n\n// \u9009\u62e9\u4f1a\u8bdd\u670d\u52a1\u7c7b\u578b\nvar sessionService session.Service\n\n// \u65b9\u5f0f1\uff1a\u4f7f\u7528\u5185\u5b58\u5b58\u50a8\uff08\u5f00\u53d1\u6d4b\u8bd5\uff09\nsessionService = inmemory.NewSessionService()\n\n// \u65b9\u5f0f2\uff1a\u4f7f\u7528 Redis \u5b58\u50a8\uff08\u751f\u4ea7\u73af\u5883\uff09\nsessionService, err = redis.NewService(\n    redis.WithRedisClientURL(\"redis://your-username:yourt-password@127.0.0.1:6379\"),\n)\n\n// \u521b\u5efa Runner \u5e76\u914d\u7f6e\u4f1a\u8bdd\u670d\u52a1\nrunner := runner.NewRunner(\n    \"my-agent\",\n    llmAgent,\n    runner.WithSessionService(sessionService), // \u5173\u952e\u914d\u7f6e\n)\n\n// \u4f7f\u7528 Runner \u8fdb\u884c\u591a\u8f6e\u5bf9\u8bdd\neventChan, err := runner.Run(ctx, userID, sessionID, userMessage)\n</code></pre> <p>Agent \u96c6\u6210\u4f1a\u8bdd\u7ba1\u7406\u4e4b\u540e\u5373\u53ef\u81ea\u52a8\u7684\u4f1a\u8bdd\u7ba1\u7406\u80fd\u529b\uff0c\u5305\u62ec</p> <ol> <li>\u81ea\u52a8\u4f1a\u8bdd\u6301\u4e45\u5316\uff1a\u6bcf\u6b21 AI \u4ea4\u4e92\u90fd\u4f1a\u81ea\u52a8\u4fdd\u5b58\u5230\u4f1a\u8bdd\u4e2d</li> <li>\u4e0a\u4e0b\u6587\u8fde\u7eed\u6027\uff1a\u81ea\u52a8\u52a0\u8f7d\u5386\u53f2\u5bf9\u8bdd\u4e0a\u4e0b\u6587\uff0c\u5b9e\u73b0\u771f\u6b63\u7684\u591a\u8f6e\u5bf9\u8bdd</li> <li>\u72b6\u6001\u7ba1\u7406\uff1a\u7ef4\u62a4\u5e94\u7528\u3001\u7528\u6237\u548c\u4f1a\u8bdd\u4e09\u4e2a\u5c42\u7ea7\u7684\u72b6\u6001\u6570\u636e</li> <li>\u4e8b\u4ef6\u6d41\u5904\u7406\uff1a\u81ea\u52a8\u8bb0\u5f55\u7528\u6237\u8f93\u5165\u3001AI \u54cd\u5e94\u3001\u5de5\u5177\u8c03\u7528\u7b49\u6240\u6709\u4ea4\u4e92\u4e8b\u4ef6</li> </ol>"},{"location":"zh/session/#_7","title":"\u57fa\u672c\u4f1a\u8bdd\u64cd\u4f5c","text":"<p>\u5982\u679c\u7528\u6237\u9700\u8981\u624b\u52a8\u7ba1\u7406\u5df2\u6709\u7684\u4f1a\u8bdd\uff0c\u6bd4\u5982\u67e5\u8be2\u7edf\u8ba1\u5df2\u6709\u7684 Session\uff0c\u53ef\u4ee5\u4f7f\u7528 Session Service \u63d0\u4f9b\u7684 API\u3002</p>"},{"location":"zh/session/#_8","title":"\u521b\u5efa\u548c\u7ba1\u7406\u4f1a\u8bdd","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n    \"time\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/session\"\n    \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n    \"trpc.group/trpc-go/trpc-agent-go/event\"\n)\n\nfunc main() {\n    // \u521b\u5efa\u5185\u5b58\u4f1a\u8bdd\u670d\u52a1\n    sessionService := inmemory.NewSessionService()\n\n    // \u521b\u5efa\u4f1a\u8bdd\n    key := session.Key{\n        AppName:   \"my-agent\",\n        UserID:    \"user123\",\n        SessionID: \"\", // \u7a7a\u5b57\u7b26\u4e32\u4f1a\u81ea\u52a8\u751f\u6210 UUID\n    }\n\n    initialState := session.StateMap{\n        \"language\": []byte(\"zh-CN\"),\n        \"theme\":    []byte(\"dark\"),\n    }\n\n    createdSession, err := sessionService.CreateSession(\n        context.Background(),\n        key,\n        initialState,\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Printf(\"Created session: %s\\n\", createdSession.ID)\n}\n</code></pre>"},{"location":"zh/session/#getsession-","title":"GetSession - \u83b7\u53d6\u4f1a\u8bdd","text":"<pre><code>// GetSession \u901a\u8fc7\u4f1a\u8bdd\u952e\u83b7\u53d6\u6307\u5b9a\u4f1a\u8bdd\nfunc (s *SessionService) GetSession(\n    ctx context.Context, \n    key session.Key, \n    options ...session.Option,\n) (*Session, error)\n</code></pre> <p>\u529f\u80fd\uff1a\u6839\u636e AppName\u3001UserID \u548c SessionID \u68c0\u7d22\u5df2\u5b58\u5728\u7684\u4f1a\u8bdd</p> <p>\u53c2\u6570\uff1a</p> <ul> <li><code>key</code>\uff1a\u4f1a\u8bdd\u952e\uff0c\u5fc5\u987b\u5305\u542b\u5b8c\u6574\u7684 AppName\u3001UserID \u548c SessionID</li> <li><code>options</code>\uff1a\u53ef\u9009\u53c2\u6570\uff0c\u5982 <code>session.WithEventNum(10)</code> \u9650\u5236\u8fd4\u56de\u7684\u4e8b\u4ef6\u6570\u91cf</li> </ul> <p>\u8fd4\u56de\u503c\uff1a</p> <ul> <li>\u5982\u679c\u4f1a\u8bdd\u4e0d\u5b58\u5728\u8fd4\u56de <code>nil, nil</code></li> <li>\u5982\u679c\u4f1a\u8bdd\u5b58\u5728\u8fd4\u56de\u5b8c\u6574\u7684\u4f1a\u8bdd\u5bf9\u8c61\uff08\u5305\u542b\u5408\u5e76\u7684 app\u3001user\u3001session \u72b6\u6001\uff09</li> </ul> <p>\u4f7f\u7528\u793a\u4f8b\uff1a</p> <pre><code>// \u83b7\u53d6\u5b8c\u6574\u4f1a\u8bdd\nsession, err := sessionService.GetSession(ctx, session.Key{\n    AppName:   \"my-agent\",\n    UserID:    \"user123\",\n    SessionID: \"session-id-123\",\n})\n\n// \u83b7\u53d6\u6700\u8fd1 10 \u4e2a\u4e8b\u4ef6\u7684\u4f1a\u8bdd\nsession, err := sessionService.GetSession(ctx, key, \n    session.WithEventNum(10))\n\n// \u83b7\u53d6\u6307\u5b9a\u65f6\u95f4\u540e\u7684\u4e8b\u4ef6\nsession, err := sessionService.GetSession(ctx, key,\n    session.WithEventTime(time.Now().Add(-1*time.Hour)))\n</code></pre>"},{"location":"zh/session/#deletesession-","title":"DeleteSession - \u5220\u9664\u4f1a\u8bdd","text":"<pre><code>// DeleteSession \u5220\u9664\u6307\u5b9a\u4f1a\u8bdd\nfunc (s *SessionService) DeleteSession(\n    ctx context.Context, \n    key session.Key, \n    options ...session.Option,\n) error\n</code></pre> <p>\u529f\u80fd\uff1a\u4ece\u5b58\u50a8\u4e2d\u79fb\u9664\u6307\u5b9a\u4f1a\u8bdd\uff0c\u5982\u679c\u7528\u6237\u4e0b\u6ca1\u6709\u5176\u4ed6\u4f1a\u8bdd\u5219\u81ea\u52a8\u6e05\u7406\u7528\u6237\u8bb0\u5f55</p> <p>\u7279\u70b9\uff1a</p> <ul> <li>\u5220\u9664\u4e0d\u5b58\u5728\u7684\u4f1a\u8bdd\u4e0d\u4f1a\u62a5\u9519</li> <li>\u81ea\u52a8\u6e05\u7406\u7a7a\u7684\u7528\u6237\u4f1a\u8bdd\u6620\u5c04</li> <li>\u7ebf\u7a0b\u5b89\u5168\u64cd\u4f5c</li> </ul> <p>\u4f7f\u7528\u793a\u4f8b\uff1a</p> <pre><code>// \u5220\u9664\u6307\u5b9a\u4f1a\u8bdd\nerr := sessionService.DeleteSession(ctx, session.Key{\n    AppName:   \"my-agent\", \n    UserID:    \"user123\",\n    SessionID: \"session-id-123\",\n})\nif err != nil {\n    log.Printf(\"Failed to delete session: %v\", err)\n}\n</code></pre>"},{"location":"zh/session/#listsessions-","title":"ListSessions - \u5217\u51fa\u4f1a\u8bdd","text":"<pre><code>// \u5217\u51fa\u7528\u6237\u7684\u6240\u6709\u4f1a\u8bdd\nsessions, err := sessionService.ListSessions(\n    context.Background(),\n    session.UserKey{\n        AppName: \"my-agent\",\n        UserID:  \"user123\",\n    },\n)\n</code></pre>"},{"location":"zh/session/#_9","title":"\u72b6\u6001\u7ba1\u7406","text":"<pre><code>// \u66f4\u65b0\u5e94\u7528\u72b6\u6001\nappState := session.StateMap{\n    \"version\": []byte(\"1.0.0\"),\n    \"config\":  []byte(`{\"feature_flags\": {\"new_ui\": true}}`),\n}\nerr := sessionService.UpdateAppState(context.Background(), \"my-agent\", appState)\n\n// \u66f4\u65b0\u7528\u6237\u72b6\u6001\nuserKey := session.UserKey{\n    AppName: \"my-agent\",\n    UserID:  \"user123\",\n}\nuserState := session.StateMap{\n    \"preferences\": []byte(`{\"notifications\": true}`),\n    \"profile\":     []byte(`{\"name\": \"Alice\"}`),\n}\nerr = sessionService.UpdateUserState(context.Background(), userKey, userState)\n\n// \u83b7\u53d6\u4f1a\u8bdd\uff08\u5305\u542b\u5408\u5e76\u540e\u7684\u72b6\u6001\uff09\nretrievedSession, err = sessionService.GetSession(\n    context.Background(),\n    session.Key{\n        AppName:   \"my-agent\",\n        UserID:    \"user123\", \n        SessionID: retrievedSession.ID,\n    },\n)\n</code></pre>"},{"location":"zh/session/#_10","title":"\u5b58\u50a8\u540e\u7aef","text":""},{"location":"zh/session/#_11","title":"\u5185\u5b58\u5b58\u50a8","text":"<p>\u9002\u7528\u4e8e\u5f00\u53d1\u73af\u5883\u548c\u5c0f\u89c4\u6a21\u5e94\u7528\uff1a</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/session/inmemory\"\n\n// \u521b\u5efa\u5185\u5b58\u4f1a\u8bdd\u670d\u52a1\nsessionService := inmemory.NewSessionService(\n    inmemory.WithSessionEventLimit(200), // \u9650\u5236\u6bcf\u4e2a\u4f1a\u8bdd\u6700\u591a\u4fdd\u5b58 200 \u4e2a\u4e8b\u4ef6\n)\n</code></pre>"},{"location":"zh/session/#_12","title":"\u5185\u5b58\u5b58\u50a8\u914d\u7f6e\u9009\u9879","text":"<ul> <li><code>WithSessionEventLimit(limit int)</code>\uff1a\u8bbe\u7f6e\u6bcf\u4e2a\u4f1a\u8bdd\u5b58\u50a8\u7684\u6700\u5927\u4e8b\u4ef6\u6570\u91cf\u3002\u9ed8\u8ba4\u503c\u4e3a 1000\uff0c\u8d85\u8fc7\u9650\u5236\u65f6\u6dd8\u6c70\u8001\u7684\u4e8b\u4ef6\u3002</li> <li><code>WithSessionTTL(ttl time.Duration)</code>\uff1a\u8bbe\u7f6e\u4f1a\u8bdd\u72b6\u6001\u548c\u4e8b\u4ef6\u5217\u8868\u7684 TTL\u3002\u9ed8\u8ba4\u503c\u4e3a 0\uff08\u4e0d\u8fc7\u671f\uff09\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3a 0\uff0c\u4f1a\u8bdd\u5c06\u4e0d\u4f1a\u81ea\u52a8\u8fc7\u671f\u3002</li> <li><code>WithAppStateTTL(ttl time.Duration)</code>\uff1a\u8bbe\u7f6e\u5e94\u7528\u7ea7\u72b6\u6001\u7684 TTL\u3002\u9ed8\u8ba4\u503c\u4e3a 0\uff08\u4e0d\u8fc7\u671f\uff09\uff0c\u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u5e94\u7528\u72b6\u6001\u5c06\u4e0d\u4f1a\u81ea\u52a8\u8fc7\u671f\u3002</li> <li><code>WithUserStateTTL(ttl time.Duration)</code>\uff1a\u8bbe\u7f6e\u7528\u6237\u7ea7\u72b6\u6001\u7684 TTL\u3002\u9ed8\u8ba4\u503c\u4e3a 0\uff08\u4e0d\u8fc7\u671f\uff09\uff0c\u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u7528\u6237\u72b6\u6001\u5c06\u4e0d\u4f1a\u81ea\u52a8\u8fc7\u671f\u3002</li> <li><code>WithCleanupInterval(interval time.Duration)</code>\uff1a\u8bbe\u7f6e\u8fc7\u671f\u6570\u636e\u81ea\u52a8\u6e05\u7406\u7684\u95f4\u9694\u3002\u9ed8\u8ba4\u503c\u4e3a 0\uff08\u81ea\u52a8\u786e\u5b9a\uff09\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3a 0\uff0c\u5c06\u6839\u636e TTL \u914d\u7f6e\u81ea\u52a8\u786e\u5b9a\u6e05\u7406\u95f4\u9694\u3002\u5982\u679c\u914d\u7f6e\u4e86\u4efb\u4f55 TTL\uff0c\u9ed8\u8ba4\u6e05\u7406\u95f4\u9694\u4e3a 5 \u5206\u949f\u3002</li> </ul> <p>\u5b8c\u6574\u914d\u7f6e\u793a\u4f8b\uff1a</p> <pre><code>sessionService := inmemory.NewSessionService(\n    inmemory.WithSessionEventLimit(500),\n    inmemory.WithSessionTTL(30*time.Minute),\n    inmemory.WithAppStateTTL(24*time.Hour),\n    inmemory.WithUserStateTTL(7*24*time.Hour),\n    inmemory.WithCleanupInterval(10*time.Minute),\n)\n\n// \u914d\u7f6e\u6548\u679c\u8bf4\u660e\uff1a\n// - \u6bcf\u4e2a\u4f1a\u8bdd\u6700\u591a\u5b58\u50a8 500 \u4e2a\u4e8b\u4ef6\uff0c\u8d85\u51fa\u65f6\u81ea\u52a8\u6dd8\u6c70\u6700\u8001\u7684\u4e8b\u4ef6\n// - \u4f1a\u8bdd\u6570\u636e\u5728 30 \u5206\u949f\u65e0\u6d3b\u52a8\u540e\u81ea\u52a8\u8fc7\u671f\n// - \u5e94\u7528\u7ea7\u72b6\u6001\u5728 24 \u5c0f\u65f6\u540e\u8fc7\u671f\n// - \u7528\u6237\u7ea7\u72b6\u6001\u5728 7 \u5929\u540e\u8fc7\u671f  \n// - \u6bcf 10 \u5206\u949f\u6267\u884c\u4e00\u6b21\u6e05\u7406\u64cd\u4f5c\uff0c\u79fb\u9664\u8fc7\u671f\u6570\u636e\n</code></pre> <p>\u9ed8\u8ba4\u914d\u7f6e\u793a\u4f8b\uff1a</p> <pre><code>// \u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e\u521b\u5efa\u5185\u5b58\u4f1a\u8bdd\u670d\u52a1\nsessionService := inmemory.NewSessionService()\n\n// \u9ed8\u8ba4\u914d\u7f6e\u6548\u679c\u8bf4\u660e\uff1a\n// - \u6bcf\u4e2a\u4f1a\u8bdd\u6700\u591a\u5b58\u50a8 1000 \u4e2a\u4e8b\u4ef6\uff08\u9ed8\u8ba4\u503c\uff09\n// - \u6240\u6709\u6570\u636e\u6c38\u4e0d\u8fc7\u671f\uff08TTL \u4e3a 0\uff09\n// - \u4e0d\u6267\u884c\u81ea\u52a8\u6e05\u7406\uff08CleanupInterval \u4e3a 0\uff09\n// - \u9002\u7528\u4e8e\u5f00\u53d1\u73af\u5883\u6216\u77ed\u671f\u8fd0\u884c\u7684\u5e94\u7528\n</code></pre>"},{"location":"zh/session/#redis","title":"Redis \u5b58\u50a8","text":"<p>\u9002\u7528\u4e8e\u751f\u4ea7\u73af\u5883\u548c\u5206\u5e03\u5f0f\u5e94\u7528\uff1a</p> <pre><code>import \"trpc.group/trpc-go/trpc-agent-go/session/redis\"\n\n// \u4f7f\u7528 Redis URL \u521b\u5efa\nsessionService, err := redis.NewService(\n    redis.WithRedisClientURL(\"redis://your-username:yourt-password@127.0.0.1:6379\"),\n    redis.WithSessionEventLimit(500),\n)\n\n// \u6216\u4f7f\u7528\u9884\u914d\u7f6e\u7684 Redis \u5b9e\u4f8b\nsessionService, err := redis.NewService(\n    redis.WithInstanceName(\"my-redis-instance\"),\n)\n</code></pre>"},{"location":"zh/session/#redis_1","title":"Redis \u5b58\u50a8\u914d\u7f6e\u9009\u9879","text":"<ul> <li><code>WithSessionEventLimit(limit int)</code>\uff1a\u8bbe\u7f6e\u6bcf\u4e2a\u4f1a\u8bdd\u5b58\u50a8\u7684\u6700\u5927\u4e8b\u4ef6\u6570\u91cf\u3002\u9ed8\u8ba4\u503c\u4e3a 1000\uff0c\u8d85\u8fc7\u9650\u5236\u65f6\u6dd8\u6c70\u8001\u7684\u4e8b\u4ef6\u3002</li> <li><code>WithRedisClientURL(url string)</code>\uff1a\u901a\u8fc7 URL \u521b\u5efa Redis \u5ba2\u6237\u7aef\u3002\u683c\u5f0f\uff1a<code>redis://[username:password@]host:port[/database]</code>\u3002</li> <li><code>WithRedisInstance(instanceName string)</code>\uff1a\u4f7f\u7528\u9884\u914d\u7f6e\u7684 Redis \u5b9e\u4f8b\u3002\u6ce8\u610f\uff1a<code>WithRedisClientURL</code> \u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e <code>WithRedisInstance</code>\u3002</li> <li><code>WithExtraOptions(extraOptions ...interface{})</code>\uff1a\u4e3a Redis \u4f1a\u8bdd\u670d\u52a1\u8bbe\u7f6e\u989d\u5916\u9009\u9879\u3002\u6b64\u9009\u9879\u4e3b\u8981\u7528\u4e8e\u81ea\u5b9a\u4e49 Redis \u5ba2\u6237\u7aef\u6784\u5efa\u5668\uff0c\u5c06\u4f20\u9012\u7ed9\u6784\u5efa\u5668\u3002</li> <li><code>WithSessionTTL(ttl time.Duration)</code>\uff1a\u8bbe\u7f6e\u4f1a\u8bdd\u72b6\u6001\u548c\u4e8b\u4ef6\u5217\u8868\u7684 TTL\u3002\u9ed8\u8ba4\u503c\u4e3a 0\uff08\u4e0d\u8fc7\u671f\uff09\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3a 0\uff0c\u4f1a\u8bdd\u5c06\u4e0d\u4f1a\u8fc7\u671f\u3002</li> <li><code>WithAppStateTTL(ttl time.Duration)</code>\uff1a\u8bbe\u7f6e\u5e94\u7528\u7ea7\u72b6\u6001\u7684 TTL\u3002\u9ed8\u8ba4\u503c\u4e3a 0\uff08\u4e0d\u8fc7\u671f\uff09\uff0c\u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u5e94\u7528\u72b6\u6001\u5c06\u4e0d\u4f1a\u8fc7\u671f\u3002</li> <li><code>WithUserStateTTL(ttl time.Duration)</code>\uff1a\u8bbe\u7f6e\u7528\u6237\u7ea7\u72b6\u6001\u7684 TTL\u3002\u9ed8\u8ba4\u503c\u4e3a 0\uff08\u4e0d\u8fc7\u671f\uff09\uff0c\u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u7528\u6237\u72b6\u6001\u5c06\u4e0d\u4f1a\u8fc7\u671f\u3002</li> </ul> <p>\u5b8c\u6574\u914d\u7f6e\u793a\u4f8b\uff1a</p> <pre><code>sessionService, err := redis.NewService(\n    redis.WithRedisClientURL(\"redis://localhost:6379/0\"),\n    redis.WithSessionEventLimit(1000),\n    redis.WithSessionTTL(30*time.Minute),\n    redis.WithAppStateTTL(24*time.Hour),\n    redis.WithUserStateTTL(7*24*time.Hour),\n)\n\n// \u914d\u7f6e\u6548\u679c\u8bf4\u660e\uff1a\n// - \u8fde\u63a5\u5230\u672c\u5730 Redis \u670d\u52a1\u5668\u7684 0 \u53f7\u6570\u636e\u5e93\n// - \u6bcf\u4e2a\u4f1a\u8bdd\u6700\u591a\u5b58\u50a8 1000 \u4e2a\u4e8b\u4ef6\uff0c\u8d85\u51fa\u65f6\u81ea\u52a8\u6dd8\u6c70\u6700\u8001\u7684\u4e8b\u4ef6\n// - \u4f1a\u8bdd\u6570\u636e\u5728 30 \u5206\u949f\u65e0\u6d3b\u52a8\u540e\u81ea\u52a8\u8fc7\u671f\n// - \u5e94\u7528\u7ea7\u72b6\u6001\u5728 24 \u5c0f\u65f6\u540e\u8fc7\u671f\n// - \u7528\u6237\u7ea7\u72b6\u6001\u5728 7 \u5929\u540e\u8fc7\u671f\n// - \u5229\u7528 Redis \u7684 TTL \u673a\u5236\u81ea\u52a8\u6e05\u7406\u8fc7\u671f\u6570\u636e\uff0c\u65e0\u9700\u624b\u52a8\u6e05\u7406\n\n**\u9ed8\u8ba4\u914d\u7f6e\u793a\u4f8b\uff1a**\n\n```go\n// \u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e\u521b\u5efa Redis \u4f1a\u8bdd\u670d\u52a1\uff08\u9700\u8981\u9884\u914d\u7f6e Redis \u5b9e\u4f8b\uff09\nsessionService, err := redis.NewService()\n\n// \u9ed8\u8ba4\u914d\u7f6e\u6548\u679c\u8bf4\u660e\uff1a\n// - \u6bcf\u4e2a\u4f1a\u8bdd\u6700\u591a\u5b58\u50a8 1000 \u4e2a\u4e8b\u4ef6\uff08\u9ed8\u8ba4\u503c\uff09\n// - \u6240\u6709\u6570\u636e\u6c38\u4e0d\u8fc7\u671f\uff08TTL \u4e3a 0\uff09\n// - \u9700\u8981\u901a\u8fc7 storage.RegisterRedisInstance \u9884\u5148\u6ce8\u518c Redis \u5b9e\u4f8b\n// - \u9002\u7528\u4e8e\u9700\u8981\u6301\u4e45\u5316\u4f46\u4e0d\u9700\u8981\u81ea\u52a8\u8fc7\u671f\u7684\u573a\u666f\n</code></pre>"},{"location":"zh/session/#_13","title":"\u914d\u7f6e\u590d\u7528","text":"<p>\u5982\u679c\u4f60\u6709\u591a\u4e2a\u7ec4\u4ef6\u9700\u8981\u7528\u5230redis\uff0c\u53ef\u4ee5\u914d\u7f6e\u4e00\u4e2aredis\u5b9e\u4f8b\uff0c\u7136\u540e\u5728\u591a\u4e2a\u7ec4\u4ef6\u4e2d\u590d\u7528\u914d\u7f6e\u3002</p> <pre><code>    redisURL := fmt.Sprintf(\"redis://%s\", \"127.0.0.1:6379\")\n    storage.RegisterRedisInstance(\"my-redis-instance\", storage.WithClientBuilderURL(redisURL))\n    sessionService, err = redis.NewService(redis.WithRedisInstance(\"my-redis-instance\"))\n</code></pre>"},{"location":"zh/session/#redis_2","title":"Redis \u5b58\u50a8\u7ed3\u6784","text":"<pre><code># \u5e94\u7528\u6570\u636e\nappdata:{appName} -&gt; Hash {key: value}\n\n# \u7528\u6237\u6570\u636e  \nuserdata:{appName}:{userID} -&gt; Hash {key: value}\n\n# \u4f1a\u8bdd\u6570\u636e\nsession:{appName}:{userID} -&gt; Hash {sessionID: SessionData(JSON)}\n\n# \u4e8b\u4ef6\u8bb0\u5f55\nevents:{appName}:{userID}:{sessionID} -&gt; SortedSet {score: timestamp, value: Event(JSON)}\n</code></pre>"},{"location":"zh/session/#_14","title":"\u53c2\u8003\u8d44\u6e90","text":"<ul> <li>\u53c2\u8003\u793a\u4f8b</li> </ul> <p>\u901a\u8fc7\u5408\u7406\u4f7f\u7528\u4f1a\u8bdd\u7ba1\u7406\u529f\u80fd\uff0c\u4f60\u53ef\u4ee5\u6784\u5efa\u6709\u72b6\u6001\u7684\u667a\u80fd Agent\uff0c\u4e3a\u7528\u6237\u63d0\u4f9b\u8fde\u7eed\u3001\u4e2a\u6027\u5316\u7684\u4ea4\u4e92\u4f53\u9a8c\u3002</p>"},{"location":"zh/tool/","title":"Tool \u5de5\u5177\u4f7f\u7528\u6587\u6863","text":"<p>Tool \u5de5\u5177\u7cfb\u7edf\u662f tRPC-Agent-Go \u6846\u67b6\u7684\u6838\u5fc3\u7ec4\u4ef6\uff0c\u4e3a Agent \u63d0\u4f9b\u4e86\u4e0e\u5916\u90e8\u670d\u52a1\u548c\u529f\u80fd\u4ea4\u4e92\u7684\u80fd\u529b\u3002\u6846\u67b6\u652f\u6301\u591a\u79cd\u5de5\u5177\u7c7b\u578b\uff0c\u5305\u62ec\u51fd\u6570\u5de5\u5177\u548c\u57fa\u4e8e MCP\uff08Model Context Protocol\uff09\u6807\u51c6\u7684\u5916\u90e8\u5de5\u5177\u96c6\u6210\u3002</p>"},{"location":"zh/tool/#_1","title":"\u6982\u8ff0","text":""},{"location":"zh/tool/#_2","title":"\ud83c\udfaf \u6838\u5fc3\u7279\u6027","text":"<ul> <li>\ud83d\udd27 \u591a\u7c7b\u578b\u5de5\u5177\uff1a\u652f\u6301\u51fd\u6570\u5de5\u5177\uff08Function Tools\uff09\u548c MCP \u6807\u51c6\u5de5\u5177</li> <li>\ud83c\udf0a \u6d41\u5f0f\u54cd\u5e94\uff1a\u652f\u6301\u5b9e\u65f6\u6d41\u5f0f\u54cd\u5e94\u548c\u666e\u901a\u54cd\u5e94\u4e24\u79cd\u6a21\u5f0f  </li> <li>\u26a1 \u5e76\u884c\u6267\u884c\uff1a\u5de5\u5177\u8c03\u7528\u652f\u6301\u5e76\u884c\u6267\u884c\u4ee5\u63d0\u5347\u6027\u80fd</li> <li>\ud83d\udd04 MCP \u534f\u8bae\uff1a\u5b8c\u6574\u652f\u6301 STDIO\u3001SSE\u3001Streamable HTTP \u4e09\u79cd\u4f20\u8f93\u65b9\u5f0f</li> <li>\ud83d\udee0\ufe0f \u914d\u7f6e\u652f\u6301\uff1a\u63d0\u4f9b\u914d\u7f6e\u9009\u9879\u548c\u8fc7\u6ee4\u5668\u652f\u6301</li> </ul>"},{"location":"zh/tool/#_3","title":"\u6838\u5fc3\u6982\u5ff5","text":""},{"location":"zh/tool/#tool_1","title":"\ud83d\udd27 Tool\uff08\u5de5\u5177\uff09","text":"<p>Tool \u662f\u5355\u4e2a\u529f\u80fd\u7684\u62bd\u8c61\uff0c\u5b9e\u73b0 <code>tool.Tool</code> \u63a5\u53e3\u3002\u6bcf\u4e2a Tool \u63d0\u4f9b\u7279\u5b9a\u7684\u80fd\u529b\uff0c\u5982\u6570\u5b66\u8ba1\u7b97\u3001\u641c\u7d22\u3001\u65f6\u95f4\u67e5\u8be2\u7b49\u3002</p> <pre><code>type Tool interface {\n    Declaration() *Declaration  // \u8fd4\u56de\u5de5\u5177\u5143\u6570\u636e\n}\n\ntype CallableTool interface {\n    Call(ctx context.Context, jsonArgs []byte) (any, error)\n    Tool\n}\n</code></pre>"},{"location":"zh/tool/#toolset","title":"\ud83d\udce6 ToolSet\uff08\u5de5\u5177\u96c6\uff09","text":"<p>ToolSet \u662f\u4e00\u7ec4\u76f8\u5173\u5de5\u5177\u7684\u96c6\u5408\uff0c\u5b9e\u73b0 <code>tool.ToolSet</code> \u63a5\u53e3\u3002ToolSet \u8d1f\u8d23\u7ba1\u7406\u5de5\u5177\u7684\u751f\u547d\u5468\u671f\u3001\u8fde\u63a5\u548c\u8d44\u6e90\u6e05\u7406\u3002</p> <pre><code>type ToolSet interface {\n    Tools(context.Context) []CallableTool  // \u8fd4\u56de\u5de5\u5177\u5217\u8868\n    Close() error                          // \u8d44\u6e90\u6e05\u7406\n}\n</code></pre> <p>Tool \u4e0e ToolSet \u7684\u5173\u7cfb\uff1a</p> <ul> <li>\u4e00\u4e2a Tool = \u4e00\u4e2a\u5177\u4f53\u529f\u80fd\uff08\u5982\u8ba1\u7b97\u5668\uff09</li> <li>\u4e00\u4e2a ToolSet = \u4e00\u7ec4\u76f8\u5173\u7684 Tool\uff08\u5982MCP\u670d\u52a1\u5668\u63d0\u4f9b\u7684\u6240\u6709\u5de5\u5177\uff09</li> <li>Agent \u53ef\u4ee5\u540c\u65f6\u4f7f\u7528\u591a\u4e2a Tool \u548c\u591a\u4e2a ToolSet</li> </ul>"},{"location":"zh/tool/#_4","title":"\ud83c\udf0a \u6d41\u5f0f\u5de5\u5177\u652f\u6301","text":"<p>\u6846\u67b6\u652f\u6301\u6d41\u5f0f\u5de5\u5177\uff0c\u63d0\u4f9b\u5b9e\u65f6\u54cd\u5e94\u80fd\u529b\uff1a</p> <pre><code>// \u6d41\u5f0f\u5de5\u5177\u63a5\u53e3\ntype StreamableTool interface {\n    StreamableCall(ctx context.Context, jsonArgs []byte) (*StreamReader, error)\n    Tool\n}\n\n// \u6d41\u5f0f\u6570\u636e\u5355\u5143\ntype StreamChunk struct {\n    Content  any      `json:\"content\"`\n    Metadata Metadata `json:\"metadata,omitempty\"`\n}\n</code></pre> <p>\u6d41\u5f0f\u5de5\u5177\u7279\u70b9\uff1a</p> <ul> <li>\ud83d\ude80 \u5b9e\u65f6\u54cd\u5e94\uff1a\u6570\u636e\u9010\u6b65\u8fd4\u56de\uff0c\u65e0\u9700\u7b49\u5f85\u5b8c\u6574\u7ed3\u679c</li> <li>\ud83d\udcca \u5927\u6570\u636e\u5904\u7406\uff1a\u9002\u7528\u4e8e\u65e5\u5fd7\u67e5\u8be2\u3001\u6570\u636e\u5206\u6790\u7b49\u573a\u666f</li> <li>\u26a1 \u7528\u6237\u4f53\u9a8c\uff1a\u63d0\u4f9b\u5373\u65f6\u53cd\u9988\u548c\u8fdb\u5ea6\u663e\u793a</li> </ul>"},{"location":"zh/tool/#_5","title":"\u5de5\u5177\u7c7b\u578b\u8bf4\u660e","text":"\u5de5\u5177\u7c7b\u578b \u5b9a\u4e49 \u96c6\u6210\u65b9\u5f0f Function Tools \u76f4\u63a5\u8c03\u7528 Go \u51fd\u6570\u5b9e\u73b0\u7684\u5de5\u5177 <code>Tool</code> \u63a5\u53e3\uff0c\u8fdb\u7a0b\u5185\u8c03\u7528 Agent Tool (AgentTool) \u5c06\u4efb\u610f Agent \u5305\u88c5\u4e3a\u53ef\u8c03\u7528\u5de5\u5177 <code>Tool</code> \u63a5\u53e3\uff0c\u652f\u6301\u6d41\u5f0f\u5185\u90e8\u8f6c\u53d1 DuckDuckGo Tool \u57fa\u4e8e DuckDuckGo API \u7684\u641c\u7d22\u5de5\u5177 <code>Tool</code> \u63a5\u53e3\uff0cHTTP API MCP ToolSet \u57fa\u4e8e MCP \u534f\u8bae\u7684\u5916\u90e8\u5de5\u5177\u96c6 <code>ToolSet</code> \u63a5\u53e3\uff0c\u652f\u6301\u591a\u79cd\u4f20\u8f93\u65b9\u5f0f <p>\ud83d\udcd6 \u76f8\u5173\u6587\u6863\uff1aAgent \u95f4\u534f\u4f5c\u76f8\u5173\u7684 Agent Tool \u548c Transfer Tool \u8bf7\u53c2\u8003 \u591a Agent \u7cfb\u7edf\u6587\u6863\u3002</p>"},{"location":"zh/tool/#function-tools","title":"Function Tools \u51fd\u6570\u5de5\u5177","text":"<p>Function Tools \u901a\u8fc7 Go \u51fd\u6570\u76f4\u63a5\u5b9e\u73b0\u5de5\u5177\u903b\u8f91\uff0c\u662f\u6700\u7b80\u5355\u76f4\u63a5\u7684\u5de5\u5177\u7c7b\u578b\u3002</p>"},{"location":"zh/tool/#_6","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>import \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n\n// 1. \u5b9a\u4e49\u5de5\u5177\u51fd\u6570\nfunc calculator(ctx context.Context, req struct {\n    Operation string  `json:\"operation\"`\n    A         float64 `json:\"a\"`\n    B         float64 `json:\"b\"`\n}) (map[string]interface{}, error) {\n    switch req.Operation {\n    case \"add\":\n        return map[string]interface{}{\"result\": req.A + req.B}, nil\n    case \"multiply\":\n        return map[string]interface{}{\"result\": req.A * req.B}, nil\n    default:\n        return nil, fmt.Errorf(\"unsupported operation: %s\", req.Operation)\n    }\n}\n\n// 2. \u521b\u5efa\u5de5\u5177\ncalculatorTool := function.NewFunctionTool(\n    calculator,\n    function.WithName(\"calculator\"),\n    function.WithDescription(\"\u6267\u884c\u6570\u5b66\u8fd0\u7b97\"),\n)\n\n// 3. \u96c6\u6210\u5230 Agent\nagent := llmagent.New(\"math-assistant\",\n    llmagent.WithModel(model),\n    llmagent.WithTools([]tool.Tool{calculatorTool}))\n</code></pre>"},{"location":"zh/tool/#_7","title":"\u6d41\u5f0f\u5de5\u5177\u793a\u4f8b","text":"<pre><code>// 1. \u5b9a\u4e49\u8f93\u5165\u8f93\u51fa\u7ed3\u6784\ntype weatherInput struct {\n    Location string `json:\"location\"`\n}\n\ntype weatherOutput struct {\n    Weather string `json:\"weather\"`\n}\n\n// 2. \u5b9e\u73b0\u6d41\u5f0f\u5de5\u5177\u51fd\u6570\nfunc getStreamableWeather(input weatherInput) *tool.StreamReader {\n    stream := tool.NewStream(10)\n    go func() {\n        defer stream.Writer.Close()\n\n        // \u6a21\u62df\u9010\u6b65\u8fd4\u56de\u5929\u6c14\u6570\u636e\n        result := \"Sunny, 25\u00b0C in \" + input.Location\n        for i := 0; i &lt; len(result); i++ {\n            chunk := tool.StreamChunk{\n                Content: weatherOutput{\n                    Weather: result[i : i+1],\n                },\n                Metadata: tool.Metadata{CreatedAt: time.Now()},\n            }\n\n            if closed := stream.Writer.Send(chunk, nil); closed {\n                break\n            }\n            time.Sleep(10 * time.Millisecond) // \u6a21\u62df\u5ef6\u8fdf\n        }\n    }()\n\n    return stream.Reader\n}\n\n// 3. \u521b\u5efa\u6d41\u5f0f\u5de5\u5177\nweatherStreamTool := function.NewStreamableFunctionTool[weatherInput, weatherOutput](\n    getStreamableWeather,\n    function.WithName(\"get_weather_stream\"),\n    function.WithDescription(\"\u6d41\u5f0f\u83b7\u53d6\u5929\u6c14\u4fe1\u606f\"),\n)\n\n// 4. \u4f7f\u7528\u6d41\u5f0f\u5de5\u5177\nreader, err := weatherStreamTool.StreamableCall(ctx, jsonArgs)\nif err != nil {\n    return err\n}\n\n// \u63a5\u6536\u6d41\u5f0f\u6570\u636e\nfor {\n    chunk, err := reader.Recv()\n    if err == io.EOF {\n        break // \u6d41\u7ed3\u675f\n    }\n    if err != nil {\n        return err\n    }\n\n    // \u5904\u7406\u6bcf\u4e2a\u6570\u636e\u5757\n    fmt.Printf(\"\u6536\u5230\u6570\u636e: %v\\n\", chunk.Content)\n}\nreader.Close()\n</code></pre>"},{"location":"zh/tool/#_8","title":"\u5185\u7f6e\u5de5\u5177\u7c7b\u578b","text":""},{"location":"zh/tool/#duckduckgo","title":"DuckDuckGo \u641c\u7d22\u5de5\u5177","text":"<p>DuckDuckGo \u5de5\u5177\u57fa\u4e8e DuckDuckGo Instant Answer API\uff0c\u63d0\u4f9b\u4e8b\u5b9e\u6027\u3001\u767e\u79d1\u7c7b\u4fe1\u606f\u641c\u7d22\u529f\u80fd\u3002</p>"},{"location":"zh/tool/#_9","title":"\u57fa\u7840\u7528\u6cd5","text":"<pre><code>import \"trpc.group/trpc-go/trpc-agent-go/tool/duckduckgo\"\n\n// \u521b\u5efa DuckDuckGo \u641c\u7d22\u5de5\u5177\nsearchTool := duckduckgo.NewTool()\n\n// \u96c6\u6210\u5230 Agent\nsearchAgent := llmagent.New(\"search-assistant\",\n    llmagent.WithModel(model),\n    llmagent.WithTools([]tool.Tool{searchTool}))\n</code></pre>"},{"location":"zh/tool/#_10","title":"\u9ad8\u7ea7\u914d\u7f6e","text":"<pre><code>import (\n    \"net/http\"\n    \"time\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/duckduckgo\"\n)\n\n// \u81ea\u5b9a\u4e49\u914d\u7f6e\nsearchTool := duckduckgo.NewTool(\n    duckduckgo.WithBaseURL(\"https://api.duckduckgo.com\"),\n    duckduckgo.WithUserAgent(\"my-app/1.0\"),\n    duckduckgo.WithHTTPClient(&amp;http.Client{\n        Timeout: 15 * time.Second,\n    }),\n)\n</code></pre>"},{"location":"zh/tool/#mcp-tools","title":"MCP Tools \u534f\u8bae\u5de5\u5177","text":"<p>MCP\uff08Model Context Protocol\uff09\u662f\u4e00\u4e2a\u5f00\u653e\u534f\u8bae\uff0c\u6807\u51c6\u5316\u4e86\u5e94\u7528\u7a0b\u5e8f\u5411 LLM \u63d0\u4f9b\u4e0a\u4e0b\u6587\u7684\u65b9\u5f0f\u3002MCP \u5de5\u5177\u57fa\u4e8e JSON-RPC 2.0 \u534f\u8bae\uff0c\u4e3a Agent \u63d0\u4f9b\u4e86\u4e0e\u5916\u90e8\u670d\u52a1\u7684\u6807\u51c6\u5316\u96c6\u6210\u80fd\u529b\u3002</p> <p>MCP ToolSet \u7279\u70b9\uff1a</p> <ul> <li>\ud83d\udd17 \u7edf\u4e00\u63a5\u53e3\uff1a\u6240\u6709 MCP \u5de5\u5177\u90fd\u901a\u8fc7 <code>mcp.NewMCPToolSet()</code> \u521b\u5efa</li> <li>\ud83d\ude80 \u591a\u79cd\u4f20\u8f93\uff1a\u652f\u6301 STDIO\u3001SSE\u3001Streamable HTTP \u4e09\u79cd\u4f20\u8f93\u65b9\u5f0f</li> <li>\ud83d\udd27 \u5de5\u5177\u8fc7\u6ee4\uff1a\u652f\u6301\u5305\u542b/\u6392\u9664\u7279\u5b9a\u5de5\u5177</li> </ul>"},{"location":"zh/tool/#_11","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>import \"trpc.group/trpc-go/trpc-agent-go/tool/mcp\"\n\n// \u521b\u5efa MCP \u5de5\u5177\u96c6\uff08\u4ee5 STDIO \u4e3a\u4f8b\uff09\nmcpToolSet := mcp.NewMCPToolSet(\n    mcp.ConnectionConfig{\n        Transport: \"stdio\",           // \u4f20\u8f93\u65b9\u5f0f\n        Command:   \"go\",              // \u6267\u884c\u547d\u4ee4\n        Args:      []string{\"run\", \"./stdio_server/main.go\"},\n        Timeout:   10 * time.Second,\n    },\n    mcp.WithToolFilter(mcp.NewIncludeFilter(\"echo\", \"add\")), // \u53ef\u9009\uff1a\u5de5\u5177\u8fc7\u6ee4\n)\n\n// \u96c6\u6210\u5230 Agent\nagent := llmagent.New(\"mcp-assistant\",\n    llmagent.WithModel(model),\n    llmagent.WithToolSets([]tool.ToolSet{mcpToolSet}))\n</code></pre>"},{"location":"zh/tool/#_12","title":"\u4f20\u8f93\u65b9\u5f0f\u914d\u7f6e","text":"<p>MCP ToolSet \u901a\u8fc7 <code>Transport</code> \u5b57\u6bb5\u652f\u6301\u4e09\u79cd\u4f20\u8f93\u65b9\u5f0f\uff1a</p>"},{"location":"zh/tool/#1-stdio","title":"1. STDIO \u4f20\u8f93","text":"<p>\u901a\u8fc7\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u4e0e\u5916\u90e8\u8fdb\u7a0b\u901a\u4fe1\uff0c\u9002\u7528\u4e8e\u672c\u5730\u811a\u672c\u548c\u547d\u4ee4\u884c\u5de5\u5177\u3002</p> <pre><code>mcpToolSet := mcp.NewMCPToolSet(\n    mcp.ConnectionConfig{\n        Transport: \"stdio\",\n        Command:   \"python\",\n        Args:      []string{\"-m\", \"my_mcp_server\"},\n        Timeout:   10 * time.Second,\n    },\n)\n</code></pre>"},{"location":"zh/tool/#2-sse","title":"2. SSE \u4f20\u8f93","text":"<p>\u4f7f\u7528 Server-Sent Events \u8fdb\u884c\u901a\u4fe1\uff0c\u652f\u6301\u5b9e\u65f6\u6570\u636e\u63a8\u9001\u548c\u6d41\u5f0f\u54cd\u5e94\u3002</p> <pre><code>mcpToolSet := mcp.NewMCPToolSet(\n    mcp.ConnectionConfig{\n        Transport: \"sse\",\n        ServerURL: \"http://localhost:8080/sse\",\n        Timeout:   10 * time.Second,\n        Headers: map[string]string{\n            \"Authorization\": \"Bearer your-token\",\n        },\n    },\n)\n</code></pre>"},{"location":"zh/tool/#3-streamable-http","title":"3. Streamable HTTP \u4f20\u8f93","text":"<p>\u4f7f\u7528\u6807\u51c6 HTTP \u534f\u8bae\u8fdb\u884c\u901a\u4fe1\uff0c\u652f\u6301\u666e\u901aHTTP\u548c\u6d41\u5f0f\u54cd\u5e94\u3002</p> <pre><code>mcpToolSet := mcp.NewMCPToolSet(\n    mcp.ConnectionConfig{\n        Transport: \"streamable_http\",  // \u6ce8\u610f\uff1a\u4f7f\u7528\u5b8c\u6574\u540d\u79f0\n        ServerURL: \"http://localhost:3000/mcp\",\n        Timeout:   10 * time.Second,\n    },\n)\n</code></pre>"},{"location":"zh/tool/#agent-agenttool","title":"Agent \u5de5\u5177 (AgentTool)","text":"<p>AgentTool \u5141\u8bb8\u628a\u4e00\u4e2a\u73b0\u6709\u7684 Agent \u4ee5\u5de5\u5177\u7684\u5f62\u5f0f\u66b4\u9732\u7ed9\u4e0a\u5c42 Agent \u4f7f\u7528\u3002\u76f8\u6bd4\u666e\u901a\u51fd\u6570\u5de5\u5177\uff0cAgentTool \u7684\u4f18\u52bf\u5728\u4e8e\uff1a</p> <ul> <li>\u2705 \u590d\u7528\uff1a\u5c06\u590d\u6742 Agent \u80fd\u529b\u4f5c\u4e3a\u6807\u51c6\u5de5\u5177\u590d\u7528</li> <li>\ud83c\udf0a \u6d41\u5f0f\uff1a\u53ef\u9009\u62e9\u5c06\u5b50 Agent \u7684\u6d41\u5f0f\u4e8b\u4ef6\u201c\u5185\u8054\u201d\u8f6c\u53d1\u5230\u7236\u6d41\u7a0b</li> <li>\ud83e\udded \u63a7\u5236\uff1a\u901a\u8fc7\u9009\u9879\u63a7\u5236\u662f\u5426\u8df3\u8fc7\u5de5\u5177\u540e\u7684\u603b\u7ed3\u8865\u5168\u3001\u662f\u5426\u8fdb\u884c\u5185\u90e8\u8f6c\u53d1</li> </ul>"},{"location":"zh/tool/#_13","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool\"\n    agenttool \"trpc.group/trpc-go/trpc-agent-go/tool/agent\"\n)\n\n// 1) \u5b9a\u4e49\u4e00\u4e2a\u53ef\u590d\u7528\u7684\u5b50 Agent\uff08\u53ef\u914d\u7f6e\u4e3a\u6d41\u5f0f\uff09\nmathAgent := llmagent.New(\n    \"math-specialist\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithInstruction(\"\u4f60\u662f\u6570\u5b66\u4e13\u5bb6...\"),\n    llmagent.WithGenerationConfig(model.GenerationConfig{Stream: true}),\n)\n\n// 2) \u5305\u88c5\u4e3a Agent \u5de5\u5177\nmathTool := agenttool.NewTool(\n    mathAgent,\n    agenttool.WithSkipSummarization(true), // \u9ed8\u8ba4 true\uff1a\u5de5\u5177\u540e\u4e0d\u518d\u8ba9\u5916\u5c42\u6a21\u578b\u603b\u7ed3\n    agenttool.WithStreamInner(true),       // \u5f00\u542f\uff1a\u628a\u5b50 Agent \u7684\u6d41\u5f0f\u4e8b\u4ef6\u8f6c\u53d1\u7ed9\u7236\u6d41\u7a0b\n)\n\n// 3) \u5728\u7236 Agent \u4e2d\u4f7f\u7528\u8be5\u5de5\u5177\nparent := llmagent.New(\n    \"assistant\",\n    llmagent.WithModel(modelInstance),\n    llmagent.WithGenerationConfig(model.GenerationConfig{Stream: true}),\n    llmagent.WithTools([]tool.Tool{mathTool}),\n)\n</code></pre>"},{"location":"zh/tool/#_14","title":"\u6d41\u5f0f\u5185\u90e8\u8f6c\u53d1\u8be6\u89e3","text":"<p>\u5f53 <code>WithStreamInner(true)</code> \u65f6\uff0cAgentTool \u4f1a\u628a\u5b50 Agent \u5728\u8fd0\u884c\u65f6\u4ea7\u751f\u7684\u4e8b\u4ef6\u76f4\u63a5\u8f6c\u53d1\u5230\u7236\u6d41\u7a0b\u7684\u4e8b\u4ef6\u6d41\u4e2d\uff1a</p> <ul> <li>\u8f6c\u53d1\u7684\u4e8b\u4ef6\u672c\u8d28\u662f\u5b50 Agent \u91cc\u7684 <code>event.Event</code>\uff0c\u5305\u542b\u589e\u91cf\u5185\u5bb9\uff08<code>choice.Delta.Content</code>\uff09</li> <li>\u4e3a\u907f\u514d\u91cd\u590d\uff0c\u5b50 Agent \u5728\u7ed3\u675f\u65f6\u4ea7\u751f\u7684\u201c\u5b8c\u6574\u5927\u6bb5\u5185\u5bb9\u201d\u4e0d\u4f1a\u518d\u6b21\u4f5c\u4e3a\u8f6c\u53d1\u4e8b\u4ef6\u6253\u5370\uff1b\u4f46\u4f1a\u88ab\u805a\u5408\u5230\u6700\u7ec8 <code>tool.response</code> \u7684\u5185\u5bb9\u91cc\uff0c\u4f9b\u4e0b\u4e00\u6b21 LLM \u8c03\u7528\u4f5c\u4e3a\u5de5\u5177\u6d88\u606f\u4f7f\u7528</li> <li>UI \u5c42\u5efa\u8bae\uff1a\u5c55\u793a\u201c\u8f6c\u53d1\u7684\u5b50 Agent \u589e\u91cf\u5185\u5bb9\u201d\uff0c\u4f46\u9ed8\u8ba4\u4e0d\u91cd\u590d\u6253\u5370\u6700\u7ec8\u805a\u5408\u7684 <code>tool.response</code> \u5185\u5bb9\uff08\u9664\u975e\u7528\u4e8e\u8c03\u8bd5\uff09</li> </ul> <p>\u793a\u4f8b\uff1a\u4ec5\u5728\u9700\u8981\u65f6\u663e\u793a\u5de5\u5177\u7247\u6bb5\uff0c\u907f\u514d\u91cd\u590d\u8f93\u51fa</p> <pre><code>if ev.Response != nil &amp;&amp; ev.Object == model.ObjectTypeToolResponse {\n    // \u5de5\u5177\u54cd\u5e94\uff08\u5305\u542b\u805a\u5408\u540e\u7684\u5185\u5bb9\uff09\uff0c\u9ed8\u8ba4\u4e0d\u6253\u5370\uff0c\u907f\u514d\u548c\u5b50 Agent \u8f6c\u53d1\u7684\u5185\u5bb9\u91cd\u590d\n    // ...\u4ec5\u5728\u8c03\u8bd5\u6216\u9700\u8981\u5c55\u793a\u5de5\u5177\u7ec6\u8282\u65f6\u518d\u6253\u5370\n}\n\n// \u5b50 Agent \u8f6c\u53d1\u7684\u6d41\u5f0f\u589e\u91cf\uff08\u4f5c\u8005\u4e0d\u662f\u7236 Agent\uff09\nif ev.Author != parentName &amp;&amp; len(ev.Choices) &gt; 0 {\n    if delta := ev.Choices[0].Delta.Content; delta != \"\" {\n        fmt.Print(delta)\n    }\n}\n</code></pre>"},{"location":"zh/tool/#_15","title":"\u9009\u9879\u8bf4\u660e","text":"<ul> <li>WithSkipSummarization(bool)\uff1a<ul> <li>true\uff08\u9ed8\u8ba4\uff09\uff1a\u5916\u5c42 Flow \u5728 <code>tool.response</code> \u540e\u76f4\u63a5\u7ed3\u675f\u672c\u8f6e\uff08\u4e0d\u518d\u989d\u5916\u603b\u7ed3\uff09</li> <li>false\uff1a\u5141\u8bb8\u5728\u5de5\u5177\u7ed3\u679c\u540e\u7ee7\u7eed\u4e00\u6b21 LLM \u8c03\u7528\u8fdb\u884c\u603b\u7ed3/\u56de\u7b54</li> </ul> </li> </ul> <ul> <li>WithStreamInner(bool)\uff1a<ul> <li>true\uff1a\u628a\u5b50 Agent \u7684\u4e8b\u4ef6\u76f4\u63a5\u8f6c\u53d1\u5230\u7236\u6d41\u7a0b\uff08\u5f3a\u70c8\u5efa\u8bae\u7236/\u5b50 Agent \u90fd\u5f00\u542f <code>GenerationConfig{Stream: true}</code>\uff09</li> <li>false\uff1a\u6309\u201c\u4ec5\u53ef\u8c03\u7528\u5de5\u5177\u201d\u5904\u7406\uff0c\u4e0d\u505a\u5185\u90e8\u4e8b\u4ef6\u8f6c\u53d1</li> </ul> </li> </ul>"},{"location":"zh/tool/#_16","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ul> <li>\u4e8b\u4ef6\u5b8c\u6210\u4fe1\u53f7\uff1a\u5de5\u5177\u54cd\u5e94\u4e8b\u4ef6\u4f1a\u88ab\u6807\u8bb0 <code>RequiresCompletion=true</code>\uff0cRunner \u4f1a\u81ea\u52a8\u53d1\u9001\u5b8c\u6210\u4fe1\u53f7\uff0c\u65e0\u9700\u624b\u5de5\u5904\u7406</li> <li>\u5185\u5bb9\u53bb\u91cd\uff1a\u5982\u679c\u5df2\u8f6c\u53d1\u5b50 Agent \u7684\u589e\u91cf\u5185\u5bb9\uff0c\u9ed8\u8ba4\u4e0d\u8981\u518d\u628a\u6700\u7ec8 <code>tool.response</code> \u7684\u805a\u5408\u5185\u5bb9\u6253\u5370\u51fa\u6765</li> <li>\u6a21\u578b\u517c\u5bb9\u6027\uff1a\u4e00\u4e9b\u6a21\u578b\u8981\u6c42\u5de5\u5177\u8c03\u7528\u540e\u5fc5\u987b\u8ddf\u968f\u5de5\u5177\u6d88\u606f\uff0cAgentTool \u5df2\u81ea\u52a8\u586b\u5145\u805a\u5408\u540e\u7684\u5de5\u5177\u5185\u5bb9\u6ee1\u8db3\u6b64\u8981\u6c42</li> </ul>"},{"location":"zh/tool/#_17","title":"\u5de5\u5177\u96c6\u6210\u4e0e\u4f7f\u7528","text":""},{"location":"zh/tool/#agent","title":"\u521b\u5efa Agent \u4e0e\u5de5\u5177\u96c6\u6210","text":"<pre><code>import (\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/duckduckgo\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/mcp\"\n)\n\n// \u521b\u5efa\u51fd\u6570\u5de5\u5177\ncalculatorTool := function.NewFunctionTool(calculator,\n    function.WithName(\"calculator\"),\n    function.WithDescription(\"\u6267\u884c\u57fa\u7840\u6570\u5b66\u8fd0\u7b97\"))\n\ntimeTool := function.NewFunctionTool(getCurrentTime,\n    function.WithName(\"current_time\"), \n    function.WithDescription(\"\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\"))\n\n// \u521b\u5efa\u5185\u7f6e\u5de5\u5177\nsearchTool := duckduckgo.NewTool()\n\n// \u521b\u5efa MCP \u5de5\u5177\u96c6\uff08\u4e0d\u540c\u4f20\u8f93\u65b9\u5f0f\u7684\u793a\u4f8b\uff09\nstdioToolSet := mcp.NewMCPToolSet(\n    mcp.ConnectionConfig{\n        Transport: \"stdio\",\n        Command:   \"python\",\n        Args:      []string{\"-m\", \"my_mcp_server\"},\n        Timeout:   10 * time.Second,\n    },\n)\n\nsseToolSet := mcp.NewMCPToolSet(\n    mcp.ConnectionConfig{\n        Transport: \"sse\",\n        ServerURL: \"http://localhost:8080/sse\",\n        Timeout:   10 * time.Second,\n    },\n)\n\nstreamableToolSet := mcp.NewMCPToolSet(\n    mcp.ConnectionConfig{\n        Transport: \"streamable_http\",\n        ServerURL: \"http://localhost:3000/mcp\",\n        Timeout:   10 * time.Second,\n    },\n)\n\n// \u521b\u5efa Agent \u5e76\u96c6\u6210\u6240\u6709\u5de5\u5177\nagent := llmagent.New(\"ai-assistant\",\n    llmagent.WithModel(model),\n    llmagent.WithInstruction(\"\u4f60\u662f\u4e00\u4e2a\u6709\u5e2e\u52a9\u7684AI\u52a9\u624b\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u5de5\u5177\u534f\u52a9\u7528\u6237\"),\n    // \u6dfb\u52a0\u5355\u4e2a\u5de5\u5177\uff08Tool \u63a5\u53e3\uff09\n    llmagent.WithTools([]tool.Tool{\n        calculatorTool, timeTool, searchTool,\n    }),\n    // \u6dfb\u52a0\u5de5\u5177\u96c6\uff08ToolSet \u63a5\u53e3\uff09\n    llmagent.WithToolSets([]tool.ToolSet{stdioToolSet, sseToolSet, streamableToolSet}),\n)\n</code></pre>"},{"location":"zh/tool/#_18","title":"\u5de5\u5177\u8fc7\u6ee4\u5668","text":"<pre><code>// \u5305\u542b\u8fc7\u6ee4\u5668\uff1a\u53ea\u4f7f\u7528\u6307\u5b9a\u5de5\u5177\nincludeFilter := mcp.NewIncludeFilter(\"get_weather\", \"get_news\", \"calculator\")\n\n// \u6392\u9664\u8fc7\u6ee4\u5668\uff1a\u6392\u9664\u6307\u5b9a\u5de5\u5177\nexcludeFilter := mcp.NewExcludeFilter(\"deprecated_tool\", \"slow_tool\")\n\n// \u7ec4\u5408\u8fc7\u6ee4\u5668\ncombinedToolSet := mcp.NewMCPToolSet(\n    connectionConfig,\n    mcp.WithToolFilter(includeFilter),\n)\n</code></pre>"},{"location":"zh/tool/#_19","title":"\u5e76\u884c\u5de5\u5177\u6267\u884c","text":"<pre><code>// \u542f\u7528\u5e76\u884c\u5de5\u5177\u6267\u884c\uff08\u53ef\u9009\uff0c\u7528\u4e8e\u6027\u80fd\u4f18\u5316\uff09\nagent := llmagent.New(\"ai-assistant\",\n    llmagent.WithModel(model),\n    llmagent.WithTools(tools),\n    llmagent.WithToolSets(toolSets),\n    llmagent.WithEnableParallelTools(true), // \u542f\u7528\u5e76\u884c\u6267\u884c\n)\n</code></pre> <p>\u5e76\u884c\u6267\u884c\u6548\u679c\uff1a</p> <pre><code># \u5e76\u884c\u6267\u884c\uff08\u542f\u7528\u65f6\uff09\nTool 1: get_weather     [====] 50ms\nTool 2: get_population  [====] 50ms  \nTool 3: get_time       [====] 50ms\n\u603b\u65f6\u95f4: ~50ms\uff08\u540c\u65f6\u6267\u884c\uff09\n\n# \u4e32\u884c\u6267\u884c\uff08\u9ed8\u8ba4\uff09\nTool 1: get_weather     [====] 50ms\nTool 2: get_population       [====] 50ms\nTool 3: get_time                  [====] 50ms  \n\u603b\u65f6\u95f4: ~150ms\uff08\u4f9d\u6b21\u6267\u884c\uff09\n</code></pre>"},{"location":"zh/tool/#_20","title":"\u5feb\u901f\u5f00\u59cb","text":""},{"location":"zh/tool/#_21","title":"\u73af\u5883\u51c6\u5907","text":"<pre><code># \u8bbe\u7f6e API \u5bc6\u94a5\nexport OPENAI_API_KEY=\"your-api-key\"\n</code></pre>"},{"location":"zh/tool/#_22","title":"\u7b80\u5355\u793a\u4f8b","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n\n    \"trpc.group/trpc-go/trpc-agent-go/runner\"\n    \"trpc.group/trpc-go/trpc-agent-go/agent/llmagent\"\n    \"trpc.group/trpc-go/trpc-agent-go/model/openai\"\n    \"trpc.group/trpc-go/trpc-agent-go/model\"\n    \"trpc.group/trpc-go/trpc-agent-go/tool/function\"\n)\n\nfunc main() {\n    // 1. \u521b\u5efa\u7b80\u5355\u5de5\u5177\n    calculatorTool := function.NewFunctionTool(\n        func(ctx context.Context, req struct {\n            Operation string  `json:\"operation\"`\n            A         float64 `json:\"a\"`\n            B         float64 `json:\"b\"`\n        }) (map[string]interface{}, error) {\n            var result float64\n            switch req.Operation {\n            case \"add\":\n                result = req.A + req.B\n            case \"multiply\":\n                result = req.A * req.B\n            default:\n                return nil, fmt.Errorf(\"unsupported operation\")\n            }\n            return map[string]interface{}{\"result\": result}, nil\n        },\n        function.WithName(\"calculator\"),\n        function.WithDescription(\"\u7b80\u5355\u8ba1\u7b97\u5668\"),\n    )\n\n    // 2. \u521b\u5efa\u6a21\u578b\u548c Agent\n    llmModel := openai.New(\"DeepSeek-V3-Online-64K\")\n    agent := llmagent.New(\"calculator-assistant\",\n        llmagent.WithModel(llmModel),\n        llmagent.WithInstruction(\"\u4f60\u662f\u4e00\u4e2a\u6570\u5b66\u52a9\u624b\"),\n        llmagent.WithTools([]tool.Tool{calculatorTool}),\n        llmagent.WithGenerationConfig(model.GenerationConfig{Stream: true}), // \u542f\u7528\u6d41\u5f0f\u8f93\u51fa\n    )\n\n    // 3. \u521b\u5efa Runner \u5e76\u6267\u884c\n    r := runner.NewRunner(\"math-app\", agent)\n\n    ctx := context.Background()\n    userMessage := model.NewUserMessage(\"\u8bf7\u8ba1\u7b97 25 \u4e58\u4ee5 4\")\n\n    eventChan, err := r.Run(ctx, \"user1\", \"session1\", userMessage)\n    if err != nil {\n        panic(err)\n    }\n\n    // 4. \u5904\u7406\u54cd\u5e94\n    for event := range eventChan {\n        if event.Error != nil {\n            fmt.Printf(\"\u9519\u8bef: %s\\n\", event.Error.Message)\n            continue\n        }\n\n        // \u663e\u793a\u5de5\u5177\u8c03\u7528\n        if len(event.Choices) &gt; 0 &amp;&amp; len(event.Choices[0].Message.ToolCalls) &gt; 0 {\n            for _, toolCall := range event.Choices[0].Message.ToolCalls {\n                fmt.Printf(\"\ud83d\udd27 \u8c03\u7528\u5de5\u5177: %s\\n\", toolCall.Function.Name)\n                fmt.Printf(\"   \u53c2\u6570: %s\\n\", string(toolCall.Function.Arguments))\n            }\n        }\n\n        // \u663e\u793a\u6d41\u5f0f\u5185\u5bb9\n        if len(event.Choices) &gt; 0 {\n            fmt.Print(event.Choices[0].Delta.Content)\n        }\n\n        if event.Done {\n            break\n        }\n    }\n}\n</code></pre>"},{"location":"zh/tool/#_23","title":"\u8fd0\u884c\u793a\u4f8b","text":"<pre><code># \u8fdb\u5165\u5de5\u5177\u793a\u4f8b\u76ee\u5f55\ncd examples/tool\ngo run .\n\n# \u8fdb\u5165 MCP \u5de5\u5177\u793a\u4f8b\u76ee\u5f55  \ncd examples/mcp_tool\n\n# \u542f\u52a8\u5916\u90e8\u670d\u52a1\u5668\ncd streamalbe_server &amp;&amp; go run main.go &amp;\n\n# \u8fd0\u884c\u4e3b\u7a0b\u5e8f\ngo run main.go -model=\"deepseek-chat\"\n</code></pre>"},{"location":"zh/tool/#_24","title":"\u603b\u7ed3","text":"<p>Tool \u5de5\u5177\u7cfb\u7edf\u4e3a tRPC-Agent-Go \u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u6269\u5c55\u80fd\u529b\uff0c\u652f\u6301\u51fd\u6570\u5de5\u5177\u3001DuckDuckGo \u641c\u7d22\u5de5\u5177\u548c MCP \u534f\u8bae\u5de5\u5177\u3002</p>"}]}